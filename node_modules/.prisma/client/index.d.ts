
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model AddToCartTracker
 * 
 */
export type AddToCartTracker = $Result.DefaultSelection<Prisma.$AddToCartTrackerPayload>
/**
 * Model CreditUsage
 * 
 */
export type CreditUsage = $Result.DefaultSelection<Prisma.$CreditUsagePayload>
/**
 * Model CustomerData
 * 
 */
export type CustomerData = $Result.DefaultSelection<Prisma.$CustomerDataPayload>
/**
 * Model DataRequest
 * 
 */
export type DataRequest = $Result.DefaultSelection<Prisma.$DataRequestPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model Shop
 * 
 */
export type Shop = $Result.DefaultSelection<Prisma.$ShopPayload>
/**
 * Model ShopSubscription
 * 
 */
export type ShopSubscription = $Result.DefaultSelection<Prisma.$ShopSubscriptionPayload>
/**
 * Model TryOnTracker
 * 
 */
export type TryOnTracker = $Result.DefaultSelection<Prisma.$TryOnTrackerPayload>
/**
 * Model WebhookEvent
 * 
 */
export type WebhookEvent = $Result.DefaultSelection<Prisma.$WebhookEventPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more AddToCartTrackers
 * const addToCartTrackers = await prisma.addToCartTracker.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more AddToCartTrackers
   * const addToCartTrackers = await prisma.addToCartTracker.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.addToCartTracker`: Exposes CRUD operations for the **AddToCartTracker** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AddToCartTrackers
    * const addToCartTrackers = await prisma.addToCartTracker.findMany()
    * ```
    */
  get addToCartTracker(): Prisma.AddToCartTrackerDelegate<ExtArgs>;

  /**
   * `prisma.creditUsage`: Exposes CRUD operations for the **CreditUsage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CreditUsages
    * const creditUsages = await prisma.creditUsage.findMany()
    * ```
    */
  get creditUsage(): Prisma.CreditUsageDelegate<ExtArgs>;

  /**
   * `prisma.customerData`: Exposes CRUD operations for the **CustomerData** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CustomerData
    * const customerData = await prisma.customerData.findMany()
    * ```
    */
  get customerData(): Prisma.CustomerDataDelegate<ExtArgs>;

  /**
   * `prisma.dataRequest`: Exposes CRUD operations for the **DataRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DataRequests
    * const dataRequests = await prisma.dataRequest.findMany()
    * ```
    */
  get dataRequest(): Prisma.DataRequestDelegate<ExtArgs>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs>;

  /**
   * `prisma.shop`: Exposes CRUD operations for the **Shop** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Shops
    * const shops = await prisma.shop.findMany()
    * ```
    */
  get shop(): Prisma.ShopDelegate<ExtArgs>;

  /**
   * `prisma.shopSubscription`: Exposes CRUD operations for the **ShopSubscription** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ShopSubscriptions
    * const shopSubscriptions = await prisma.shopSubscription.findMany()
    * ```
    */
  get shopSubscription(): Prisma.ShopSubscriptionDelegate<ExtArgs>;

  /**
   * `prisma.tryOnTracker`: Exposes CRUD operations for the **TryOnTracker** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TryOnTrackers
    * const tryOnTrackers = await prisma.tryOnTracker.findMany()
    * ```
    */
  get tryOnTracker(): Prisma.TryOnTrackerDelegate<ExtArgs>;

  /**
   * `prisma.webhookEvent`: Exposes CRUD operations for the **WebhookEvent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WebhookEvents
    * const webhookEvents = await prisma.webhookEvent.findMany()
    * ```
    */
  get webhookEvent(): Prisma.WebhookEventDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    AddToCartTracker: 'AddToCartTracker',
    CreditUsage: 'CreditUsage',
    CustomerData: 'CustomerData',
    DataRequest: 'DataRequest',
    Session: 'Session',
    Shop: 'Shop',
    ShopSubscription: 'ShopSubscription',
    TryOnTracker: 'TryOnTracker',
    WebhookEvent: 'WebhookEvent'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "addToCartTracker" | "creditUsage" | "customerData" | "dataRequest" | "session" | "shop" | "shopSubscription" | "tryOnTracker" | "webhookEvent"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      AddToCartTracker: {
        payload: Prisma.$AddToCartTrackerPayload<ExtArgs>
        fields: Prisma.AddToCartTrackerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AddToCartTrackerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddToCartTrackerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AddToCartTrackerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddToCartTrackerPayload>
          }
          findFirst: {
            args: Prisma.AddToCartTrackerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddToCartTrackerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AddToCartTrackerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddToCartTrackerPayload>
          }
          findMany: {
            args: Prisma.AddToCartTrackerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddToCartTrackerPayload>[]
          }
          create: {
            args: Prisma.AddToCartTrackerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddToCartTrackerPayload>
          }
          createMany: {
            args: Prisma.AddToCartTrackerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AddToCartTrackerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddToCartTrackerPayload>[]
          }
          delete: {
            args: Prisma.AddToCartTrackerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddToCartTrackerPayload>
          }
          update: {
            args: Prisma.AddToCartTrackerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddToCartTrackerPayload>
          }
          deleteMany: {
            args: Prisma.AddToCartTrackerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AddToCartTrackerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AddToCartTrackerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddToCartTrackerPayload>
          }
          aggregate: {
            args: Prisma.AddToCartTrackerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAddToCartTracker>
          }
          groupBy: {
            args: Prisma.AddToCartTrackerGroupByArgs<ExtArgs>
            result: $Utils.Optional<AddToCartTrackerGroupByOutputType>[]
          }
          count: {
            args: Prisma.AddToCartTrackerCountArgs<ExtArgs>
            result: $Utils.Optional<AddToCartTrackerCountAggregateOutputType> | number
          }
        }
      }
      CreditUsage: {
        payload: Prisma.$CreditUsagePayload<ExtArgs>
        fields: Prisma.CreditUsageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CreditUsageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditUsagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CreditUsageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditUsagePayload>
          }
          findFirst: {
            args: Prisma.CreditUsageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditUsagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CreditUsageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditUsagePayload>
          }
          findMany: {
            args: Prisma.CreditUsageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditUsagePayload>[]
          }
          create: {
            args: Prisma.CreditUsageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditUsagePayload>
          }
          createMany: {
            args: Prisma.CreditUsageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CreditUsageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditUsagePayload>[]
          }
          delete: {
            args: Prisma.CreditUsageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditUsagePayload>
          }
          update: {
            args: Prisma.CreditUsageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditUsagePayload>
          }
          deleteMany: {
            args: Prisma.CreditUsageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CreditUsageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CreditUsageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditUsagePayload>
          }
          aggregate: {
            args: Prisma.CreditUsageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCreditUsage>
          }
          groupBy: {
            args: Prisma.CreditUsageGroupByArgs<ExtArgs>
            result: $Utils.Optional<CreditUsageGroupByOutputType>[]
          }
          count: {
            args: Prisma.CreditUsageCountArgs<ExtArgs>
            result: $Utils.Optional<CreditUsageCountAggregateOutputType> | number
          }
        }
      }
      CustomerData: {
        payload: Prisma.$CustomerDataPayload<ExtArgs>
        fields: Prisma.CustomerDataFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CustomerDataFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerDataPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CustomerDataFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerDataPayload>
          }
          findFirst: {
            args: Prisma.CustomerDataFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerDataPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CustomerDataFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerDataPayload>
          }
          findMany: {
            args: Prisma.CustomerDataFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerDataPayload>[]
          }
          create: {
            args: Prisma.CustomerDataCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerDataPayload>
          }
          createMany: {
            args: Prisma.CustomerDataCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CustomerDataCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerDataPayload>[]
          }
          delete: {
            args: Prisma.CustomerDataDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerDataPayload>
          }
          update: {
            args: Prisma.CustomerDataUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerDataPayload>
          }
          deleteMany: {
            args: Prisma.CustomerDataDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CustomerDataUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CustomerDataUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerDataPayload>
          }
          aggregate: {
            args: Prisma.CustomerDataAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCustomerData>
          }
          groupBy: {
            args: Prisma.CustomerDataGroupByArgs<ExtArgs>
            result: $Utils.Optional<CustomerDataGroupByOutputType>[]
          }
          count: {
            args: Prisma.CustomerDataCountArgs<ExtArgs>
            result: $Utils.Optional<CustomerDataCountAggregateOutputType> | number
          }
        }
      }
      DataRequest: {
        payload: Prisma.$DataRequestPayload<ExtArgs>
        fields: Prisma.DataRequestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DataRequestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataRequestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DataRequestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataRequestPayload>
          }
          findFirst: {
            args: Prisma.DataRequestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataRequestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DataRequestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataRequestPayload>
          }
          findMany: {
            args: Prisma.DataRequestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataRequestPayload>[]
          }
          create: {
            args: Prisma.DataRequestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataRequestPayload>
          }
          createMany: {
            args: Prisma.DataRequestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DataRequestCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataRequestPayload>[]
          }
          delete: {
            args: Prisma.DataRequestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataRequestPayload>
          }
          update: {
            args: Prisma.DataRequestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataRequestPayload>
          }
          deleteMany: {
            args: Prisma.DataRequestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DataRequestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DataRequestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataRequestPayload>
          }
          aggregate: {
            args: Prisma.DataRequestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDataRequest>
          }
          groupBy: {
            args: Prisma.DataRequestGroupByArgs<ExtArgs>
            result: $Utils.Optional<DataRequestGroupByOutputType>[]
          }
          count: {
            args: Prisma.DataRequestCountArgs<ExtArgs>
            result: $Utils.Optional<DataRequestCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      Shop: {
        payload: Prisma.$ShopPayload<ExtArgs>
        fields: Prisma.ShopFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ShopFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShopPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ShopFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShopPayload>
          }
          findFirst: {
            args: Prisma.ShopFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShopPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ShopFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShopPayload>
          }
          findMany: {
            args: Prisma.ShopFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShopPayload>[]
          }
          create: {
            args: Prisma.ShopCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShopPayload>
          }
          createMany: {
            args: Prisma.ShopCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ShopCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShopPayload>[]
          }
          delete: {
            args: Prisma.ShopDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShopPayload>
          }
          update: {
            args: Prisma.ShopUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShopPayload>
          }
          deleteMany: {
            args: Prisma.ShopDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ShopUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ShopUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShopPayload>
          }
          aggregate: {
            args: Prisma.ShopAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateShop>
          }
          groupBy: {
            args: Prisma.ShopGroupByArgs<ExtArgs>
            result: $Utils.Optional<ShopGroupByOutputType>[]
          }
          count: {
            args: Prisma.ShopCountArgs<ExtArgs>
            result: $Utils.Optional<ShopCountAggregateOutputType> | number
          }
        }
      }
      ShopSubscription: {
        payload: Prisma.$ShopSubscriptionPayload<ExtArgs>
        fields: Prisma.ShopSubscriptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ShopSubscriptionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShopSubscriptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ShopSubscriptionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShopSubscriptionPayload>
          }
          findFirst: {
            args: Prisma.ShopSubscriptionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShopSubscriptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ShopSubscriptionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShopSubscriptionPayload>
          }
          findMany: {
            args: Prisma.ShopSubscriptionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShopSubscriptionPayload>[]
          }
          create: {
            args: Prisma.ShopSubscriptionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShopSubscriptionPayload>
          }
          createMany: {
            args: Prisma.ShopSubscriptionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ShopSubscriptionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShopSubscriptionPayload>[]
          }
          delete: {
            args: Prisma.ShopSubscriptionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShopSubscriptionPayload>
          }
          update: {
            args: Prisma.ShopSubscriptionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShopSubscriptionPayload>
          }
          deleteMany: {
            args: Prisma.ShopSubscriptionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ShopSubscriptionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ShopSubscriptionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShopSubscriptionPayload>
          }
          aggregate: {
            args: Prisma.ShopSubscriptionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateShopSubscription>
          }
          groupBy: {
            args: Prisma.ShopSubscriptionGroupByArgs<ExtArgs>
            result: $Utils.Optional<ShopSubscriptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ShopSubscriptionCountArgs<ExtArgs>
            result: $Utils.Optional<ShopSubscriptionCountAggregateOutputType> | number
          }
        }
      }
      TryOnTracker: {
        payload: Prisma.$TryOnTrackerPayload<ExtArgs>
        fields: Prisma.TryOnTrackerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TryOnTrackerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TryOnTrackerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TryOnTrackerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TryOnTrackerPayload>
          }
          findFirst: {
            args: Prisma.TryOnTrackerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TryOnTrackerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TryOnTrackerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TryOnTrackerPayload>
          }
          findMany: {
            args: Prisma.TryOnTrackerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TryOnTrackerPayload>[]
          }
          create: {
            args: Prisma.TryOnTrackerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TryOnTrackerPayload>
          }
          createMany: {
            args: Prisma.TryOnTrackerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TryOnTrackerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TryOnTrackerPayload>[]
          }
          delete: {
            args: Prisma.TryOnTrackerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TryOnTrackerPayload>
          }
          update: {
            args: Prisma.TryOnTrackerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TryOnTrackerPayload>
          }
          deleteMany: {
            args: Prisma.TryOnTrackerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TryOnTrackerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TryOnTrackerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TryOnTrackerPayload>
          }
          aggregate: {
            args: Prisma.TryOnTrackerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTryOnTracker>
          }
          groupBy: {
            args: Prisma.TryOnTrackerGroupByArgs<ExtArgs>
            result: $Utils.Optional<TryOnTrackerGroupByOutputType>[]
          }
          count: {
            args: Prisma.TryOnTrackerCountArgs<ExtArgs>
            result: $Utils.Optional<TryOnTrackerCountAggregateOutputType> | number
          }
        }
      }
      WebhookEvent: {
        payload: Prisma.$WebhookEventPayload<ExtArgs>
        fields: Prisma.WebhookEventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WebhookEventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookEventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WebhookEventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookEventPayload>
          }
          findFirst: {
            args: Prisma.WebhookEventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookEventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WebhookEventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookEventPayload>
          }
          findMany: {
            args: Prisma.WebhookEventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookEventPayload>[]
          }
          create: {
            args: Prisma.WebhookEventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookEventPayload>
          }
          createMany: {
            args: Prisma.WebhookEventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WebhookEventCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookEventPayload>[]
          }
          delete: {
            args: Prisma.WebhookEventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookEventPayload>
          }
          update: {
            args: Prisma.WebhookEventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookEventPayload>
          }
          deleteMany: {
            args: Prisma.WebhookEventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WebhookEventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.WebhookEventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookEventPayload>
          }
          aggregate: {
            args: Prisma.WebhookEventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWebhookEvent>
          }
          groupBy: {
            args: Prisma.WebhookEventGroupByArgs<ExtArgs>
            result: $Utils.Optional<WebhookEventGroupByOutputType>[]
          }
          count: {
            args: Prisma.WebhookEventCountArgs<ExtArgs>
            result: $Utils.Optional<WebhookEventCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ShopCountOutputType
   */

  export type ShopCountOutputType = {
    CustomerData: number
    DataRequest: number
  }

  export type ShopCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    CustomerData?: boolean | ShopCountOutputTypeCountCustomerDataArgs
    DataRequest?: boolean | ShopCountOutputTypeCountDataRequestArgs
  }

  // Custom InputTypes
  /**
   * ShopCountOutputType without action
   */
  export type ShopCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShopCountOutputType
     */
    select?: ShopCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ShopCountOutputType without action
   */
  export type ShopCountOutputTypeCountCustomerDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerDataWhereInput
  }

  /**
   * ShopCountOutputType without action
   */
  export type ShopCountOutputTypeCountDataRequestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DataRequestWhereInput
  }


  /**
   * Models
   */

  /**
   * Model AddToCartTracker
   */

  export type AggregateAddToCartTracker = {
    _count: AddToCartTrackerCountAggregateOutputType | null
    _min: AddToCartTrackerMinAggregateOutputType | null
    _max: AddToCartTrackerMaxAggregateOutputType | null
  }

  export type AddToCartTrackerMinAggregateOutputType = {
    id: string | null
    tryOnId: string | null
    productUrl: string | null
    productName: string | null
    productImage: string | null
    location: string | null
    timestamp: Date | null
    shop: string | null
  }

  export type AddToCartTrackerMaxAggregateOutputType = {
    id: string | null
    tryOnId: string | null
    productUrl: string | null
    productName: string | null
    productImage: string | null
    location: string | null
    timestamp: Date | null
    shop: string | null
  }

  export type AddToCartTrackerCountAggregateOutputType = {
    id: number
    tryOnId: number
    productUrl: number
    productName: number
    productImage: number
    location: number
    timestamp: number
    shop: number
    _all: number
  }


  export type AddToCartTrackerMinAggregateInputType = {
    id?: true
    tryOnId?: true
    productUrl?: true
    productName?: true
    productImage?: true
    location?: true
    timestamp?: true
    shop?: true
  }

  export type AddToCartTrackerMaxAggregateInputType = {
    id?: true
    tryOnId?: true
    productUrl?: true
    productName?: true
    productImage?: true
    location?: true
    timestamp?: true
    shop?: true
  }

  export type AddToCartTrackerCountAggregateInputType = {
    id?: true
    tryOnId?: true
    productUrl?: true
    productName?: true
    productImage?: true
    location?: true
    timestamp?: true
    shop?: true
    _all?: true
  }

  export type AddToCartTrackerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AddToCartTracker to aggregate.
     */
    where?: AddToCartTrackerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AddToCartTrackers to fetch.
     */
    orderBy?: AddToCartTrackerOrderByWithRelationInput | AddToCartTrackerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AddToCartTrackerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AddToCartTrackers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AddToCartTrackers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AddToCartTrackers
    **/
    _count?: true | AddToCartTrackerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AddToCartTrackerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AddToCartTrackerMaxAggregateInputType
  }

  export type GetAddToCartTrackerAggregateType<T extends AddToCartTrackerAggregateArgs> = {
        [P in keyof T & keyof AggregateAddToCartTracker]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAddToCartTracker[P]>
      : GetScalarType<T[P], AggregateAddToCartTracker[P]>
  }




  export type AddToCartTrackerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AddToCartTrackerWhereInput
    orderBy?: AddToCartTrackerOrderByWithAggregationInput | AddToCartTrackerOrderByWithAggregationInput[]
    by: AddToCartTrackerScalarFieldEnum[] | AddToCartTrackerScalarFieldEnum
    having?: AddToCartTrackerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AddToCartTrackerCountAggregateInputType | true
    _min?: AddToCartTrackerMinAggregateInputType
    _max?: AddToCartTrackerMaxAggregateInputType
  }

  export type AddToCartTrackerGroupByOutputType = {
    id: string
    tryOnId: string
    productUrl: string
    productName: string
    productImage: string
    location: string | null
    timestamp: Date
    shop: string
    _count: AddToCartTrackerCountAggregateOutputType | null
    _min: AddToCartTrackerMinAggregateOutputType | null
    _max: AddToCartTrackerMaxAggregateOutputType | null
  }

  type GetAddToCartTrackerGroupByPayload<T extends AddToCartTrackerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AddToCartTrackerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AddToCartTrackerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AddToCartTrackerGroupByOutputType[P]>
            : GetScalarType<T[P], AddToCartTrackerGroupByOutputType[P]>
        }
      >
    >


  export type AddToCartTrackerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tryOnId?: boolean
    productUrl?: boolean
    productName?: boolean
    productImage?: boolean
    location?: boolean
    timestamp?: boolean
    shop?: boolean
    TryOnTracker?: boolean | TryOnTrackerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["addToCartTracker"]>

  export type AddToCartTrackerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tryOnId?: boolean
    productUrl?: boolean
    productName?: boolean
    productImage?: boolean
    location?: boolean
    timestamp?: boolean
    shop?: boolean
    TryOnTracker?: boolean | TryOnTrackerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["addToCartTracker"]>

  export type AddToCartTrackerSelectScalar = {
    id?: boolean
    tryOnId?: boolean
    productUrl?: boolean
    productName?: boolean
    productImage?: boolean
    location?: boolean
    timestamp?: boolean
    shop?: boolean
  }

  export type AddToCartTrackerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    TryOnTracker?: boolean | TryOnTrackerDefaultArgs<ExtArgs>
  }
  export type AddToCartTrackerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    TryOnTracker?: boolean | TryOnTrackerDefaultArgs<ExtArgs>
  }

  export type $AddToCartTrackerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AddToCartTracker"
    objects: {
      TryOnTracker: Prisma.$TryOnTrackerPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tryOnId: string
      productUrl: string
      productName: string
      productImage: string
      location: string | null
      timestamp: Date
      shop: string
    }, ExtArgs["result"]["addToCartTracker"]>
    composites: {}
  }

  type AddToCartTrackerGetPayload<S extends boolean | null | undefined | AddToCartTrackerDefaultArgs> = $Result.GetResult<Prisma.$AddToCartTrackerPayload, S>

  type AddToCartTrackerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AddToCartTrackerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AddToCartTrackerCountAggregateInputType | true
    }

  export interface AddToCartTrackerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AddToCartTracker'], meta: { name: 'AddToCartTracker' } }
    /**
     * Find zero or one AddToCartTracker that matches the filter.
     * @param {AddToCartTrackerFindUniqueArgs} args - Arguments to find a AddToCartTracker
     * @example
     * // Get one AddToCartTracker
     * const addToCartTracker = await prisma.addToCartTracker.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AddToCartTrackerFindUniqueArgs>(args: SelectSubset<T, AddToCartTrackerFindUniqueArgs<ExtArgs>>): Prisma__AddToCartTrackerClient<$Result.GetResult<Prisma.$AddToCartTrackerPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AddToCartTracker that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AddToCartTrackerFindUniqueOrThrowArgs} args - Arguments to find a AddToCartTracker
     * @example
     * // Get one AddToCartTracker
     * const addToCartTracker = await prisma.addToCartTracker.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AddToCartTrackerFindUniqueOrThrowArgs>(args: SelectSubset<T, AddToCartTrackerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AddToCartTrackerClient<$Result.GetResult<Prisma.$AddToCartTrackerPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AddToCartTracker that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddToCartTrackerFindFirstArgs} args - Arguments to find a AddToCartTracker
     * @example
     * // Get one AddToCartTracker
     * const addToCartTracker = await prisma.addToCartTracker.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AddToCartTrackerFindFirstArgs>(args?: SelectSubset<T, AddToCartTrackerFindFirstArgs<ExtArgs>>): Prisma__AddToCartTrackerClient<$Result.GetResult<Prisma.$AddToCartTrackerPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AddToCartTracker that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddToCartTrackerFindFirstOrThrowArgs} args - Arguments to find a AddToCartTracker
     * @example
     * // Get one AddToCartTracker
     * const addToCartTracker = await prisma.addToCartTracker.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AddToCartTrackerFindFirstOrThrowArgs>(args?: SelectSubset<T, AddToCartTrackerFindFirstOrThrowArgs<ExtArgs>>): Prisma__AddToCartTrackerClient<$Result.GetResult<Prisma.$AddToCartTrackerPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AddToCartTrackers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddToCartTrackerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AddToCartTrackers
     * const addToCartTrackers = await prisma.addToCartTracker.findMany()
     * 
     * // Get first 10 AddToCartTrackers
     * const addToCartTrackers = await prisma.addToCartTracker.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const addToCartTrackerWithIdOnly = await prisma.addToCartTracker.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AddToCartTrackerFindManyArgs>(args?: SelectSubset<T, AddToCartTrackerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AddToCartTrackerPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AddToCartTracker.
     * @param {AddToCartTrackerCreateArgs} args - Arguments to create a AddToCartTracker.
     * @example
     * // Create one AddToCartTracker
     * const AddToCartTracker = await prisma.addToCartTracker.create({
     *   data: {
     *     // ... data to create a AddToCartTracker
     *   }
     * })
     * 
     */
    create<T extends AddToCartTrackerCreateArgs>(args: SelectSubset<T, AddToCartTrackerCreateArgs<ExtArgs>>): Prisma__AddToCartTrackerClient<$Result.GetResult<Prisma.$AddToCartTrackerPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AddToCartTrackers.
     * @param {AddToCartTrackerCreateManyArgs} args - Arguments to create many AddToCartTrackers.
     * @example
     * // Create many AddToCartTrackers
     * const addToCartTracker = await prisma.addToCartTracker.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AddToCartTrackerCreateManyArgs>(args?: SelectSubset<T, AddToCartTrackerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AddToCartTrackers and returns the data saved in the database.
     * @param {AddToCartTrackerCreateManyAndReturnArgs} args - Arguments to create many AddToCartTrackers.
     * @example
     * // Create many AddToCartTrackers
     * const addToCartTracker = await prisma.addToCartTracker.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AddToCartTrackers and only return the `id`
     * const addToCartTrackerWithIdOnly = await prisma.addToCartTracker.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AddToCartTrackerCreateManyAndReturnArgs>(args?: SelectSubset<T, AddToCartTrackerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AddToCartTrackerPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AddToCartTracker.
     * @param {AddToCartTrackerDeleteArgs} args - Arguments to delete one AddToCartTracker.
     * @example
     * // Delete one AddToCartTracker
     * const AddToCartTracker = await prisma.addToCartTracker.delete({
     *   where: {
     *     // ... filter to delete one AddToCartTracker
     *   }
     * })
     * 
     */
    delete<T extends AddToCartTrackerDeleteArgs>(args: SelectSubset<T, AddToCartTrackerDeleteArgs<ExtArgs>>): Prisma__AddToCartTrackerClient<$Result.GetResult<Prisma.$AddToCartTrackerPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AddToCartTracker.
     * @param {AddToCartTrackerUpdateArgs} args - Arguments to update one AddToCartTracker.
     * @example
     * // Update one AddToCartTracker
     * const addToCartTracker = await prisma.addToCartTracker.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AddToCartTrackerUpdateArgs>(args: SelectSubset<T, AddToCartTrackerUpdateArgs<ExtArgs>>): Prisma__AddToCartTrackerClient<$Result.GetResult<Prisma.$AddToCartTrackerPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AddToCartTrackers.
     * @param {AddToCartTrackerDeleteManyArgs} args - Arguments to filter AddToCartTrackers to delete.
     * @example
     * // Delete a few AddToCartTrackers
     * const { count } = await prisma.addToCartTracker.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AddToCartTrackerDeleteManyArgs>(args?: SelectSubset<T, AddToCartTrackerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AddToCartTrackers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddToCartTrackerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AddToCartTrackers
     * const addToCartTracker = await prisma.addToCartTracker.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AddToCartTrackerUpdateManyArgs>(args: SelectSubset<T, AddToCartTrackerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AddToCartTracker.
     * @param {AddToCartTrackerUpsertArgs} args - Arguments to update or create a AddToCartTracker.
     * @example
     * // Update or create a AddToCartTracker
     * const addToCartTracker = await prisma.addToCartTracker.upsert({
     *   create: {
     *     // ... data to create a AddToCartTracker
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AddToCartTracker we want to update
     *   }
     * })
     */
    upsert<T extends AddToCartTrackerUpsertArgs>(args: SelectSubset<T, AddToCartTrackerUpsertArgs<ExtArgs>>): Prisma__AddToCartTrackerClient<$Result.GetResult<Prisma.$AddToCartTrackerPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AddToCartTrackers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddToCartTrackerCountArgs} args - Arguments to filter AddToCartTrackers to count.
     * @example
     * // Count the number of AddToCartTrackers
     * const count = await prisma.addToCartTracker.count({
     *   where: {
     *     // ... the filter for the AddToCartTrackers we want to count
     *   }
     * })
    **/
    count<T extends AddToCartTrackerCountArgs>(
      args?: Subset<T, AddToCartTrackerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AddToCartTrackerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AddToCartTracker.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddToCartTrackerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AddToCartTrackerAggregateArgs>(args: Subset<T, AddToCartTrackerAggregateArgs>): Prisma.PrismaPromise<GetAddToCartTrackerAggregateType<T>>

    /**
     * Group by AddToCartTracker.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddToCartTrackerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AddToCartTrackerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AddToCartTrackerGroupByArgs['orderBy'] }
        : { orderBy?: AddToCartTrackerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AddToCartTrackerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAddToCartTrackerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AddToCartTracker model
   */
  readonly fields: AddToCartTrackerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AddToCartTracker.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AddToCartTrackerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    TryOnTracker<T extends TryOnTrackerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TryOnTrackerDefaultArgs<ExtArgs>>): Prisma__TryOnTrackerClient<$Result.GetResult<Prisma.$TryOnTrackerPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AddToCartTracker model
   */ 
  interface AddToCartTrackerFieldRefs {
    readonly id: FieldRef<"AddToCartTracker", 'String'>
    readonly tryOnId: FieldRef<"AddToCartTracker", 'String'>
    readonly productUrl: FieldRef<"AddToCartTracker", 'String'>
    readonly productName: FieldRef<"AddToCartTracker", 'String'>
    readonly productImage: FieldRef<"AddToCartTracker", 'String'>
    readonly location: FieldRef<"AddToCartTracker", 'String'>
    readonly timestamp: FieldRef<"AddToCartTracker", 'DateTime'>
    readonly shop: FieldRef<"AddToCartTracker", 'String'>
  }
    

  // Custom InputTypes
  /**
   * AddToCartTracker findUnique
   */
  export type AddToCartTrackerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AddToCartTracker
     */
    select?: AddToCartTrackerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddToCartTrackerInclude<ExtArgs> | null
    /**
     * Filter, which AddToCartTracker to fetch.
     */
    where: AddToCartTrackerWhereUniqueInput
  }

  /**
   * AddToCartTracker findUniqueOrThrow
   */
  export type AddToCartTrackerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AddToCartTracker
     */
    select?: AddToCartTrackerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddToCartTrackerInclude<ExtArgs> | null
    /**
     * Filter, which AddToCartTracker to fetch.
     */
    where: AddToCartTrackerWhereUniqueInput
  }

  /**
   * AddToCartTracker findFirst
   */
  export type AddToCartTrackerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AddToCartTracker
     */
    select?: AddToCartTrackerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddToCartTrackerInclude<ExtArgs> | null
    /**
     * Filter, which AddToCartTracker to fetch.
     */
    where?: AddToCartTrackerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AddToCartTrackers to fetch.
     */
    orderBy?: AddToCartTrackerOrderByWithRelationInput | AddToCartTrackerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AddToCartTrackers.
     */
    cursor?: AddToCartTrackerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AddToCartTrackers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AddToCartTrackers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AddToCartTrackers.
     */
    distinct?: AddToCartTrackerScalarFieldEnum | AddToCartTrackerScalarFieldEnum[]
  }

  /**
   * AddToCartTracker findFirstOrThrow
   */
  export type AddToCartTrackerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AddToCartTracker
     */
    select?: AddToCartTrackerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddToCartTrackerInclude<ExtArgs> | null
    /**
     * Filter, which AddToCartTracker to fetch.
     */
    where?: AddToCartTrackerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AddToCartTrackers to fetch.
     */
    orderBy?: AddToCartTrackerOrderByWithRelationInput | AddToCartTrackerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AddToCartTrackers.
     */
    cursor?: AddToCartTrackerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AddToCartTrackers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AddToCartTrackers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AddToCartTrackers.
     */
    distinct?: AddToCartTrackerScalarFieldEnum | AddToCartTrackerScalarFieldEnum[]
  }

  /**
   * AddToCartTracker findMany
   */
  export type AddToCartTrackerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AddToCartTracker
     */
    select?: AddToCartTrackerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddToCartTrackerInclude<ExtArgs> | null
    /**
     * Filter, which AddToCartTrackers to fetch.
     */
    where?: AddToCartTrackerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AddToCartTrackers to fetch.
     */
    orderBy?: AddToCartTrackerOrderByWithRelationInput | AddToCartTrackerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AddToCartTrackers.
     */
    cursor?: AddToCartTrackerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AddToCartTrackers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AddToCartTrackers.
     */
    skip?: number
    distinct?: AddToCartTrackerScalarFieldEnum | AddToCartTrackerScalarFieldEnum[]
  }

  /**
   * AddToCartTracker create
   */
  export type AddToCartTrackerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AddToCartTracker
     */
    select?: AddToCartTrackerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddToCartTrackerInclude<ExtArgs> | null
    /**
     * The data needed to create a AddToCartTracker.
     */
    data: XOR<AddToCartTrackerCreateInput, AddToCartTrackerUncheckedCreateInput>
  }

  /**
   * AddToCartTracker createMany
   */
  export type AddToCartTrackerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AddToCartTrackers.
     */
    data: AddToCartTrackerCreateManyInput | AddToCartTrackerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AddToCartTracker createManyAndReturn
   */
  export type AddToCartTrackerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AddToCartTracker
     */
    select?: AddToCartTrackerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AddToCartTrackers.
     */
    data: AddToCartTrackerCreateManyInput | AddToCartTrackerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddToCartTrackerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AddToCartTracker update
   */
  export type AddToCartTrackerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AddToCartTracker
     */
    select?: AddToCartTrackerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddToCartTrackerInclude<ExtArgs> | null
    /**
     * The data needed to update a AddToCartTracker.
     */
    data: XOR<AddToCartTrackerUpdateInput, AddToCartTrackerUncheckedUpdateInput>
    /**
     * Choose, which AddToCartTracker to update.
     */
    where: AddToCartTrackerWhereUniqueInput
  }

  /**
   * AddToCartTracker updateMany
   */
  export type AddToCartTrackerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AddToCartTrackers.
     */
    data: XOR<AddToCartTrackerUpdateManyMutationInput, AddToCartTrackerUncheckedUpdateManyInput>
    /**
     * Filter which AddToCartTrackers to update
     */
    where?: AddToCartTrackerWhereInput
  }

  /**
   * AddToCartTracker upsert
   */
  export type AddToCartTrackerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AddToCartTracker
     */
    select?: AddToCartTrackerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddToCartTrackerInclude<ExtArgs> | null
    /**
     * The filter to search for the AddToCartTracker to update in case it exists.
     */
    where: AddToCartTrackerWhereUniqueInput
    /**
     * In case the AddToCartTracker found by the `where` argument doesn't exist, create a new AddToCartTracker with this data.
     */
    create: XOR<AddToCartTrackerCreateInput, AddToCartTrackerUncheckedCreateInput>
    /**
     * In case the AddToCartTracker was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AddToCartTrackerUpdateInput, AddToCartTrackerUncheckedUpdateInput>
  }

  /**
   * AddToCartTracker delete
   */
  export type AddToCartTrackerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AddToCartTracker
     */
    select?: AddToCartTrackerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddToCartTrackerInclude<ExtArgs> | null
    /**
     * Filter which AddToCartTracker to delete.
     */
    where: AddToCartTrackerWhereUniqueInput
  }

  /**
   * AddToCartTracker deleteMany
   */
  export type AddToCartTrackerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AddToCartTrackers to delete
     */
    where?: AddToCartTrackerWhereInput
  }

  /**
   * AddToCartTracker without action
   */
  export type AddToCartTrackerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AddToCartTracker
     */
    select?: AddToCartTrackerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddToCartTrackerInclude<ExtArgs> | null
  }


  /**
   * Model CreditUsage
   */

  export type AggregateCreditUsage = {
    _count: CreditUsageCountAggregateOutputType | null
    _avg: CreditUsageAvgAggregateOutputType | null
    _sum: CreditUsageSumAggregateOutputType | null
    _min: CreditUsageMinAggregateOutputType | null
    _max: CreditUsageMaxAggregateOutputType | null
  }

  export type CreditUsageAvgAggregateOutputType = {
    totalCredits: number | null
    usedCredits: number | null
  }

  export type CreditUsageSumAggregateOutputType = {
    totalCredits: number | null
    usedCredits: number | null
  }

  export type CreditUsageMinAggregateOutputType = {
    id: string | null
    shop: string | null
    totalCredits: number | null
    usedCredits: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CreditUsageMaxAggregateOutputType = {
    id: string | null
    shop: string | null
    totalCredits: number | null
    usedCredits: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CreditUsageCountAggregateOutputType = {
    id: number
    shop: number
    totalCredits: number
    usedCredits: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CreditUsageAvgAggregateInputType = {
    totalCredits?: true
    usedCredits?: true
  }

  export type CreditUsageSumAggregateInputType = {
    totalCredits?: true
    usedCredits?: true
  }

  export type CreditUsageMinAggregateInputType = {
    id?: true
    shop?: true
    totalCredits?: true
    usedCredits?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CreditUsageMaxAggregateInputType = {
    id?: true
    shop?: true
    totalCredits?: true
    usedCredits?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CreditUsageCountAggregateInputType = {
    id?: true
    shop?: true
    totalCredits?: true
    usedCredits?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CreditUsageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CreditUsage to aggregate.
     */
    where?: CreditUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CreditUsages to fetch.
     */
    orderBy?: CreditUsageOrderByWithRelationInput | CreditUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CreditUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CreditUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CreditUsages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CreditUsages
    **/
    _count?: true | CreditUsageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CreditUsageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CreditUsageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CreditUsageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CreditUsageMaxAggregateInputType
  }

  export type GetCreditUsageAggregateType<T extends CreditUsageAggregateArgs> = {
        [P in keyof T & keyof AggregateCreditUsage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCreditUsage[P]>
      : GetScalarType<T[P], AggregateCreditUsage[P]>
  }




  export type CreditUsageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CreditUsageWhereInput
    orderBy?: CreditUsageOrderByWithAggregationInput | CreditUsageOrderByWithAggregationInput[]
    by: CreditUsageScalarFieldEnum[] | CreditUsageScalarFieldEnum
    having?: CreditUsageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CreditUsageCountAggregateInputType | true
    _avg?: CreditUsageAvgAggregateInputType
    _sum?: CreditUsageSumAggregateInputType
    _min?: CreditUsageMinAggregateInputType
    _max?: CreditUsageMaxAggregateInputType
  }

  export type CreditUsageGroupByOutputType = {
    id: string
    shop: string
    totalCredits: number
    usedCredits: number
    createdAt: Date
    updatedAt: Date
    _count: CreditUsageCountAggregateOutputType | null
    _avg: CreditUsageAvgAggregateOutputType | null
    _sum: CreditUsageSumAggregateOutputType | null
    _min: CreditUsageMinAggregateOutputType | null
    _max: CreditUsageMaxAggregateOutputType | null
  }

  type GetCreditUsageGroupByPayload<T extends CreditUsageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CreditUsageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CreditUsageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CreditUsageGroupByOutputType[P]>
            : GetScalarType<T[P], CreditUsageGroupByOutputType[P]>
        }
      >
    >


  export type CreditUsageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shop?: boolean
    totalCredits?: boolean
    usedCredits?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ShopSubscription?: boolean | ShopSubscriptionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["creditUsage"]>

  export type CreditUsageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shop?: boolean
    totalCredits?: boolean
    usedCredits?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ShopSubscription?: boolean | ShopSubscriptionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["creditUsage"]>

  export type CreditUsageSelectScalar = {
    id?: boolean
    shop?: boolean
    totalCredits?: boolean
    usedCredits?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CreditUsageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ShopSubscription?: boolean | ShopSubscriptionDefaultArgs<ExtArgs>
  }
  export type CreditUsageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ShopSubscription?: boolean | ShopSubscriptionDefaultArgs<ExtArgs>
  }

  export type $CreditUsagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CreditUsage"
    objects: {
      ShopSubscription: Prisma.$ShopSubscriptionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      shop: string
      totalCredits: number
      usedCredits: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["creditUsage"]>
    composites: {}
  }

  type CreditUsageGetPayload<S extends boolean | null | undefined | CreditUsageDefaultArgs> = $Result.GetResult<Prisma.$CreditUsagePayload, S>

  type CreditUsageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CreditUsageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CreditUsageCountAggregateInputType | true
    }

  export interface CreditUsageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CreditUsage'], meta: { name: 'CreditUsage' } }
    /**
     * Find zero or one CreditUsage that matches the filter.
     * @param {CreditUsageFindUniqueArgs} args - Arguments to find a CreditUsage
     * @example
     * // Get one CreditUsage
     * const creditUsage = await prisma.creditUsage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CreditUsageFindUniqueArgs>(args: SelectSubset<T, CreditUsageFindUniqueArgs<ExtArgs>>): Prisma__CreditUsageClient<$Result.GetResult<Prisma.$CreditUsagePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CreditUsage that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CreditUsageFindUniqueOrThrowArgs} args - Arguments to find a CreditUsage
     * @example
     * // Get one CreditUsage
     * const creditUsage = await prisma.creditUsage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CreditUsageFindUniqueOrThrowArgs>(args: SelectSubset<T, CreditUsageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CreditUsageClient<$Result.GetResult<Prisma.$CreditUsagePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CreditUsage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreditUsageFindFirstArgs} args - Arguments to find a CreditUsage
     * @example
     * // Get one CreditUsage
     * const creditUsage = await prisma.creditUsage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CreditUsageFindFirstArgs>(args?: SelectSubset<T, CreditUsageFindFirstArgs<ExtArgs>>): Prisma__CreditUsageClient<$Result.GetResult<Prisma.$CreditUsagePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CreditUsage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreditUsageFindFirstOrThrowArgs} args - Arguments to find a CreditUsage
     * @example
     * // Get one CreditUsage
     * const creditUsage = await prisma.creditUsage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CreditUsageFindFirstOrThrowArgs>(args?: SelectSubset<T, CreditUsageFindFirstOrThrowArgs<ExtArgs>>): Prisma__CreditUsageClient<$Result.GetResult<Prisma.$CreditUsagePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CreditUsages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreditUsageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CreditUsages
     * const creditUsages = await prisma.creditUsage.findMany()
     * 
     * // Get first 10 CreditUsages
     * const creditUsages = await prisma.creditUsage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const creditUsageWithIdOnly = await prisma.creditUsage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CreditUsageFindManyArgs>(args?: SelectSubset<T, CreditUsageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CreditUsagePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CreditUsage.
     * @param {CreditUsageCreateArgs} args - Arguments to create a CreditUsage.
     * @example
     * // Create one CreditUsage
     * const CreditUsage = await prisma.creditUsage.create({
     *   data: {
     *     // ... data to create a CreditUsage
     *   }
     * })
     * 
     */
    create<T extends CreditUsageCreateArgs>(args: SelectSubset<T, CreditUsageCreateArgs<ExtArgs>>): Prisma__CreditUsageClient<$Result.GetResult<Prisma.$CreditUsagePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CreditUsages.
     * @param {CreditUsageCreateManyArgs} args - Arguments to create many CreditUsages.
     * @example
     * // Create many CreditUsages
     * const creditUsage = await prisma.creditUsage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CreditUsageCreateManyArgs>(args?: SelectSubset<T, CreditUsageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CreditUsages and returns the data saved in the database.
     * @param {CreditUsageCreateManyAndReturnArgs} args - Arguments to create many CreditUsages.
     * @example
     * // Create many CreditUsages
     * const creditUsage = await prisma.creditUsage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CreditUsages and only return the `id`
     * const creditUsageWithIdOnly = await prisma.creditUsage.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CreditUsageCreateManyAndReturnArgs>(args?: SelectSubset<T, CreditUsageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CreditUsagePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CreditUsage.
     * @param {CreditUsageDeleteArgs} args - Arguments to delete one CreditUsage.
     * @example
     * // Delete one CreditUsage
     * const CreditUsage = await prisma.creditUsage.delete({
     *   where: {
     *     // ... filter to delete one CreditUsage
     *   }
     * })
     * 
     */
    delete<T extends CreditUsageDeleteArgs>(args: SelectSubset<T, CreditUsageDeleteArgs<ExtArgs>>): Prisma__CreditUsageClient<$Result.GetResult<Prisma.$CreditUsagePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CreditUsage.
     * @param {CreditUsageUpdateArgs} args - Arguments to update one CreditUsage.
     * @example
     * // Update one CreditUsage
     * const creditUsage = await prisma.creditUsage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CreditUsageUpdateArgs>(args: SelectSubset<T, CreditUsageUpdateArgs<ExtArgs>>): Prisma__CreditUsageClient<$Result.GetResult<Prisma.$CreditUsagePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CreditUsages.
     * @param {CreditUsageDeleteManyArgs} args - Arguments to filter CreditUsages to delete.
     * @example
     * // Delete a few CreditUsages
     * const { count } = await prisma.creditUsage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CreditUsageDeleteManyArgs>(args?: SelectSubset<T, CreditUsageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CreditUsages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreditUsageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CreditUsages
     * const creditUsage = await prisma.creditUsage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CreditUsageUpdateManyArgs>(args: SelectSubset<T, CreditUsageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CreditUsage.
     * @param {CreditUsageUpsertArgs} args - Arguments to update or create a CreditUsage.
     * @example
     * // Update or create a CreditUsage
     * const creditUsage = await prisma.creditUsage.upsert({
     *   create: {
     *     // ... data to create a CreditUsage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CreditUsage we want to update
     *   }
     * })
     */
    upsert<T extends CreditUsageUpsertArgs>(args: SelectSubset<T, CreditUsageUpsertArgs<ExtArgs>>): Prisma__CreditUsageClient<$Result.GetResult<Prisma.$CreditUsagePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CreditUsages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreditUsageCountArgs} args - Arguments to filter CreditUsages to count.
     * @example
     * // Count the number of CreditUsages
     * const count = await prisma.creditUsage.count({
     *   where: {
     *     // ... the filter for the CreditUsages we want to count
     *   }
     * })
    **/
    count<T extends CreditUsageCountArgs>(
      args?: Subset<T, CreditUsageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CreditUsageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CreditUsage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreditUsageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CreditUsageAggregateArgs>(args: Subset<T, CreditUsageAggregateArgs>): Prisma.PrismaPromise<GetCreditUsageAggregateType<T>>

    /**
     * Group by CreditUsage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreditUsageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CreditUsageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CreditUsageGroupByArgs['orderBy'] }
        : { orderBy?: CreditUsageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CreditUsageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCreditUsageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CreditUsage model
   */
  readonly fields: CreditUsageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CreditUsage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CreditUsageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ShopSubscription<T extends ShopSubscriptionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ShopSubscriptionDefaultArgs<ExtArgs>>): Prisma__ShopSubscriptionClient<$Result.GetResult<Prisma.$ShopSubscriptionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CreditUsage model
   */ 
  interface CreditUsageFieldRefs {
    readonly id: FieldRef<"CreditUsage", 'String'>
    readonly shop: FieldRef<"CreditUsage", 'String'>
    readonly totalCredits: FieldRef<"CreditUsage", 'Int'>
    readonly usedCredits: FieldRef<"CreditUsage", 'Int'>
    readonly createdAt: FieldRef<"CreditUsage", 'DateTime'>
    readonly updatedAt: FieldRef<"CreditUsage", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CreditUsage findUnique
   */
  export type CreditUsageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditUsage
     */
    select?: CreditUsageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditUsageInclude<ExtArgs> | null
    /**
     * Filter, which CreditUsage to fetch.
     */
    where: CreditUsageWhereUniqueInput
  }

  /**
   * CreditUsage findUniqueOrThrow
   */
  export type CreditUsageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditUsage
     */
    select?: CreditUsageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditUsageInclude<ExtArgs> | null
    /**
     * Filter, which CreditUsage to fetch.
     */
    where: CreditUsageWhereUniqueInput
  }

  /**
   * CreditUsage findFirst
   */
  export type CreditUsageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditUsage
     */
    select?: CreditUsageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditUsageInclude<ExtArgs> | null
    /**
     * Filter, which CreditUsage to fetch.
     */
    where?: CreditUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CreditUsages to fetch.
     */
    orderBy?: CreditUsageOrderByWithRelationInput | CreditUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CreditUsages.
     */
    cursor?: CreditUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CreditUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CreditUsages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CreditUsages.
     */
    distinct?: CreditUsageScalarFieldEnum | CreditUsageScalarFieldEnum[]
  }

  /**
   * CreditUsage findFirstOrThrow
   */
  export type CreditUsageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditUsage
     */
    select?: CreditUsageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditUsageInclude<ExtArgs> | null
    /**
     * Filter, which CreditUsage to fetch.
     */
    where?: CreditUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CreditUsages to fetch.
     */
    orderBy?: CreditUsageOrderByWithRelationInput | CreditUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CreditUsages.
     */
    cursor?: CreditUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CreditUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CreditUsages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CreditUsages.
     */
    distinct?: CreditUsageScalarFieldEnum | CreditUsageScalarFieldEnum[]
  }

  /**
   * CreditUsage findMany
   */
  export type CreditUsageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditUsage
     */
    select?: CreditUsageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditUsageInclude<ExtArgs> | null
    /**
     * Filter, which CreditUsages to fetch.
     */
    where?: CreditUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CreditUsages to fetch.
     */
    orderBy?: CreditUsageOrderByWithRelationInput | CreditUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CreditUsages.
     */
    cursor?: CreditUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CreditUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CreditUsages.
     */
    skip?: number
    distinct?: CreditUsageScalarFieldEnum | CreditUsageScalarFieldEnum[]
  }

  /**
   * CreditUsage create
   */
  export type CreditUsageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditUsage
     */
    select?: CreditUsageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditUsageInclude<ExtArgs> | null
    /**
     * The data needed to create a CreditUsage.
     */
    data: XOR<CreditUsageCreateInput, CreditUsageUncheckedCreateInput>
  }

  /**
   * CreditUsage createMany
   */
  export type CreditUsageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CreditUsages.
     */
    data: CreditUsageCreateManyInput | CreditUsageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CreditUsage createManyAndReturn
   */
  export type CreditUsageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditUsage
     */
    select?: CreditUsageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CreditUsages.
     */
    data: CreditUsageCreateManyInput | CreditUsageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditUsageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CreditUsage update
   */
  export type CreditUsageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditUsage
     */
    select?: CreditUsageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditUsageInclude<ExtArgs> | null
    /**
     * The data needed to update a CreditUsage.
     */
    data: XOR<CreditUsageUpdateInput, CreditUsageUncheckedUpdateInput>
    /**
     * Choose, which CreditUsage to update.
     */
    where: CreditUsageWhereUniqueInput
  }

  /**
   * CreditUsage updateMany
   */
  export type CreditUsageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CreditUsages.
     */
    data: XOR<CreditUsageUpdateManyMutationInput, CreditUsageUncheckedUpdateManyInput>
    /**
     * Filter which CreditUsages to update
     */
    where?: CreditUsageWhereInput
  }

  /**
   * CreditUsage upsert
   */
  export type CreditUsageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditUsage
     */
    select?: CreditUsageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditUsageInclude<ExtArgs> | null
    /**
     * The filter to search for the CreditUsage to update in case it exists.
     */
    where: CreditUsageWhereUniqueInput
    /**
     * In case the CreditUsage found by the `where` argument doesn't exist, create a new CreditUsage with this data.
     */
    create: XOR<CreditUsageCreateInput, CreditUsageUncheckedCreateInput>
    /**
     * In case the CreditUsage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CreditUsageUpdateInput, CreditUsageUncheckedUpdateInput>
  }

  /**
   * CreditUsage delete
   */
  export type CreditUsageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditUsage
     */
    select?: CreditUsageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditUsageInclude<ExtArgs> | null
    /**
     * Filter which CreditUsage to delete.
     */
    where: CreditUsageWhereUniqueInput
  }

  /**
   * CreditUsage deleteMany
   */
  export type CreditUsageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CreditUsages to delete
     */
    where?: CreditUsageWhereInput
  }

  /**
   * CreditUsage without action
   */
  export type CreditUsageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditUsage
     */
    select?: CreditUsageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditUsageInclude<ExtArgs> | null
  }


  /**
   * Model CustomerData
   */

  export type AggregateCustomerData = {
    _count: CustomerDataCountAggregateOutputType | null
    _min: CustomerDataMinAggregateOutputType | null
    _max: CustomerDataMaxAggregateOutputType | null
  }

  export type CustomerDataMinAggregateOutputType = {
    id: string | null
    shopDomain: string | null
    shopifyCustomerId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CustomerDataMaxAggregateOutputType = {
    id: string | null
    shopDomain: string | null
    shopifyCustomerId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CustomerDataCountAggregateOutputType = {
    id: number
    shopDomain: number
    shopifyCustomerId: number
    customerData: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CustomerDataMinAggregateInputType = {
    id?: true
    shopDomain?: true
    shopifyCustomerId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CustomerDataMaxAggregateInputType = {
    id?: true
    shopDomain?: true
    shopifyCustomerId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CustomerDataCountAggregateInputType = {
    id?: true
    shopDomain?: true
    shopifyCustomerId?: true
    customerData?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CustomerDataAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CustomerData to aggregate.
     */
    where?: CustomerDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerData to fetch.
     */
    orderBy?: CustomerDataOrderByWithRelationInput | CustomerDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CustomerDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CustomerData
    **/
    _count?: true | CustomerDataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomerDataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomerDataMaxAggregateInputType
  }

  export type GetCustomerDataAggregateType<T extends CustomerDataAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomerData]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomerData[P]>
      : GetScalarType<T[P], AggregateCustomerData[P]>
  }




  export type CustomerDataGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerDataWhereInput
    orderBy?: CustomerDataOrderByWithAggregationInput | CustomerDataOrderByWithAggregationInput[]
    by: CustomerDataScalarFieldEnum[] | CustomerDataScalarFieldEnum
    having?: CustomerDataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomerDataCountAggregateInputType | true
    _min?: CustomerDataMinAggregateInputType
    _max?: CustomerDataMaxAggregateInputType
  }

  export type CustomerDataGroupByOutputType = {
    id: string
    shopDomain: string
    shopifyCustomerId: string
    customerData: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: CustomerDataCountAggregateOutputType | null
    _min: CustomerDataMinAggregateOutputType | null
    _max: CustomerDataMaxAggregateOutputType | null
  }

  type GetCustomerDataGroupByPayload<T extends CustomerDataGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CustomerDataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomerDataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomerDataGroupByOutputType[P]>
            : GetScalarType<T[P], CustomerDataGroupByOutputType[P]>
        }
      >
    >


  export type CustomerDataSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shopDomain?: boolean
    shopifyCustomerId?: boolean
    customerData?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Shop?: boolean | ShopDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customerData"]>

  export type CustomerDataSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shopDomain?: boolean
    shopifyCustomerId?: boolean
    customerData?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Shop?: boolean | ShopDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customerData"]>

  export type CustomerDataSelectScalar = {
    id?: boolean
    shopDomain?: boolean
    shopifyCustomerId?: boolean
    customerData?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CustomerDataInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Shop?: boolean | ShopDefaultArgs<ExtArgs>
  }
  export type CustomerDataIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Shop?: boolean | ShopDefaultArgs<ExtArgs>
  }

  export type $CustomerDataPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CustomerData"
    objects: {
      Shop: Prisma.$ShopPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      shopDomain: string
      shopifyCustomerId: string
      customerData: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["customerData"]>
    composites: {}
  }

  type CustomerDataGetPayload<S extends boolean | null | undefined | CustomerDataDefaultArgs> = $Result.GetResult<Prisma.$CustomerDataPayload, S>

  type CustomerDataCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CustomerDataFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CustomerDataCountAggregateInputType | true
    }

  export interface CustomerDataDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CustomerData'], meta: { name: 'CustomerData' } }
    /**
     * Find zero or one CustomerData that matches the filter.
     * @param {CustomerDataFindUniqueArgs} args - Arguments to find a CustomerData
     * @example
     * // Get one CustomerData
     * const customerData = await prisma.customerData.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CustomerDataFindUniqueArgs>(args: SelectSubset<T, CustomerDataFindUniqueArgs<ExtArgs>>): Prisma__CustomerDataClient<$Result.GetResult<Prisma.$CustomerDataPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CustomerData that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CustomerDataFindUniqueOrThrowArgs} args - Arguments to find a CustomerData
     * @example
     * // Get one CustomerData
     * const customerData = await prisma.customerData.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CustomerDataFindUniqueOrThrowArgs>(args: SelectSubset<T, CustomerDataFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CustomerDataClient<$Result.GetResult<Prisma.$CustomerDataPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CustomerData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerDataFindFirstArgs} args - Arguments to find a CustomerData
     * @example
     * // Get one CustomerData
     * const customerData = await prisma.customerData.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CustomerDataFindFirstArgs>(args?: SelectSubset<T, CustomerDataFindFirstArgs<ExtArgs>>): Prisma__CustomerDataClient<$Result.GetResult<Prisma.$CustomerDataPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CustomerData that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerDataFindFirstOrThrowArgs} args - Arguments to find a CustomerData
     * @example
     * // Get one CustomerData
     * const customerData = await prisma.customerData.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CustomerDataFindFirstOrThrowArgs>(args?: SelectSubset<T, CustomerDataFindFirstOrThrowArgs<ExtArgs>>): Prisma__CustomerDataClient<$Result.GetResult<Prisma.$CustomerDataPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CustomerData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerDataFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CustomerData
     * const customerData = await prisma.customerData.findMany()
     * 
     * // Get first 10 CustomerData
     * const customerData = await prisma.customerData.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const customerDataWithIdOnly = await prisma.customerData.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CustomerDataFindManyArgs>(args?: SelectSubset<T, CustomerDataFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerDataPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CustomerData.
     * @param {CustomerDataCreateArgs} args - Arguments to create a CustomerData.
     * @example
     * // Create one CustomerData
     * const CustomerData = await prisma.customerData.create({
     *   data: {
     *     // ... data to create a CustomerData
     *   }
     * })
     * 
     */
    create<T extends CustomerDataCreateArgs>(args: SelectSubset<T, CustomerDataCreateArgs<ExtArgs>>): Prisma__CustomerDataClient<$Result.GetResult<Prisma.$CustomerDataPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CustomerData.
     * @param {CustomerDataCreateManyArgs} args - Arguments to create many CustomerData.
     * @example
     * // Create many CustomerData
     * const customerData = await prisma.customerData.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CustomerDataCreateManyArgs>(args?: SelectSubset<T, CustomerDataCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CustomerData and returns the data saved in the database.
     * @param {CustomerDataCreateManyAndReturnArgs} args - Arguments to create many CustomerData.
     * @example
     * // Create many CustomerData
     * const customerData = await prisma.customerData.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CustomerData and only return the `id`
     * const customerDataWithIdOnly = await prisma.customerData.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CustomerDataCreateManyAndReturnArgs>(args?: SelectSubset<T, CustomerDataCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerDataPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CustomerData.
     * @param {CustomerDataDeleteArgs} args - Arguments to delete one CustomerData.
     * @example
     * // Delete one CustomerData
     * const CustomerData = await prisma.customerData.delete({
     *   where: {
     *     // ... filter to delete one CustomerData
     *   }
     * })
     * 
     */
    delete<T extends CustomerDataDeleteArgs>(args: SelectSubset<T, CustomerDataDeleteArgs<ExtArgs>>): Prisma__CustomerDataClient<$Result.GetResult<Prisma.$CustomerDataPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CustomerData.
     * @param {CustomerDataUpdateArgs} args - Arguments to update one CustomerData.
     * @example
     * // Update one CustomerData
     * const customerData = await prisma.customerData.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CustomerDataUpdateArgs>(args: SelectSubset<T, CustomerDataUpdateArgs<ExtArgs>>): Prisma__CustomerDataClient<$Result.GetResult<Prisma.$CustomerDataPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CustomerData.
     * @param {CustomerDataDeleteManyArgs} args - Arguments to filter CustomerData to delete.
     * @example
     * // Delete a few CustomerData
     * const { count } = await prisma.customerData.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CustomerDataDeleteManyArgs>(args?: SelectSubset<T, CustomerDataDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CustomerData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerDataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CustomerData
     * const customerData = await prisma.customerData.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CustomerDataUpdateManyArgs>(args: SelectSubset<T, CustomerDataUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CustomerData.
     * @param {CustomerDataUpsertArgs} args - Arguments to update or create a CustomerData.
     * @example
     * // Update or create a CustomerData
     * const customerData = await prisma.customerData.upsert({
     *   create: {
     *     // ... data to create a CustomerData
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CustomerData we want to update
     *   }
     * })
     */
    upsert<T extends CustomerDataUpsertArgs>(args: SelectSubset<T, CustomerDataUpsertArgs<ExtArgs>>): Prisma__CustomerDataClient<$Result.GetResult<Prisma.$CustomerDataPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CustomerData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerDataCountArgs} args - Arguments to filter CustomerData to count.
     * @example
     * // Count the number of CustomerData
     * const count = await prisma.customerData.count({
     *   where: {
     *     // ... the filter for the CustomerData we want to count
     *   }
     * })
    **/
    count<T extends CustomerDataCountArgs>(
      args?: Subset<T, CustomerDataCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomerDataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CustomerData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerDataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomerDataAggregateArgs>(args: Subset<T, CustomerDataAggregateArgs>): Prisma.PrismaPromise<GetCustomerDataAggregateType<T>>

    /**
     * Group by CustomerData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerDataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomerDataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomerDataGroupByArgs['orderBy'] }
        : { orderBy?: CustomerDataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomerDataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerDataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CustomerData model
   */
  readonly fields: CustomerDataFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CustomerData.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CustomerDataClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Shop<T extends ShopDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ShopDefaultArgs<ExtArgs>>): Prisma__ShopClient<$Result.GetResult<Prisma.$ShopPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CustomerData model
   */ 
  interface CustomerDataFieldRefs {
    readonly id: FieldRef<"CustomerData", 'String'>
    readonly shopDomain: FieldRef<"CustomerData", 'String'>
    readonly shopifyCustomerId: FieldRef<"CustomerData", 'String'>
    readonly customerData: FieldRef<"CustomerData", 'Json'>
    readonly createdAt: FieldRef<"CustomerData", 'DateTime'>
    readonly updatedAt: FieldRef<"CustomerData", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CustomerData findUnique
   */
  export type CustomerDataFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerData
     */
    select?: CustomerDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerDataInclude<ExtArgs> | null
    /**
     * Filter, which CustomerData to fetch.
     */
    where: CustomerDataWhereUniqueInput
  }

  /**
   * CustomerData findUniqueOrThrow
   */
  export type CustomerDataFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerData
     */
    select?: CustomerDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerDataInclude<ExtArgs> | null
    /**
     * Filter, which CustomerData to fetch.
     */
    where: CustomerDataWhereUniqueInput
  }

  /**
   * CustomerData findFirst
   */
  export type CustomerDataFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerData
     */
    select?: CustomerDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerDataInclude<ExtArgs> | null
    /**
     * Filter, which CustomerData to fetch.
     */
    where?: CustomerDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerData to fetch.
     */
    orderBy?: CustomerDataOrderByWithRelationInput | CustomerDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CustomerData.
     */
    cursor?: CustomerDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CustomerData.
     */
    distinct?: CustomerDataScalarFieldEnum | CustomerDataScalarFieldEnum[]
  }

  /**
   * CustomerData findFirstOrThrow
   */
  export type CustomerDataFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerData
     */
    select?: CustomerDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerDataInclude<ExtArgs> | null
    /**
     * Filter, which CustomerData to fetch.
     */
    where?: CustomerDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerData to fetch.
     */
    orderBy?: CustomerDataOrderByWithRelationInput | CustomerDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CustomerData.
     */
    cursor?: CustomerDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CustomerData.
     */
    distinct?: CustomerDataScalarFieldEnum | CustomerDataScalarFieldEnum[]
  }

  /**
   * CustomerData findMany
   */
  export type CustomerDataFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerData
     */
    select?: CustomerDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerDataInclude<ExtArgs> | null
    /**
     * Filter, which CustomerData to fetch.
     */
    where?: CustomerDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerData to fetch.
     */
    orderBy?: CustomerDataOrderByWithRelationInput | CustomerDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CustomerData.
     */
    cursor?: CustomerDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerData.
     */
    skip?: number
    distinct?: CustomerDataScalarFieldEnum | CustomerDataScalarFieldEnum[]
  }

  /**
   * CustomerData create
   */
  export type CustomerDataCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerData
     */
    select?: CustomerDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerDataInclude<ExtArgs> | null
    /**
     * The data needed to create a CustomerData.
     */
    data: XOR<CustomerDataCreateInput, CustomerDataUncheckedCreateInput>
  }

  /**
   * CustomerData createMany
   */
  export type CustomerDataCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CustomerData.
     */
    data: CustomerDataCreateManyInput | CustomerDataCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CustomerData createManyAndReturn
   */
  export type CustomerDataCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerData
     */
    select?: CustomerDataSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CustomerData.
     */
    data: CustomerDataCreateManyInput | CustomerDataCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerDataIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CustomerData update
   */
  export type CustomerDataUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerData
     */
    select?: CustomerDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerDataInclude<ExtArgs> | null
    /**
     * The data needed to update a CustomerData.
     */
    data: XOR<CustomerDataUpdateInput, CustomerDataUncheckedUpdateInput>
    /**
     * Choose, which CustomerData to update.
     */
    where: CustomerDataWhereUniqueInput
  }

  /**
   * CustomerData updateMany
   */
  export type CustomerDataUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CustomerData.
     */
    data: XOR<CustomerDataUpdateManyMutationInput, CustomerDataUncheckedUpdateManyInput>
    /**
     * Filter which CustomerData to update
     */
    where?: CustomerDataWhereInput
  }

  /**
   * CustomerData upsert
   */
  export type CustomerDataUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerData
     */
    select?: CustomerDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerDataInclude<ExtArgs> | null
    /**
     * The filter to search for the CustomerData to update in case it exists.
     */
    where: CustomerDataWhereUniqueInput
    /**
     * In case the CustomerData found by the `where` argument doesn't exist, create a new CustomerData with this data.
     */
    create: XOR<CustomerDataCreateInput, CustomerDataUncheckedCreateInput>
    /**
     * In case the CustomerData was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CustomerDataUpdateInput, CustomerDataUncheckedUpdateInput>
  }

  /**
   * CustomerData delete
   */
  export type CustomerDataDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerData
     */
    select?: CustomerDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerDataInclude<ExtArgs> | null
    /**
     * Filter which CustomerData to delete.
     */
    where: CustomerDataWhereUniqueInput
  }

  /**
   * CustomerData deleteMany
   */
  export type CustomerDataDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CustomerData to delete
     */
    where?: CustomerDataWhereInput
  }

  /**
   * CustomerData without action
   */
  export type CustomerDataDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerData
     */
    select?: CustomerDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerDataInclude<ExtArgs> | null
  }


  /**
   * Model DataRequest
   */

  export type AggregateDataRequest = {
    _count: DataRequestCountAggregateOutputType | null
    _min: DataRequestMinAggregateOutputType | null
    _max: DataRequestMaxAggregateOutputType | null
  }

  export type DataRequestMinAggregateOutputType = {
    id: string | null
    requestId: string | null
    shopDomain: string | null
    shopifyCustomerId: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DataRequestMaxAggregateOutputType = {
    id: string | null
    requestId: string | null
    shopDomain: string | null
    shopifyCustomerId: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DataRequestCountAggregateOutputType = {
    id: number
    requestId: number
    shopDomain: number
    shopifyCustomerId: number
    requestData: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DataRequestMinAggregateInputType = {
    id?: true
    requestId?: true
    shopDomain?: true
    shopifyCustomerId?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DataRequestMaxAggregateInputType = {
    id?: true
    requestId?: true
    shopDomain?: true
    shopifyCustomerId?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DataRequestCountAggregateInputType = {
    id?: true
    requestId?: true
    shopDomain?: true
    shopifyCustomerId?: true
    requestData?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DataRequestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DataRequest to aggregate.
     */
    where?: DataRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DataRequests to fetch.
     */
    orderBy?: DataRequestOrderByWithRelationInput | DataRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DataRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DataRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DataRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DataRequests
    **/
    _count?: true | DataRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DataRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DataRequestMaxAggregateInputType
  }

  export type GetDataRequestAggregateType<T extends DataRequestAggregateArgs> = {
        [P in keyof T & keyof AggregateDataRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDataRequest[P]>
      : GetScalarType<T[P], AggregateDataRequest[P]>
  }




  export type DataRequestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DataRequestWhereInput
    orderBy?: DataRequestOrderByWithAggregationInput | DataRequestOrderByWithAggregationInput[]
    by: DataRequestScalarFieldEnum[] | DataRequestScalarFieldEnum
    having?: DataRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DataRequestCountAggregateInputType | true
    _min?: DataRequestMinAggregateInputType
    _max?: DataRequestMaxAggregateInputType
  }

  export type DataRequestGroupByOutputType = {
    id: string
    requestId: string
    shopDomain: string
    shopifyCustomerId: string
    requestData: JsonValue
    status: string
    createdAt: Date
    updatedAt: Date
    _count: DataRequestCountAggregateOutputType | null
    _min: DataRequestMinAggregateOutputType | null
    _max: DataRequestMaxAggregateOutputType | null
  }

  type GetDataRequestGroupByPayload<T extends DataRequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DataRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DataRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DataRequestGroupByOutputType[P]>
            : GetScalarType<T[P], DataRequestGroupByOutputType[P]>
        }
      >
    >


  export type DataRequestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requestId?: boolean
    shopDomain?: boolean
    shopifyCustomerId?: boolean
    requestData?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Shop?: boolean | ShopDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dataRequest"]>

  export type DataRequestSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requestId?: boolean
    shopDomain?: boolean
    shopifyCustomerId?: boolean
    requestData?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Shop?: boolean | ShopDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dataRequest"]>

  export type DataRequestSelectScalar = {
    id?: boolean
    requestId?: boolean
    shopDomain?: boolean
    shopifyCustomerId?: boolean
    requestData?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DataRequestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Shop?: boolean | ShopDefaultArgs<ExtArgs>
  }
  export type DataRequestIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Shop?: boolean | ShopDefaultArgs<ExtArgs>
  }

  export type $DataRequestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DataRequest"
    objects: {
      Shop: Prisma.$ShopPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      requestId: string
      shopDomain: string
      shopifyCustomerId: string
      requestData: Prisma.JsonValue
      status: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["dataRequest"]>
    composites: {}
  }

  type DataRequestGetPayload<S extends boolean | null | undefined | DataRequestDefaultArgs> = $Result.GetResult<Prisma.$DataRequestPayload, S>

  type DataRequestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DataRequestFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DataRequestCountAggregateInputType | true
    }

  export interface DataRequestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DataRequest'], meta: { name: 'DataRequest' } }
    /**
     * Find zero or one DataRequest that matches the filter.
     * @param {DataRequestFindUniqueArgs} args - Arguments to find a DataRequest
     * @example
     * // Get one DataRequest
     * const dataRequest = await prisma.dataRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DataRequestFindUniqueArgs>(args: SelectSubset<T, DataRequestFindUniqueArgs<ExtArgs>>): Prisma__DataRequestClient<$Result.GetResult<Prisma.$DataRequestPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DataRequest that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DataRequestFindUniqueOrThrowArgs} args - Arguments to find a DataRequest
     * @example
     * // Get one DataRequest
     * const dataRequest = await prisma.dataRequest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DataRequestFindUniqueOrThrowArgs>(args: SelectSubset<T, DataRequestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DataRequestClient<$Result.GetResult<Prisma.$DataRequestPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DataRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DataRequestFindFirstArgs} args - Arguments to find a DataRequest
     * @example
     * // Get one DataRequest
     * const dataRequest = await prisma.dataRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DataRequestFindFirstArgs>(args?: SelectSubset<T, DataRequestFindFirstArgs<ExtArgs>>): Prisma__DataRequestClient<$Result.GetResult<Prisma.$DataRequestPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DataRequest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DataRequestFindFirstOrThrowArgs} args - Arguments to find a DataRequest
     * @example
     * // Get one DataRequest
     * const dataRequest = await prisma.dataRequest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DataRequestFindFirstOrThrowArgs>(args?: SelectSubset<T, DataRequestFindFirstOrThrowArgs<ExtArgs>>): Prisma__DataRequestClient<$Result.GetResult<Prisma.$DataRequestPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DataRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DataRequestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DataRequests
     * const dataRequests = await prisma.dataRequest.findMany()
     * 
     * // Get first 10 DataRequests
     * const dataRequests = await prisma.dataRequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dataRequestWithIdOnly = await prisma.dataRequest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DataRequestFindManyArgs>(args?: SelectSubset<T, DataRequestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DataRequestPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DataRequest.
     * @param {DataRequestCreateArgs} args - Arguments to create a DataRequest.
     * @example
     * // Create one DataRequest
     * const DataRequest = await prisma.dataRequest.create({
     *   data: {
     *     // ... data to create a DataRequest
     *   }
     * })
     * 
     */
    create<T extends DataRequestCreateArgs>(args: SelectSubset<T, DataRequestCreateArgs<ExtArgs>>): Prisma__DataRequestClient<$Result.GetResult<Prisma.$DataRequestPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DataRequests.
     * @param {DataRequestCreateManyArgs} args - Arguments to create many DataRequests.
     * @example
     * // Create many DataRequests
     * const dataRequest = await prisma.dataRequest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DataRequestCreateManyArgs>(args?: SelectSubset<T, DataRequestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DataRequests and returns the data saved in the database.
     * @param {DataRequestCreateManyAndReturnArgs} args - Arguments to create many DataRequests.
     * @example
     * // Create many DataRequests
     * const dataRequest = await prisma.dataRequest.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DataRequests and only return the `id`
     * const dataRequestWithIdOnly = await prisma.dataRequest.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DataRequestCreateManyAndReturnArgs>(args?: SelectSubset<T, DataRequestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DataRequestPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a DataRequest.
     * @param {DataRequestDeleteArgs} args - Arguments to delete one DataRequest.
     * @example
     * // Delete one DataRequest
     * const DataRequest = await prisma.dataRequest.delete({
     *   where: {
     *     // ... filter to delete one DataRequest
     *   }
     * })
     * 
     */
    delete<T extends DataRequestDeleteArgs>(args: SelectSubset<T, DataRequestDeleteArgs<ExtArgs>>): Prisma__DataRequestClient<$Result.GetResult<Prisma.$DataRequestPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DataRequest.
     * @param {DataRequestUpdateArgs} args - Arguments to update one DataRequest.
     * @example
     * // Update one DataRequest
     * const dataRequest = await prisma.dataRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DataRequestUpdateArgs>(args: SelectSubset<T, DataRequestUpdateArgs<ExtArgs>>): Prisma__DataRequestClient<$Result.GetResult<Prisma.$DataRequestPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DataRequests.
     * @param {DataRequestDeleteManyArgs} args - Arguments to filter DataRequests to delete.
     * @example
     * // Delete a few DataRequests
     * const { count } = await prisma.dataRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DataRequestDeleteManyArgs>(args?: SelectSubset<T, DataRequestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DataRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DataRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DataRequests
     * const dataRequest = await prisma.dataRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DataRequestUpdateManyArgs>(args: SelectSubset<T, DataRequestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DataRequest.
     * @param {DataRequestUpsertArgs} args - Arguments to update or create a DataRequest.
     * @example
     * // Update or create a DataRequest
     * const dataRequest = await prisma.dataRequest.upsert({
     *   create: {
     *     // ... data to create a DataRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DataRequest we want to update
     *   }
     * })
     */
    upsert<T extends DataRequestUpsertArgs>(args: SelectSubset<T, DataRequestUpsertArgs<ExtArgs>>): Prisma__DataRequestClient<$Result.GetResult<Prisma.$DataRequestPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DataRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DataRequestCountArgs} args - Arguments to filter DataRequests to count.
     * @example
     * // Count the number of DataRequests
     * const count = await prisma.dataRequest.count({
     *   where: {
     *     // ... the filter for the DataRequests we want to count
     *   }
     * })
    **/
    count<T extends DataRequestCountArgs>(
      args?: Subset<T, DataRequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DataRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DataRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DataRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DataRequestAggregateArgs>(args: Subset<T, DataRequestAggregateArgs>): Prisma.PrismaPromise<GetDataRequestAggregateType<T>>

    /**
     * Group by DataRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DataRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DataRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DataRequestGroupByArgs['orderBy'] }
        : { orderBy?: DataRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DataRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDataRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DataRequest model
   */
  readonly fields: DataRequestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DataRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DataRequestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Shop<T extends ShopDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ShopDefaultArgs<ExtArgs>>): Prisma__ShopClient<$Result.GetResult<Prisma.$ShopPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DataRequest model
   */ 
  interface DataRequestFieldRefs {
    readonly id: FieldRef<"DataRequest", 'String'>
    readonly requestId: FieldRef<"DataRequest", 'String'>
    readonly shopDomain: FieldRef<"DataRequest", 'String'>
    readonly shopifyCustomerId: FieldRef<"DataRequest", 'String'>
    readonly requestData: FieldRef<"DataRequest", 'Json'>
    readonly status: FieldRef<"DataRequest", 'String'>
    readonly createdAt: FieldRef<"DataRequest", 'DateTime'>
    readonly updatedAt: FieldRef<"DataRequest", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DataRequest findUnique
   */
  export type DataRequestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataRequest
     */
    select?: DataRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataRequestInclude<ExtArgs> | null
    /**
     * Filter, which DataRequest to fetch.
     */
    where: DataRequestWhereUniqueInput
  }

  /**
   * DataRequest findUniqueOrThrow
   */
  export type DataRequestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataRequest
     */
    select?: DataRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataRequestInclude<ExtArgs> | null
    /**
     * Filter, which DataRequest to fetch.
     */
    where: DataRequestWhereUniqueInput
  }

  /**
   * DataRequest findFirst
   */
  export type DataRequestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataRequest
     */
    select?: DataRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataRequestInclude<ExtArgs> | null
    /**
     * Filter, which DataRequest to fetch.
     */
    where?: DataRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DataRequests to fetch.
     */
    orderBy?: DataRequestOrderByWithRelationInput | DataRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DataRequests.
     */
    cursor?: DataRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DataRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DataRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DataRequests.
     */
    distinct?: DataRequestScalarFieldEnum | DataRequestScalarFieldEnum[]
  }

  /**
   * DataRequest findFirstOrThrow
   */
  export type DataRequestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataRequest
     */
    select?: DataRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataRequestInclude<ExtArgs> | null
    /**
     * Filter, which DataRequest to fetch.
     */
    where?: DataRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DataRequests to fetch.
     */
    orderBy?: DataRequestOrderByWithRelationInput | DataRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DataRequests.
     */
    cursor?: DataRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DataRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DataRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DataRequests.
     */
    distinct?: DataRequestScalarFieldEnum | DataRequestScalarFieldEnum[]
  }

  /**
   * DataRequest findMany
   */
  export type DataRequestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataRequest
     */
    select?: DataRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataRequestInclude<ExtArgs> | null
    /**
     * Filter, which DataRequests to fetch.
     */
    where?: DataRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DataRequests to fetch.
     */
    orderBy?: DataRequestOrderByWithRelationInput | DataRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DataRequests.
     */
    cursor?: DataRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DataRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DataRequests.
     */
    skip?: number
    distinct?: DataRequestScalarFieldEnum | DataRequestScalarFieldEnum[]
  }

  /**
   * DataRequest create
   */
  export type DataRequestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataRequest
     */
    select?: DataRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataRequestInclude<ExtArgs> | null
    /**
     * The data needed to create a DataRequest.
     */
    data: XOR<DataRequestCreateInput, DataRequestUncheckedCreateInput>
  }

  /**
   * DataRequest createMany
   */
  export type DataRequestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DataRequests.
     */
    data: DataRequestCreateManyInput | DataRequestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DataRequest createManyAndReturn
   */
  export type DataRequestCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataRequest
     */
    select?: DataRequestSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many DataRequests.
     */
    data: DataRequestCreateManyInput | DataRequestCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataRequestIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DataRequest update
   */
  export type DataRequestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataRequest
     */
    select?: DataRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataRequestInclude<ExtArgs> | null
    /**
     * The data needed to update a DataRequest.
     */
    data: XOR<DataRequestUpdateInput, DataRequestUncheckedUpdateInput>
    /**
     * Choose, which DataRequest to update.
     */
    where: DataRequestWhereUniqueInput
  }

  /**
   * DataRequest updateMany
   */
  export type DataRequestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DataRequests.
     */
    data: XOR<DataRequestUpdateManyMutationInput, DataRequestUncheckedUpdateManyInput>
    /**
     * Filter which DataRequests to update
     */
    where?: DataRequestWhereInput
  }

  /**
   * DataRequest upsert
   */
  export type DataRequestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataRequest
     */
    select?: DataRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataRequestInclude<ExtArgs> | null
    /**
     * The filter to search for the DataRequest to update in case it exists.
     */
    where: DataRequestWhereUniqueInput
    /**
     * In case the DataRequest found by the `where` argument doesn't exist, create a new DataRequest with this data.
     */
    create: XOR<DataRequestCreateInput, DataRequestUncheckedCreateInput>
    /**
     * In case the DataRequest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DataRequestUpdateInput, DataRequestUncheckedUpdateInput>
  }

  /**
   * DataRequest delete
   */
  export type DataRequestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataRequest
     */
    select?: DataRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataRequestInclude<ExtArgs> | null
    /**
     * Filter which DataRequest to delete.
     */
    where: DataRequestWhereUniqueInput
  }

  /**
   * DataRequest deleteMany
   */
  export type DataRequestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DataRequests to delete
     */
    where?: DataRequestWhereInput
  }

  /**
   * DataRequest without action
   */
  export type DataRequestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataRequest
     */
    select?: DataRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataRequestInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionAvgAggregateOutputType = {
    userId: number | null
  }

  export type SessionSumAggregateOutputType = {
    userId: bigint | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    shop: string | null
    state: string | null
    isOnline: boolean | null
    scope: string | null
    expires: Date | null
    accessToken: string | null
    userId: bigint | null
    firstName: string | null
    lastName: string | null
    email: string | null
    accountOwner: boolean | null
    locale: string | null
    collaborator: boolean | null
    emailVerified: boolean | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    shop: string | null
    state: string | null
    isOnline: boolean | null
    scope: string | null
    expires: Date | null
    accessToken: string | null
    userId: bigint | null
    firstName: string | null
    lastName: string | null
    email: string | null
    accountOwner: boolean | null
    locale: string | null
    collaborator: boolean | null
    emailVerified: boolean | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    shop: number
    state: number
    isOnline: number
    scope: number
    expires: number
    accessToken: number
    userId: number
    firstName: number
    lastName: number
    email: number
    accountOwner: number
    locale: number
    collaborator: number
    emailVerified: number
    _all: number
  }


  export type SessionAvgAggregateInputType = {
    userId?: true
  }

  export type SessionSumAggregateInputType = {
    userId?: true
  }

  export type SessionMinAggregateInputType = {
    id?: true
    shop?: true
    state?: true
    isOnline?: true
    scope?: true
    expires?: true
    accessToken?: true
    userId?: true
    firstName?: true
    lastName?: true
    email?: true
    accountOwner?: true
    locale?: true
    collaborator?: true
    emailVerified?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    shop?: true
    state?: true
    isOnline?: true
    scope?: true
    expires?: true
    accessToken?: true
    userId?: true
    firstName?: true
    lastName?: true
    email?: true
    accountOwner?: true
    locale?: true
    collaborator?: true
    emailVerified?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    shop?: true
    state?: true
    isOnline?: true
    scope?: true
    expires?: true
    accessToken?: true
    userId?: true
    firstName?: true
    lastName?: true
    email?: true
    accountOwner?: true
    locale?: true
    collaborator?: true
    emailVerified?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _avg?: SessionAvgAggregateInputType
    _sum?: SessionSumAggregateInputType
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    shop: string
    state: string
    isOnline: boolean
    scope: string | null
    expires: Date | null
    accessToken: string
    userId: bigint | null
    firstName: string | null
    lastName: string | null
    email: string | null
    accountOwner: boolean
    locale: string | null
    collaborator: boolean | null
    emailVerified: boolean | null
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shop?: boolean
    state?: boolean
    isOnline?: boolean
    scope?: boolean
    expires?: boolean
    accessToken?: boolean
    userId?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    accountOwner?: boolean
    locale?: boolean
    collaborator?: boolean
    emailVerified?: boolean
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shop?: boolean
    state?: boolean
    isOnline?: boolean
    scope?: boolean
    expires?: boolean
    accessToken?: boolean
    userId?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    accountOwner?: boolean
    locale?: boolean
    collaborator?: boolean
    emailVerified?: boolean
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    shop?: boolean
    state?: boolean
    isOnline?: boolean
    scope?: boolean
    expires?: boolean
    accessToken?: boolean
    userId?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    accountOwner?: boolean
    locale?: boolean
    collaborator?: boolean
    emailVerified?: boolean
  }


  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      shop: string
      state: string
      isOnline: boolean
      scope: string | null
      expires: Date | null
      accessToken: string
      userId: bigint | null
      firstName: string | null
      lastName: string | null
      email: string | null
      accountOwner: boolean
      locale: string | null
      collaborator: boolean | null
      emailVerified: boolean | null
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */ 
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly shop: FieldRef<"Session", 'String'>
    readonly state: FieldRef<"Session", 'String'>
    readonly isOnline: FieldRef<"Session", 'Boolean'>
    readonly scope: FieldRef<"Session", 'String'>
    readonly expires: FieldRef<"Session", 'DateTime'>
    readonly accessToken: FieldRef<"Session", 'String'>
    readonly userId: FieldRef<"Session", 'BigInt'>
    readonly firstName: FieldRef<"Session", 'String'>
    readonly lastName: FieldRef<"Session", 'String'>
    readonly email: FieldRef<"Session", 'String'>
    readonly accountOwner: FieldRef<"Session", 'Boolean'>
    readonly locale: FieldRef<"Session", 'String'>
    readonly collaborator: FieldRef<"Session", 'Boolean'>
    readonly emailVerified: FieldRef<"Session", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
  }


  /**
   * Model Shop
   */

  export type AggregateShop = {
    _count: ShopCountAggregateOutputType | null
    _min: ShopMinAggregateOutputType | null
    _max: ShopMaxAggregateOutputType | null
  }

  export type ShopMinAggregateOutputType = {
    id: string | null
    shopDomain: string | null
    accessToken: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ShopMaxAggregateOutputType = {
    id: string | null
    shopDomain: string | null
    accessToken: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ShopCountAggregateOutputType = {
    id: number
    shopDomain: number
    accessToken: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ShopMinAggregateInputType = {
    id?: true
    shopDomain?: true
    accessToken?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ShopMaxAggregateInputType = {
    id?: true
    shopDomain?: true
    accessToken?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ShopCountAggregateInputType = {
    id?: true
    shopDomain?: true
    accessToken?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ShopAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Shop to aggregate.
     */
    where?: ShopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shops to fetch.
     */
    orderBy?: ShopOrderByWithRelationInput | ShopOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ShopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shops from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shops.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Shops
    **/
    _count?: true | ShopCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShopMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShopMaxAggregateInputType
  }

  export type GetShopAggregateType<T extends ShopAggregateArgs> = {
        [P in keyof T & keyof AggregateShop]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShop[P]>
      : GetScalarType<T[P], AggregateShop[P]>
  }




  export type ShopGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShopWhereInput
    orderBy?: ShopOrderByWithAggregationInput | ShopOrderByWithAggregationInput[]
    by: ShopScalarFieldEnum[] | ShopScalarFieldEnum
    having?: ShopScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShopCountAggregateInputType | true
    _min?: ShopMinAggregateInputType
    _max?: ShopMaxAggregateInputType
  }

  export type ShopGroupByOutputType = {
    id: string
    shopDomain: string
    accessToken: string | null
    createdAt: Date
    updatedAt: Date
    _count: ShopCountAggregateOutputType | null
    _min: ShopMinAggregateOutputType | null
    _max: ShopMaxAggregateOutputType | null
  }

  type GetShopGroupByPayload<T extends ShopGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ShopGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShopGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShopGroupByOutputType[P]>
            : GetScalarType<T[P], ShopGroupByOutputType[P]>
        }
      >
    >


  export type ShopSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shopDomain?: boolean
    accessToken?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    CustomerData?: boolean | Shop$CustomerDataArgs<ExtArgs>
    DataRequest?: boolean | Shop$DataRequestArgs<ExtArgs>
    _count?: boolean | ShopCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shop"]>

  export type ShopSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shopDomain?: boolean
    accessToken?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["shop"]>

  export type ShopSelectScalar = {
    id?: boolean
    shopDomain?: boolean
    accessToken?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ShopInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    CustomerData?: boolean | Shop$CustomerDataArgs<ExtArgs>
    DataRequest?: boolean | Shop$DataRequestArgs<ExtArgs>
    _count?: boolean | ShopCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ShopIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ShopPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Shop"
    objects: {
      CustomerData: Prisma.$CustomerDataPayload<ExtArgs>[]
      DataRequest: Prisma.$DataRequestPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      shopDomain: string
      accessToken: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["shop"]>
    composites: {}
  }

  type ShopGetPayload<S extends boolean | null | undefined | ShopDefaultArgs> = $Result.GetResult<Prisma.$ShopPayload, S>

  type ShopCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ShopFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ShopCountAggregateInputType | true
    }

  export interface ShopDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Shop'], meta: { name: 'Shop' } }
    /**
     * Find zero or one Shop that matches the filter.
     * @param {ShopFindUniqueArgs} args - Arguments to find a Shop
     * @example
     * // Get one Shop
     * const shop = await prisma.shop.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ShopFindUniqueArgs>(args: SelectSubset<T, ShopFindUniqueArgs<ExtArgs>>): Prisma__ShopClient<$Result.GetResult<Prisma.$ShopPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Shop that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ShopFindUniqueOrThrowArgs} args - Arguments to find a Shop
     * @example
     * // Get one Shop
     * const shop = await prisma.shop.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ShopFindUniqueOrThrowArgs>(args: SelectSubset<T, ShopFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ShopClient<$Result.GetResult<Prisma.$ShopPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Shop that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopFindFirstArgs} args - Arguments to find a Shop
     * @example
     * // Get one Shop
     * const shop = await prisma.shop.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ShopFindFirstArgs>(args?: SelectSubset<T, ShopFindFirstArgs<ExtArgs>>): Prisma__ShopClient<$Result.GetResult<Prisma.$ShopPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Shop that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopFindFirstOrThrowArgs} args - Arguments to find a Shop
     * @example
     * // Get one Shop
     * const shop = await prisma.shop.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ShopFindFirstOrThrowArgs>(args?: SelectSubset<T, ShopFindFirstOrThrowArgs<ExtArgs>>): Prisma__ShopClient<$Result.GetResult<Prisma.$ShopPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Shops that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Shops
     * const shops = await prisma.shop.findMany()
     * 
     * // Get first 10 Shops
     * const shops = await prisma.shop.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shopWithIdOnly = await prisma.shop.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ShopFindManyArgs>(args?: SelectSubset<T, ShopFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShopPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Shop.
     * @param {ShopCreateArgs} args - Arguments to create a Shop.
     * @example
     * // Create one Shop
     * const Shop = await prisma.shop.create({
     *   data: {
     *     // ... data to create a Shop
     *   }
     * })
     * 
     */
    create<T extends ShopCreateArgs>(args: SelectSubset<T, ShopCreateArgs<ExtArgs>>): Prisma__ShopClient<$Result.GetResult<Prisma.$ShopPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Shops.
     * @param {ShopCreateManyArgs} args - Arguments to create many Shops.
     * @example
     * // Create many Shops
     * const shop = await prisma.shop.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ShopCreateManyArgs>(args?: SelectSubset<T, ShopCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Shops and returns the data saved in the database.
     * @param {ShopCreateManyAndReturnArgs} args - Arguments to create many Shops.
     * @example
     * // Create many Shops
     * const shop = await prisma.shop.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Shops and only return the `id`
     * const shopWithIdOnly = await prisma.shop.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ShopCreateManyAndReturnArgs>(args?: SelectSubset<T, ShopCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShopPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Shop.
     * @param {ShopDeleteArgs} args - Arguments to delete one Shop.
     * @example
     * // Delete one Shop
     * const Shop = await prisma.shop.delete({
     *   where: {
     *     // ... filter to delete one Shop
     *   }
     * })
     * 
     */
    delete<T extends ShopDeleteArgs>(args: SelectSubset<T, ShopDeleteArgs<ExtArgs>>): Prisma__ShopClient<$Result.GetResult<Prisma.$ShopPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Shop.
     * @param {ShopUpdateArgs} args - Arguments to update one Shop.
     * @example
     * // Update one Shop
     * const shop = await prisma.shop.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ShopUpdateArgs>(args: SelectSubset<T, ShopUpdateArgs<ExtArgs>>): Prisma__ShopClient<$Result.GetResult<Prisma.$ShopPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Shops.
     * @param {ShopDeleteManyArgs} args - Arguments to filter Shops to delete.
     * @example
     * // Delete a few Shops
     * const { count } = await prisma.shop.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ShopDeleteManyArgs>(args?: SelectSubset<T, ShopDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Shops.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Shops
     * const shop = await prisma.shop.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ShopUpdateManyArgs>(args: SelectSubset<T, ShopUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Shop.
     * @param {ShopUpsertArgs} args - Arguments to update or create a Shop.
     * @example
     * // Update or create a Shop
     * const shop = await prisma.shop.upsert({
     *   create: {
     *     // ... data to create a Shop
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Shop we want to update
     *   }
     * })
     */
    upsert<T extends ShopUpsertArgs>(args: SelectSubset<T, ShopUpsertArgs<ExtArgs>>): Prisma__ShopClient<$Result.GetResult<Prisma.$ShopPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Shops.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopCountArgs} args - Arguments to filter Shops to count.
     * @example
     * // Count the number of Shops
     * const count = await prisma.shop.count({
     *   where: {
     *     // ... the filter for the Shops we want to count
     *   }
     * })
    **/
    count<T extends ShopCountArgs>(
      args?: Subset<T, ShopCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShopCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Shop.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShopAggregateArgs>(args: Subset<T, ShopAggregateArgs>): Prisma.PrismaPromise<GetShopAggregateType<T>>

    /**
     * Group by Shop.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShopGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShopGroupByArgs['orderBy'] }
        : { orderBy?: ShopGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShopGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShopGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Shop model
   */
  readonly fields: ShopFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Shop.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ShopClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    CustomerData<T extends Shop$CustomerDataArgs<ExtArgs> = {}>(args?: Subset<T, Shop$CustomerDataArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerDataPayload<ExtArgs>, T, "findMany"> | Null>
    DataRequest<T extends Shop$DataRequestArgs<ExtArgs> = {}>(args?: Subset<T, Shop$DataRequestArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DataRequestPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Shop model
   */ 
  interface ShopFieldRefs {
    readonly id: FieldRef<"Shop", 'String'>
    readonly shopDomain: FieldRef<"Shop", 'String'>
    readonly accessToken: FieldRef<"Shop", 'String'>
    readonly createdAt: FieldRef<"Shop", 'DateTime'>
    readonly updatedAt: FieldRef<"Shop", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Shop findUnique
   */
  export type ShopFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shop
     */
    select?: ShopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShopInclude<ExtArgs> | null
    /**
     * Filter, which Shop to fetch.
     */
    where: ShopWhereUniqueInput
  }

  /**
   * Shop findUniqueOrThrow
   */
  export type ShopFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shop
     */
    select?: ShopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShopInclude<ExtArgs> | null
    /**
     * Filter, which Shop to fetch.
     */
    where: ShopWhereUniqueInput
  }

  /**
   * Shop findFirst
   */
  export type ShopFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shop
     */
    select?: ShopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShopInclude<ExtArgs> | null
    /**
     * Filter, which Shop to fetch.
     */
    where?: ShopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shops to fetch.
     */
    orderBy?: ShopOrderByWithRelationInput | ShopOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Shops.
     */
    cursor?: ShopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shops from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shops.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Shops.
     */
    distinct?: ShopScalarFieldEnum | ShopScalarFieldEnum[]
  }

  /**
   * Shop findFirstOrThrow
   */
  export type ShopFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shop
     */
    select?: ShopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShopInclude<ExtArgs> | null
    /**
     * Filter, which Shop to fetch.
     */
    where?: ShopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shops to fetch.
     */
    orderBy?: ShopOrderByWithRelationInput | ShopOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Shops.
     */
    cursor?: ShopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shops from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shops.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Shops.
     */
    distinct?: ShopScalarFieldEnum | ShopScalarFieldEnum[]
  }

  /**
   * Shop findMany
   */
  export type ShopFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shop
     */
    select?: ShopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShopInclude<ExtArgs> | null
    /**
     * Filter, which Shops to fetch.
     */
    where?: ShopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shops to fetch.
     */
    orderBy?: ShopOrderByWithRelationInput | ShopOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Shops.
     */
    cursor?: ShopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shops from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shops.
     */
    skip?: number
    distinct?: ShopScalarFieldEnum | ShopScalarFieldEnum[]
  }

  /**
   * Shop create
   */
  export type ShopCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shop
     */
    select?: ShopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShopInclude<ExtArgs> | null
    /**
     * The data needed to create a Shop.
     */
    data: XOR<ShopCreateInput, ShopUncheckedCreateInput>
  }

  /**
   * Shop createMany
   */
  export type ShopCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Shops.
     */
    data: ShopCreateManyInput | ShopCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Shop createManyAndReturn
   */
  export type ShopCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shop
     */
    select?: ShopSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Shops.
     */
    data: ShopCreateManyInput | ShopCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Shop update
   */
  export type ShopUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shop
     */
    select?: ShopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShopInclude<ExtArgs> | null
    /**
     * The data needed to update a Shop.
     */
    data: XOR<ShopUpdateInput, ShopUncheckedUpdateInput>
    /**
     * Choose, which Shop to update.
     */
    where: ShopWhereUniqueInput
  }

  /**
   * Shop updateMany
   */
  export type ShopUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Shops.
     */
    data: XOR<ShopUpdateManyMutationInput, ShopUncheckedUpdateManyInput>
    /**
     * Filter which Shops to update
     */
    where?: ShopWhereInput
  }

  /**
   * Shop upsert
   */
  export type ShopUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shop
     */
    select?: ShopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShopInclude<ExtArgs> | null
    /**
     * The filter to search for the Shop to update in case it exists.
     */
    where: ShopWhereUniqueInput
    /**
     * In case the Shop found by the `where` argument doesn't exist, create a new Shop with this data.
     */
    create: XOR<ShopCreateInput, ShopUncheckedCreateInput>
    /**
     * In case the Shop was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ShopUpdateInput, ShopUncheckedUpdateInput>
  }

  /**
   * Shop delete
   */
  export type ShopDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shop
     */
    select?: ShopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShopInclude<ExtArgs> | null
    /**
     * Filter which Shop to delete.
     */
    where: ShopWhereUniqueInput
  }

  /**
   * Shop deleteMany
   */
  export type ShopDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Shops to delete
     */
    where?: ShopWhereInput
  }

  /**
   * Shop.CustomerData
   */
  export type Shop$CustomerDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerData
     */
    select?: CustomerDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerDataInclude<ExtArgs> | null
    where?: CustomerDataWhereInput
    orderBy?: CustomerDataOrderByWithRelationInput | CustomerDataOrderByWithRelationInput[]
    cursor?: CustomerDataWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CustomerDataScalarFieldEnum | CustomerDataScalarFieldEnum[]
  }

  /**
   * Shop.DataRequest
   */
  export type Shop$DataRequestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataRequest
     */
    select?: DataRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataRequestInclude<ExtArgs> | null
    where?: DataRequestWhereInput
    orderBy?: DataRequestOrderByWithRelationInput | DataRequestOrderByWithRelationInput[]
    cursor?: DataRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DataRequestScalarFieldEnum | DataRequestScalarFieldEnum[]
  }

  /**
   * Shop without action
   */
  export type ShopDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shop
     */
    select?: ShopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShopInclude<ExtArgs> | null
  }


  /**
   * Model ShopSubscription
   */

  export type AggregateShopSubscription = {
    _count: ShopSubscriptionCountAggregateOutputType | null
    _avg: ShopSubscriptionAvgAggregateOutputType | null
    _sum: ShopSubscriptionSumAggregateOutputType | null
    _min: ShopSubscriptionMinAggregateOutputType | null
    _max: ShopSubscriptionMaxAggregateOutputType | null
  }

  export type ShopSubscriptionAvgAggregateOutputType = {
    planPrice: number | null
    trialDays: number | null
    creditCap: number | null
  }

  export type ShopSubscriptionSumAggregateOutputType = {
    planPrice: number | null
    trialDays: number | null
    creditCap: number | null
  }

  export type ShopSubscriptionMinAggregateOutputType = {
    id: string | null
    shopDomain: string | null
    subscriptionId: string | null
    status: string | null
    planPrice: number | null
    trialDays: number | null
    createdAt: Date | null
    updatedAt: Date | null
    creditCap: number | null
    pocEmail: string | null
    pocName: string | null
    pocPhoneNumber: string | null
    shopName: string | null
  }

  export type ShopSubscriptionMaxAggregateOutputType = {
    id: string | null
    shopDomain: string | null
    subscriptionId: string | null
    status: string | null
    planPrice: number | null
    trialDays: number | null
    createdAt: Date | null
    updatedAt: Date | null
    creditCap: number | null
    pocEmail: string | null
    pocName: string | null
    pocPhoneNumber: string | null
    shopName: string | null
  }

  export type ShopSubscriptionCountAggregateOutputType = {
    id: number
    shopDomain: number
    subscriptionId: number
    status: number
    planPrice: number
    trialDays: number
    createdAt: number
    updatedAt: number
    creditCap: number
    pocEmail: number
    pocName: number
    pocPhoneNumber: number
    shopName: number
    _all: number
  }


  export type ShopSubscriptionAvgAggregateInputType = {
    planPrice?: true
    trialDays?: true
    creditCap?: true
  }

  export type ShopSubscriptionSumAggregateInputType = {
    planPrice?: true
    trialDays?: true
    creditCap?: true
  }

  export type ShopSubscriptionMinAggregateInputType = {
    id?: true
    shopDomain?: true
    subscriptionId?: true
    status?: true
    planPrice?: true
    trialDays?: true
    createdAt?: true
    updatedAt?: true
    creditCap?: true
    pocEmail?: true
    pocName?: true
    pocPhoneNumber?: true
    shopName?: true
  }

  export type ShopSubscriptionMaxAggregateInputType = {
    id?: true
    shopDomain?: true
    subscriptionId?: true
    status?: true
    planPrice?: true
    trialDays?: true
    createdAt?: true
    updatedAt?: true
    creditCap?: true
    pocEmail?: true
    pocName?: true
    pocPhoneNumber?: true
    shopName?: true
  }

  export type ShopSubscriptionCountAggregateInputType = {
    id?: true
    shopDomain?: true
    subscriptionId?: true
    status?: true
    planPrice?: true
    trialDays?: true
    createdAt?: true
    updatedAt?: true
    creditCap?: true
    pocEmail?: true
    pocName?: true
    pocPhoneNumber?: true
    shopName?: true
    _all?: true
  }

  export type ShopSubscriptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShopSubscription to aggregate.
     */
    where?: ShopSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShopSubscriptions to fetch.
     */
    orderBy?: ShopSubscriptionOrderByWithRelationInput | ShopSubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ShopSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShopSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShopSubscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ShopSubscriptions
    **/
    _count?: true | ShopSubscriptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ShopSubscriptionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ShopSubscriptionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShopSubscriptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShopSubscriptionMaxAggregateInputType
  }

  export type GetShopSubscriptionAggregateType<T extends ShopSubscriptionAggregateArgs> = {
        [P in keyof T & keyof AggregateShopSubscription]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShopSubscription[P]>
      : GetScalarType<T[P], AggregateShopSubscription[P]>
  }




  export type ShopSubscriptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShopSubscriptionWhereInput
    orderBy?: ShopSubscriptionOrderByWithAggregationInput | ShopSubscriptionOrderByWithAggregationInput[]
    by: ShopSubscriptionScalarFieldEnum[] | ShopSubscriptionScalarFieldEnum
    having?: ShopSubscriptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShopSubscriptionCountAggregateInputType | true
    _avg?: ShopSubscriptionAvgAggregateInputType
    _sum?: ShopSubscriptionSumAggregateInputType
    _min?: ShopSubscriptionMinAggregateInputType
    _max?: ShopSubscriptionMaxAggregateInputType
  }

  export type ShopSubscriptionGroupByOutputType = {
    id: string
    shopDomain: string
    subscriptionId: string | null
    status: string
    planPrice: number
    trialDays: number
    createdAt: Date
    updatedAt: Date
    creditCap: number
    pocEmail: string | null
    pocName: string | null
    pocPhoneNumber: string | null
    shopName: string | null
    _count: ShopSubscriptionCountAggregateOutputType | null
    _avg: ShopSubscriptionAvgAggregateOutputType | null
    _sum: ShopSubscriptionSumAggregateOutputType | null
    _min: ShopSubscriptionMinAggregateOutputType | null
    _max: ShopSubscriptionMaxAggregateOutputType | null
  }

  type GetShopSubscriptionGroupByPayload<T extends ShopSubscriptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ShopSubscriptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShopSubscriptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShopSubscriptionGroupByOutputType[P]>
            : GetScalarType<T[P], ShopSubscriptionGroupByOutputType[P]>
        }
      >
    >


  export type ShopSubscriptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shopDomain?: boolean
    subscriptionId?: boolean
    status?: boolean
    planPrice?: boolean
    trialDays?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    creditCap?: boolean
    pocEmail?: boolean
    pocName?: boolean
    pocPhoneNumber?: boolean
    shopName?: boolean
    CreditUsage?: boolean | ShopSubscription$CreditUsageArgs<ExtArgs>
  }, ExtArgs["result"]["shopSubscription"]>

  export type ShopSubscriptionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shopDomain?: boolean
    subscriptionId?: boolean
    status?: boolean
    planPrice?: boolean
    trialDays?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    creditCap?: boolean
    pocEmail?: boolean
    pocName?: boolean
    pocPhoneNumber?: boolean
    shopName?: boolean
  }, ExtArgs["result"]["shopSubscription"]>

  export type ShopSubscriptionSelectScalar = {
    id?: boolean
    shopDomain?: boolean
    subscriptionId?: boolean
    status?: boolean
    planPrice?: boolean
    trialDays?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    creditCap?: boolean
    pocEmail?: boolean
    pocName?: boolean
    pocPhoneNumber?: boolean
    shopName?: boolean
  }

  export type ShopSubscriptionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    CreditUsage?: boolean | ShopSubscription$CreditUsageArgs<ExtArgs>
  }
  export type ShopSubscriptionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ShopSubscriptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ShopSubscription"
    objects: {
      CreditUsage: Prisma.$CreditUsagePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      shopDomain: string
      subscriptionId: string | null
      status: string
      planPrice: number
      trialDays: number
      createdAt: Date
      updatedAt: Date
      creditCap: number
      pocEmail: string | null
      pocName: string | null
      pocPhoneNumber: string | null
      shopName: string | null
    }, ExtArgs["result"]["shopSubscription"]>
    composites: {}
  }

  type ShopSubscriptionGetPayload<S extends boolean | null | undefined | ShopSubscriptionDefaultArgs> = $Result.GetResult<Prisma.$ShopSubscriptionPayload, S>

  type ShopSubscriptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ShopSubscriptionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ShopSubscriptionCountAggregateInputType | true
    }

  export interface ShopSubscriptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ShopSubscription'], meta: { name: 'ShopSubscription' } }
    /**
     * Find zero or one ShopSubscription that matches the filter.
     * @param {ShopSubscriptionFindUniqueArgs} args - Arguments to find a ShopSubscription
     * @example
     * // Get one ShopSubscription
     * const shopSubscription = await prisma.shopSubscription.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ShopSubscriptionFindUniqueArgs>(args: SelectSubset<T, ShopSubscriptionFindUniqueArgs<ExtArgs>>): Prisma__ShopSubscriptionClient<$Result.GetResult<Prisma.$ShopSubscriptionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ShopSubscription that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ShopSubscriptionFindUniqueOrThrowArgs} args - Arguments to find a ShopSubscription
     * @example
     * // Get one ShopSubscription
     * const shopSubscription = await prisma.shopSubscription.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ShopSubscriptionFindUniqueOrThrowArgs>(args: SelectSubset<T, ShopSubscriptionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ShopSubscriptionClient<$Result.GetResult<Prisma.$ShopSubscriptionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ShopSubscription that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopSubscriptionFindFirstArgs} args - Arguments to find a ShopSubscription
     * @example
     * // Get one ShopSubscription
     * const shopSubscription = await prisma.shopSubscription.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ShopSubscriptionFindFirstArgs>(args?: SelectSubset<T, ShopSubscriptionFindFirstArgs<ExtArgs>>): Prisma__ShopSubscriptionClient<$Result.GetResult<Prisma.$ShopSubscriptionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ShopSubscription that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopSubscriptionFindFirstOrThrowArgs} args - Arguments to find a ShopSubscription
     * @example
     * // Get one ShopSubscription
     * const shopSubscription = await prisma.shopSubscription.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ShopSubscriptionFindFirstOrThrowArgs>(args?: SelectSubset<T, ShopSubscriptionFindFirstOrThrowArgs<ExtArgs>>): Prisma__ShopSubscriptionClient<$Result.GetResult<Prisma.$ShopSubscriptionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ShopSubscriptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopSubscriptionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ShopSubscriptions
     * const shopSubscriptions = await prisma.shopSubscription.findMany()
     * 
     * // Get first 10 ShopSubscriptions
     * const shopSubscriptions = await prisma.shopSubscription.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shopSubscriptionWithIdOnly = await prisma.shopSubscription.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ShopSubscriptionFindManyArgs>(args?: SelectSubset<T, ShopSubscriptionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShopSubscriptionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ShopSubscription.
     * @param {ShopSubscriptionCreateArgs} args - Arguments to create a ShopSubscription.
     * @example
     * // Create one ShopSubscription
     * const ShopSubscription = await prisma.shopSubscription.create({
     *   data: {
     *     // ... data to create a ShopSubscription
     *   }
     * })
     * 
     */
    create<T extends ShopSubscriptionCreateArgs>(args: SelectSubset<T, ShopSubscriptionCreateArgs<ExtArgs>>): Prisma__ShopSubscriptionClient<$Result.GetResult<Prisma.$ShopSubscriptionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ShopSubscriptions.
     * @param {ShopSubscriptionCreateManyArgs} args - Arguments to create many ShopSubscriptions.
     * @example
     * // Create many ShopSubscriptions
     * const shopSubscription = await prisma.shopSubscription.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ShopSubscriptionCreateManyArgs>(args?: SelectSubset<T, ShopSubscriptionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ShopSubscriptions and returns the data saved in the database.
     * @param {ShopSubscriptionCreateManyAndReturnArgs} args - Arguments to create many ShopSubscriptions.
     * @example
     * // Create many ShopSubscriptions
     * const shopSubscription = await prisma.shopSubscription.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ShopSubscriptions and only return the `id`
     * const shopSubscriptionWithIdOnly = await prisma.shopSubscription.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ShopSubscriptionCreateManyAndReturnArgs>(args?: SelectSubset<T, ShopSubscriptionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShopSubscriptionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ShopSubscription.
     * @param {ShopSubscriptionDeleteArgs} args - Arguments to delete one ShopSubscription.
     * @example
     * // Delete one ShopSubscription
     * const ShopSubscription = await prisma.shopSubscription.delete({
     *   where: {
     *     // ... filter to delete one ShopSubscription
     *   }
     * })
     * 
     */
    delete<T extends ShopSubscriptionDeleteArgs>(args: SelectSubset<T, ShopSubscriptionDeleteArgs<ExtArgs>>): Prisma__ShopSubscriptionClient<$Result.GetResult<Prisma.$ShopSubscriptionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ShopSubscription.
     * @param {ShopSubscriptionUpdateArgs} args - Arguments to update one ShopSubscription.
     * @example
     * // Update one ShopSubscription
     * const shopSubscription = await prisma.shopSubscription.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ShopSubscriptionUpdateArgs>(args: SelectSubset<T, ShopSubscriptionUpdateArgs<ExtArgs>>): Prisma__ShopSubscriptionClient<$Result.GetResult<Prisma.$ShopSubscriptionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ShopSubscriptions.
     * @param {ShopSubscriptionDeleteManyArgs} args - Arguments to filter ShopSubscriptions to delete.
     * @example
     * // Delete a few ShopSubscriptions
     * const { count } = await prisma.shopSubscription.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ShopSubscriptionDeleteManyArgs>(args?: SelectSubset<T, ShopSubscriptionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ShopSubscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopSubscriptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ShopSubscriptions
     * const shopSubscription = await prisma.shopSubscription.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ShopSubscriptionUpdateManyArgs>(args: SelectSubset<T, ShopSubscriptionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ShopSubscription.
     * @param {ShopSubscriptionUpsertArgs} args - Arguments to update or create a ShopSubscription.
     * @example
     * // Update or create a ShopSubscription
     * const shopSubscription = await prisma.shopSubscription.upsert({
     *   create: {
     *     // ... data to create a ShopSubscription
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ShopSubscription we want to update
     *   }
     * })
     */
    upsert<T extends ShopSubscriptionUpsertArgs>(args: SelectSubset<T, ShopSubscriptionUpsertArgs<ExtArgs>>): Prisma__ShopSubscriptionClient<$Result.GetResult<Prisma.$ShopSubscriptionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ShopSubscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopSubscriptionCountArgs} args - Arguments to filter ShopSubscriptions to count.
     * @example
     * // Count the number of ShopSubscriptions
     * const count = await prisma.shopSubscription.count({
     *   where: {
     *     // ... the filter for the ShopSubscriptions we want to count
     *   }
     * })
    **/
    count<T extends ShopSubscriptionCountArgs>(
      args?: Subset<T, ShopSubscriptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShopSubscriptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ShopSubscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopSubscriptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShopSubscriptionAggregateArgs>(args: Subset<T, ShopSubscriptionAggregateArgs>): Prisma.PrismaPromise<GetShopSubscriptionAggregateType<T>>

    /**
     * Group by ShopSubscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopSubscriptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShopSubscriptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShopSubscriptionGroupByArgs['orderBy'] }
        : { orderBy?: ShopSubscriptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShopSubscriptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShopSubscriptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ShopSubscription model
   */
  readonly fields: ShopSubscriptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ShopSubscription.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ShopSubscriptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    CreditUsage<T extends ShopSubscription$CreditUsageArgs<ExtArgs> = {}>(args?: Subset<T, ShopSubscription$CreditUsageArgs<ExtArgs>>): Prisma__CreditUsageClient<$Result.GetResult<Prisma.$CreditUsagePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ShopSubscription model
   */ 
  interface ShopSubscriptionFieldRefs {
    readonly id: FieldRef<"ShopSubscription", 'String'>
    readonly shopDomain: FieldRef<"ShopSubscription", 'String'>
    readonly subscriptionId: FieldRef<"ShopSubscription", 'String'>
    readonly status: FieldRef<"ShopSubscription", 'String'>
    readonly planPrice: FieldRef<"ShopSubscription", 'Int'>
    readonly trialDays: FieldRef<"ShopSubscription", 'Int'>
    readonly createdAt: FieldRef<"ShopSubscription", 'DateTime'>
    readonly updatedAt: FieldRef<"ShopSubscription", 'DateTime'>
    readonly creditCap: FieldRef<"ShopSubscription", 'Int'>
    readonly pocEmail: FieldRef<"ShopSubscription", 'String'>
    readonly pocName: FieldRef<"ShopSubscription", 'String'>
    readonly pocPhoneNumber: FieldRef<"ShopSubscription", 'String'>
    readonly shopName: FieldRef<"ShopSubscription", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ShopSubscription findUnique
   */
  export type ShopSubscriptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShopSubscription
     */
    select?: ShopSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShopSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which ShopSubscription to fetch.
     */
    where: ShopSubscriptionWhereUniqueInput
  }

  /**
   * ShopSubscription findUniqueOrThrow
   */
  export type ShopSubscriptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShopSubscription
     */
    select?: ShopSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShopSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which ShopSubscription to fetch.
     */
    where: ShopSubscriptionWhereUniqueInput
  }

  /**
   * ShopSubscription findFirst
   */
  export type ShopSubscriptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShopSubscription
     */
    select?: ShopSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShopSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which ShopSubscription to fetch.
     */
    where?: ShopSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShopSubscriptions to fetch.
     */
    orderBy?: ShopSubscriptionOrderByWithRelationInput | ShopSubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShopSubscriptions.
     */
    cursor?: ShopSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShopSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShopSubscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShopSubscriptions.
     */
    distinct?: ShopSubscriptionScalarFieldEnum | ShopSubscriptionScalarFieldEnum[]
  }

  /**
   * ShopSubscription findFirstOrThrow
   */
  export type ShopSubscriptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShopSubscription
     */
    select?: ShopSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShopSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which ShopSubscription to fetch.
     */
    where?: ShopSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShopSubscriptions to fetch.
     */
    orderBy?: ShopSubscriptionOrderByWithRelationInput | ShopSubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShopSubscriptions.
     */
    cursor?: ShopSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShopSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShopSubscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShopSubscriptions.
     */
    distinct?: ShopSubscriptionScalarFieldEnum | ShopSubscriptionScalarFieldEnum[]
  }

  /**
   * ShopSubscription findMany
   */
  export type ShopSubscriptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShopSubscription
     */
    select?: ShopSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShopSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which ShopSubscriptions to fetch.
     */
    where?: ShopSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShopSubscriptions to fetch.
     */
    orderBy?: ShopSubscriptionOrderByWithRelationInput | ShopSubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ShopSubscriptions.
     */
    cursor?: ShopSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShopSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShopSubscriptions.
     */
    skip?: number
    distinct?: ShopSubscriptionScalarFieldEnum | ShopSubscriptionScalarFieldEnum[]
  }

  /**
   * ShopSubscription create
   */
  export type ShopSubscriptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShopSubscription
     */
    select?: ShopSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShopSubscriptionInclude<ExtArgs> | null
    /**
     * The data needed to create a ShopSubscription.
     */
    data: XOR<ShopSubscriptionCreateInput, ShopSubscriptionUncheckedCreateInput>
  }

  /**
   * ShopSubscription createMany
   */
  export type ShopSubscriptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ShopSubscriptions.
     */
    data: ShopSubscriptionCreateManyInput | ShopSubscriptionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ShopSubscription createManyAndReturn
   */
  export type ShopSubscriptionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShopSubscription
     */
    select?: ShopSubscriptionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ShopSubscriptions.
     */
    data: ShopSubscriptionCreateManyInput | ShopSubscriptionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ShopSubscription update
   */
  export type ShopSubscriptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShopSubscription
     */
    select?: ShopSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShopSubscriptionInclude<ExtArgs> | null
    /**
     * The data needed to update a ShopSubscription.
     */
    data: XOR<ShopSubscriptionUpdateInput, ShopSubscriptionUncheckedUpdateInput>
    /**
     * Choose, which ShopSubscription to update.
     */
    where: ShopSubscriptionWhereUniqueInput
  }

  /**
   * ShopSubscription updateMany
   */
  export type ShopSubscriptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ShopSubscriptions.
     */
    data: XOR<ShopSubscriptionUpdateManyMutationInput, ShopSubscriptionUncheckedUpdateManyInput>
    /**
     * Filter which ShopSubscriptions to update
     */
    where?: ShopSubscriptionWhereInput
  }

  /**
   * ShopSubscription upsert
   */
  export type ShopSubscriptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShopSubscription
     */
    select?: ShopSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShopSubscriptionInclude<ExtArgs> | null
    /**
     * The filter to search for the ShopSubscription to update in case it exists.
     */
    where: ShopSubscriptionWhereUniqueInput
    /**
     * In case the ShopSubscription found by the `where` argument doesn't exist, create a new ShopSubscription with this data.
     */
    create: XOR<ShopSubscriptionCreateInput, ShopSubscriptionUncheckedCreateInput>
    /**
     * In case the ShopSubscription was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ShopSubscriptionUpdateInput, ShopSubscriptionUncheckedUpdateInput>
  }

  /**
   * ShopSubscription delete
   */
  export type ShopSubscriptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShopSubscription
     */
    select?: ShopSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShopSubscriptionInclude<ExtArgs> | null
    /**
     * Filter which ShopSubscription to delete.
     */
    where: ShopSubscriptionWhereUniqueInput
  }

  /**
   * ShopSubscription deleteMany
   */
  export type ShopSubscriptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShopSubscriptions to delete
     */
    where?: ShopSubscriptionWhereInput
  }

  /**
   * ShopSubscription.CreditUsage
   */
  export type ShopSubscription$CreditUsageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditUsage
     */
    select?: CreditUsageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditUsageInclude<ExtArgs> | null
    where?: CreditUsageWhereInput
  }

  /**
   * ShopSubscription without action
   */
  export type ShopSubscriptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShopSubscription
     */
    select?: ShopSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShopSubscriptionInclude<ExtArgs> | null
  }


  /**
   * Model TryOnTracker
   */

  export type AggregateTryOnTracker = {
    _count: TryOnTrackerCountAggregateOutputType | null
    _avg: TryOnTrackerAvgAggregateOutputType | null
    _sum: TryOnTrackerSumAggregateOutputType | null
    _min: TryOnTrackerMinAggregateOutputType | null
    _max: TryOnTrackerMaxAggregateOutputType | null
  }

  export type TryOnTrackerAvgAggregateOutputType = {
    clickCount: number | null
  }

  export type TryOnTrackerSumAggregateOutputType = {
    clickCount: number | null
  }

  export type TryOnTrackerMinAggregateOutputType = {
    id: string | null
    productUrl: string | null
    productName: string | null
    productImage: string | null
    clickCount: number | null
    location: string | null
    timestamp: Date | null
    shop: string | null
  }

  export type TryOnTrackerMaxAggregateOutputType = {
    id: string | null
    productUrl: string | null
    productName: string | null
    productImage: string | null
    clickCount: number | null
    location: string | null
    timestamp: Date | null
    shop: string | null
  }

  export type TryOnTrackerCountAggregateOutputType = {
    id: number
    productUrl: number
    productName: number
    productImage: number
    clickCount: number
    location: number
    timestamp: number
    shop: number
    _all: number
  }


  export type TryOnTrackerAvgAggregateInputType = {
    clickCount?: true
  }

  export type TryOnTrackerSumAggregateInputType = {
    clickCount?: true
  }

  export type TryOnTrackerMinAggregateInputType = {
    id?: true
    productUrl?: true
    productName?: true
    productImage?: true
    clickCount?: true
    location?: true
    timestamp?: true
    shop?: true
  }

  export type TryOnTrackerMaxAggregateInputType = {
    id?: true
    productUrl?: true
    productName?: true
    productImage?: true
    clickCount?: true
    location?: true
    timestamp?: true
    shop?: true
  }

  export type TryOnTrackerCountAggregateInputType = {
    id?: true
    productUrl?: true
    productName?: true
    productImage?: true
    clickCount?: true
    location?: true
    timestamp?: true
    shop?: true
    _all?: true
  }

  export type TryOnTrackerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TryOnTracker to aggregate.
     */
    where?: TryOnTrackerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TryOnTrackers to fetch.
     */
    orderBy?: TryOnTrackerOrderByWithRelationInput | TryOnTrackerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TryOnTrackerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TryOnTrackers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TryOnTrackers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TryOnTrackers
    **/
    _count?: true | TryOnTrackerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TryOnTrackerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TryOnTrackerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TryOnTrackerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TryOnTrackerMaxAggregateInputType
  }

  export type GetTryOnTrackerAggregateType<T extends TryOnTrackerAggregateArgs> = {
        [P in keyof T & keyof AggregateTryOnTracker]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTryOnTracker[P]>
      : GetScalarType<T[P], AggregateTryOnTracker[P]>
  }




  export type TryOnTrackerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TryOnTrackerWhereInput
    orderBy?: TryOnTrackerOrderByWithAggregationInput | TryOnTrackerOrderByWithAggregationInput[]
    by: TryOnTrackerScalarFieldEnum[] | TryOnTrackerScalarFieldEnum
    having?: TryOnTrackerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TryOnTrackerCountAggregateInputType | true
    _avg?: TryOnTrackerAvgAggregateInputType
    _sum?: TryOnTrackerSumAggregateInputType
    _min?: TryOnTrackerMinAggregateInputType
    _max?: TryOnTrackerMaxAggregateInputType
  }

  export type TryOnTrackerGroupByOutputType = {
    id: string
    productUrl: string
    productName: string
    productImage: string
    clickCount: number
    location: string | null
    timestamp: Date
    shop: string
    _count: TryOnTrackerCountAggregateOutputType | null
    _avg: TryOnTrackerAvgAggregateOutputType | null
    _sum: TryOnTrackerSumAggregateOutputType | null
    _min: TryOnTrackerMinAggregateOutputType | null
    _max: TryOnTrackerMaxAggregateOutputType | null
  }

  type GetTryOnTrackerGroupByPayload<T extends TryOnTrackerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TryOnTrackerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TryOnTrackerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TryOnTrackerGroupByOutputType[P]>
            : GetScalarType<T[P], TryOnTrackerGroupByOutputType[P]>
        }
      >
    >


  export type TryOnTrackerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productUrl?: boolean
    productName?: boolean
    productImage?: boolean
    clickCount?: boolean
    location?: boolean
    timestamp?: boolean
    shop?: boolean
    AddToCartTracker?: boolean | TryOnTracker$AddToCartTrackerArgs<ExtArgs>
  }, ExtArgs["result"]["tryOnTracker"]>

  export type TryOnTrackerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productUrl?: boolean
    productName?: boolean
    productImage?: boolean
    clickCount?: boolean
    location?: boolean
    timestamp?: boolean
    shop?: boolean
  }, ExtArgs["result"]["tryOnTracker"]>

  export type TryOnTrackerSelectScalar = {
    id?: boolean
    productUrl?: boolean
    productName?: boolean
    productImage?: boolean
    clickCount?: boolean
    location?: boolean
    timestamp?: boolean
    shop?: boolean
  }

  export type TryOnTrackerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    AddToCartTracker?: boolean | TryOnTracker$AddToCartTrackerArgs<ExtArgs>
  }
  export type TryOnTrackerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TryOnTrackerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TryOnTracker"
    objects: {
      AddToCartTracker: Prisma.$AddToCartTrackerPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      productUrl: string
      productName: string
      productImage: string
      clickCount: number
      location: string | null
      timestamp: Date
      shop: string
    }, ExtArgs["result"]["tryOnTracker"]>
    composites: {}
  }

  type TryOnTrackerGetPayload<S extends boolean | null | undefined | TryOnTrackerDefaultArgs> = $Result.GetResult<Prisma.$TryOnTrackerPayload, S>

  type TryOnTrackerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TryOnTrackerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TryOnTrackerCountAggregateInputType | true
    }

  export interface TryOnTrackerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TryOnTracker'], meta: { name: 'TryOnTracker' } }
    /**
     * Find zero or one TryOnTracker that matches the filter.
     * @param {TryOnTrackerFindUniqueArgs} args - Arguments to find a TryOnTracker
     * @example
     * // Get one TryOnTracker
     * const tryOnTracker = await prisma.tryOnTracker.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TryOnTrackerFindUniqueArgs>(args: SelectSubset<T, TryOnTrackerFindUniqueArgs<ExtArgs>>): Prisma__TryOnTrackerClient<$Result.GetResult<Prisma.$TryOnTrackerPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TryOnTracker that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TryOnTrackerFindUniqueOrThrowArgs} args - Arguments to find a TryOnTracker
     * @example
     * // Get one TryOnTracker
     * const tryOnTracker = await prisma.tryOnTracker.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TryOnTrackerFindUniqueOrThrowArgs>(args: SelectSubset<T, TryOnTrackerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TryOnTrackerClient<$Result.GetResult<Prisma.$TryOnTrackerPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TryOnTracker that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TryOnTrackerFindFirstArgs} args - Arguments to find a TryOnTracker
     * @example
     * // Get one TryOnTracker
     * const tryOnTracker = await prisma.tryOnTracker.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TryOnTrackerFindFirstArgs>(args?: SelectSubset<T, TryOnTrackerFindFirstArgs<ExtArgs>>): Prisma__TryOnTrackerClient<$Result.GetResult<Prisma.$TryOnTrackerPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TryOnTracker that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TryOnTrackerFindFirstOrThrowArgs} args - Arguments to find a TryOnTracker
     * @example
     * // Get one TryOnTracker
     * const tryOnTracker = await prisma.tryOnTracker.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TryOnTrackerFindFirstOrThrowArgs>(args?: SelectSubset<T, TryOnTrackerFindFirstOrThrowArgs<ExtArgs>>): Prisma__TryOnTrackerClient<$Result.GetResult<Prisma.$TryOnTrackerPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TryOnTrackers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TryOnTrackerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TryOnTrackers
     * const tryOnTrackers = await prisma.tryOnTracker.findMany()
     * 
     * // Get first 10 TryOnTrackers
     * const tryOnTrackers = await prisma.tryOnTracker.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tryOnTrackerWithIdOnly = await prisma.tryOnTracker.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TryOnTrackerFindManyArgs>(args?: SelectSubset<T, TryOnTrackerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TryOnTrackerPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TryOnTracker.
     * @param {TryOnTrackerCreateArgs} args - Arguments to create a TryOnTracker.
     * @example
     * // Create one TryOnTracker
     * const TryOnTracker = await prisma.tryOnTracker.create({
     *   data: {
     *     // ... data to create a TryOnTracker
     *   }
     * })
     * 
     */
    create<T extends TryOnTrackerCreateArgs>(args: SelectSubset<T, TryOnTrackerCreateArgs<ExtArgs>>): Prisma__TryOnTrackerClient<$Result.GetResult<Prisma.$TryOnTrackerPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TryOnTrackers.
     * @param {TryOnTrackerCreateManyArgs} args - Arguments to create many TryOnTrackers.
     * @example
     * // Create many TryOnTrackers
     * const tryOnTracker = await prisma.tryOnTracker.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TryOnTrackerCreateManyArgs>(args?: SelectSubset<T, TryOnTrackerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TryOnTrackers and returns the data saved in the database.
     * @param {TryOnTrackerCreateManyAndReturnArgs} args - Arguments to create many TryOnTrackers.
     * @example
     * // Create many TryOnTrackers
     * const tryOnTracker = await prisma.tryOnTracker.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TryOnTrackers and only return the `id`
     * const tryOnTrackerWithIdOnly = await prisma.tryOnTracker.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TryOnTrackerCreateManyAndReturnArgs>(args?: SelectSubset<T, TryOnTrackerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TryOnTrackerPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TryOnTracker.
     * @param {TryOnTrackerDeleteArgs} args - Arguments to delete one TryOnTracker.
     * @example
     * // Delete one TryOnTracker
     * const TryOnTracker = await prisma.tryOnTracker.delete({
     *   where: {
     *     // ... filter to delete one TryOnTracker
     *   }
     * })
     * 
     */
    delete<T extends TryOnTrackerDeleteArgs>(args: SelectSubset<T, TryOnTrackerDeleteArgs<ExtArgs>>): Prisma__TryOnTrackerClient<$Result.GetResult<Prisma.$TryOnTrackerPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TryOnTracker.
     * @param {TryOnTrackerUpdateArgs} args - Arguments to update one TryOnTracker.
     * @example
     * // Update one TryOnTracker
     * const tryOnTracker = await prisma.tryOnTracker.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TryOnTrackerUpdateArgs>(args: SelectSubset<T, TryOnTrackerUpdateArgs<ExtArgs>>): Prisma__TryOnTrackerClient<$Result.GetResult<Prisma.$TryOnTrackerPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TryOnTrackers.
     * @param {TryOnTrackerDeleteManyArgs} args - Arguments to filter TryOnTrackers to delete.
     * @example
     * // Delete a few TryOnTrackers
     * const { count } = await prisma.tryOnTracker.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TryOnTrackerDeleteManyArgs>(args?: SelectSubset<T, TryOnTrackerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TryOnTrackers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TryOnTrackerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TryOnTrackers
     * const tryOnTracker = await prisma.tryOnTracker.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TryOnTrackerUpdateManyArgs>(args: SelectSubset<T, TryOnTrackerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TryOnTracker.
     * @param {TryOnTrackerUpsertArgs} args - Arguments to update or create a TryOnTracker.
     * @example
     * // Update or create a TryOnTracker
     * const tryOnTracker = await prisma.tryOnTracker.upsert({
     *   create: {
     *     // ... data to create a TryOnTracker
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TryOnTracker we want to update
     *   }
     * })
     */
    upsert<T extends TryOnTrackerUpsertArgs>(args: SelectSubset<T, TryOnTrackerUpsertArgs<ExtArgs>>): Prisma__TryOnTrackerClient<$Result.GetResult<Prisma.$TryOnTrackerPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TryOnTrackers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TryOnTrackerCountArgs} args - Arguments to filter TryOnTrackers to count.
     * @example
     * // Count the number of TryOnTrackers
     * const count = await prisma.tryOnTracker.count({
     *   where: {
     *     // ... the filter for the TryOnTrackers we want to count
     *   }
     * })
    **/
    count<T extends TryOnTrackerCountArgs>(
      args?: Subset<T, TryOnTrackerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TryOnTrackerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TryOnTracker.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TryOnTrackerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TryOnTrackerAggregateArgs>(args: Subset<T, TryOnTrackerAggregateArgs>): Prisma.PrismaPromise<GetTryOnTrackerAggregateType<T>>

    /**
     * Group by TryOnTracker.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TryOnTrackerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TryOnTrackerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TryOnTrackerGroupByArgs['orderBy'] }
        : { orderBy?: TryOnTrackerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TryOnTrackerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTryOnTrackerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TryOnTracker model
   */
  readonly fields: TryOnTrackerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TryOnTracker.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TryOnTrackerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    AddToCartTracker<T extends TryOnTracker$AddToCartTrackerArgs<ExtArgs> = {}>(args?: Subset<T, TryOnTracker$AddToCartTrackerArgs<ExtArgs>>): Prisma__AddToCartTrackerClient<$Result.GetResult<Prisma.$AddToCartTrackerPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TryOnTracker model
   */ 
  interface TryOnTrackerFieldRefs {
    readonly id: FieldRef<"TryOnTracker", 'String'>
    readonly productUrl: FieldRef<"TryOnTracker", 'String'>
    readonly productName: FieldRef<"TryOnTracker", 'String'>
    readonly productImage: FieldRef<"TryOnTracker", 'String'>
    readonly clickCount: FieldRef<"TryOnTracker", 'Int'>
    readonly location: FieldRef<"TryOnTracker", 'String'>
    readonly timestamp: FieldRef<"TryOnTracker", 'DateTime'>
    readonly shop: FieldRef<"TryOnTracker", 'String'>
  }
    

  // Custom InputTypes
  /**
   * TryOnTracker findUnique
   */
  export type TryOnTrackerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TryOnTracker
     */
    select?: TryOnTrackerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TryOnTrackerInclude<ExtArgs> | null
    /**
     * Filter, which TryOnTracker to fetch.
     */
    where: TryOnTrackerWhereUniqueInput
  }

  /**
   * TryOnTracker findUniqueOrThrow
   */
  export type TryOnTrackerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TryOnTracker
     */
    select?: TryOnTrackerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TryOnTrackerInclude<ExtArgs> | null
    /**
     * Filter, which TryOnTracker to fetch.
     */
    where: TryOnTrackerWhereUniqueInput
  }

  /**
   * TryOnTracker findFirst
   */
  export type TryOnTrackerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TryOnTracker
     */
    select?: TryOnTrackerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TryOnTrackerInclude<ExtArgs> | null
    /**
     * Filter, which TryOnTracker to fetch.
     */
    where?: TryOnTrackerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TryOnTrackers to fetch.
     */
    orderBy?: TryOnTrackerOrderByWithRelationInput | TryOnTrackerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TryOnTrackers.
     */
    cursor?: TryOnTrackerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TryOnTrackers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TryOnTrackers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TryOnTrackers.
     */
    distinct?: TryOnTrackerScalarFieldEnum | TryOnTrackerScalarFieldEnum[]
  }

  /**
   * TryOnTracker findFirstOrThrow
   */
  export type TryOnTrackerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TryOnTracker
     */
    select?: TryOnTrackerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TryOnTrackerInclude<ExtArgs> | null
    /**
     * Filter, which TryOnTracker to fetch.
     */
    where?: TryOnTrackerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TryOnTrackers to fetch.
     */
    orderBy?: TryOnTrackerOrderByWithRelationInput | TryOnTrackerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TryOnTrackers.
     */
    cursor?: TryOnTrackerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TryOnTrackers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TryOnTrackers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TryOnTrackers.
     */
    distinct?: TryOnTrackerScalarFieldEnum | TryOnTrackerScalarFieldEnum[]
  }

  /**
   * TryOnTracker findMany
   */
  export type TryOnTrackerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TryOnTracker
     */
    select?: TryOnTrackerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TryOnTrackerInclude<ExtArgs> | null
    /**
     * Filter, which TryOnTrackers to fetch.
     */
    where?: TryOnTrackerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TryOnTrackers to fetch.
     */
    orderBy?: TryOnTrackerOrderByWithRelationInput | TryOnTrackerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TryOnTrackers.
     */
    cursor?: TryOnTrackerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TryOnTrackers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TryOnTrackers.
     */
    skip?: number
    distinct?: TryOnTrackerScalarFieldEnum | TryOnTrackerScalarFieldEnum[]
  }

  /**
   * TryOnTracker create
   */
  export type TryOnTrackerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TryOnTracker
     */
    select?: TryOnTrackerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TryOnTrackerInclude<ExtArgs> | null
    /**
     * The data needed to create a TryOnTracker.
     */
    data: XOR<TryOnTrackerCreateInput, TryOnTrackerUncheckedCreateInput>
  }

  /**
   * TryOnTracker createMany
   */
  export type TryOnTrackerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TryOnTrackers.
     */
    data: TryOnTrackerCreateManyInput | TryOnTrackerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TryOnTracker createManyAndReturn
   */
  export type TryOnTrackerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TryOnTracker
     */
    select?: TryOnTrackerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TryOnTrackers.
     */
    data: TryOnTrackerCreateManyInput | TryOnTrackerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TryOnTracker update
   */
  export type TryOnTrackerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TryOnTracker
     */
    select?: TryOnTrackerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TryOnTrackerInclude<ExtArgs> | null
    /**
     * The data needed to update a TryOnTracker.
     */
    data: XOR<TryOnTrackerUpdateInput, TryOnTrackerUncheckedUpdateInput>
    /**
     * Choose, which TryOnTracker to update.
     */
    where: TryOnTrackerWhereUniqueInput
  }

  /**
   * TryOnTracker updateMany
   */
  export type TryOnTrackerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TryOnTrackers.
     */
    data: XOR<TryOnTrackerUpdateManyMutationInput, TryOnTrackerUncheckedUpdateManyInput>
    /**
     * Filter which TryOnTrackers to update
     */
    where?: TryOnTrackerWhereInput
  }

  /**
   * TryOnTracker upsert
   */
  export type TryOnTrackerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TryOnTracker
     */
    select?: TryOnTrackerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TryOnTrackerInclude<ExtArgs> | null
    /**
     * The filter to search for the TryOnTracker to update in case it exists.
     */
    where: TryOnTrackerWhereUniqueInput
    /**
     * In case the TryOnTracker found by the `where` argument doesn't exist, create a new TryOnTracker with this data.
     */
    create: XOR<TryOnTrackerCreateInput, TryOnTrackerUncheckedCreateInput>
    /**
     * In case the TryOnTracker was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TryOnTrackerUpdateInput, TryOnTrackerUncheckedUpdateInput>
  }

  /**
   * TryOnTracker delete
   */
  export type TryOnTrackerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TryOnTracker
     */
    select?: TryOnTrackerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TryOnTrackerInclude<ExtArgs> | null
    /**
     * Filter which TryOnTracker to delete.
     */
    where: TryOnTrackerWhereUniqueInput
  }

  /**
   * TryOnTracker deleteMany
   */
  export type TryOnTrackerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TryOnTrackers to delete
     */
    where?: TryOnTrackerWhereInput
  }

  /**
   * TryOnTracker.AddToCartTracker
   */
  export type TryOnTracker$AddToCartTrackerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AddToCartTracker
     */
    select?: AddToCartTrackerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddToCartTrackerInclude<ExtArgs> | null
    where?: AddToCartTrackerWhereInput
  }

  /**
   * TryOnTracker without action
   */
  export type TryOnTrackerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TryOnTracker
     */
    select?: TryOnTrackerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TryOnTrackerInclude<ExtArgs> | null
  }


  /**
   * Model WebhookEvent
   */

  export type AggregateWebhookEvent = {
    _count: WebhookEventCountAggregateOutputType | null
    _min: WebhookEventMinAggregateOutputType | null
    _max: WebhookEventMaxAggregateOutputType | null
  }

  export type WebhookEventMinAggregateOutputType = {
    id: string | null
    topic: string | null
    shopDomain: string | null
    success: boolean | null
    errorDetails: string | null
    createdAt: Date | null
  }

  export type WebhookEventMaxAggregateOutputType = {
    id: string | null
    topic: string | null
    shopDomain: string | null
    success: boolean | null
    errorDetails: string | null
    createdAt: Date | null
  }

  export type WebhookEventCountAggregateOutputType = {
    id: number
    topic: number
    shopDomain: number
    success: number
    errorDetails: number
    createdAt: number
    _all: number
  }


  export type WebhookEventMinAggregateInputType = {
    id?: true
    topic?: true
    shopDomain?: true
    success?: true
    errorDetails?: true
    createdAt?: true
  }

  export type WebhookEventMaxAggregateInputType = {
    id?: true
    topic?: true
    shopDomain?: true
    success?: true
    errorDetails?: true
    createdAt?: true
  }

  export type WebhookEventCountAggregateInputType = {
    id?: true
    topic?: true
    shopDomain?: true
    success?: true
    errorDetails?: true
    createdAt?: true
    _all?: true
  }

  export type WebhookEventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WebhookEvent to aggregate.
     */
    where?: WebhookEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebhookEvents to fetch.
     */
    orderBy?: WebhookEventOrderByWithRelationInput | WebhookEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WebhookEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebhookEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebhookEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WebhookEvents
    **/
    _count?: true | WebhookEventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WebhookEventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WebhookEventMaxAggregateInputType
  }

  export type GetWebhookEventAggregateType<T extends WebhookEventAggregateArgs> = {
        [P in keyof T & keyof AggregateWebhookEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWebhookEvent[P]>
      : GetScalarType<T[P], AggregateWebhookEvent[P]>
  }




  export type WebhookEventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WebhookEventWhereInput
    orderBy?: WebhookEventOrderByWithAggregationInput | WebhookEventOrderByWithAggregationInput[]
    by: WebhookEventScalarFieldEnum[] | WebhookEventScalarFieldEnum
    having?: WebhookEventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WebhookEventCountAggregateInputType | true
    _min?: WebhookEventMinAggregateInputType
    _max?: WebhookEventMaxAggregateInputType
  }

  export type WebhookEventGroupByOutputType = {
    id: string
    topic: string
    shopDomain: string
    success: boolean
    errorDetails: string | null
    createdAt: Date
    _count: WebhookEventCountAggregateOutputType | null
    _min: WebhookEventMinAggregateOutputType | null
    _max: WebhookEventMaxAggregateOutputType | null
  }

  type GetWebhookEventGroupByPayload<T extends WebhookEventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WebhookEventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WebhookEventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WebhookEventGroupByOutputType[P]>
            : GetScalarType<T[P], WebhookEventGroupByOutputType[P]>
        }
      >
    >


  export type WebhookEventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    topic?: boolean
    shopDomain?: boolean
    success?: boolean
    errorDetails?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["webhookEvent"]>

  export type WebhookEventSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    topic?: boolean
    shopDomain?: boolean
    success?: boolean
    errorDetails?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["webhookEvent"]>

  export type WebhookEventSelectScalar = {
    id?: boolean
    topic?: boolean
    shopDomain?: boolean
    success?: boolean
    errorDetails?: boolean
    createdAt?: boolean
  }


  export type $WebhookEventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WebhookEvent"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      topic: string
      shopDomain: string
      success: boolean
      errorDetails: string | null
      createdAt: Date
    }, ExtArgs["result"]["webhookEvent"]>
    composites: {}
  }

  type WebhookEventGetPayload<S extends boolean | null | undefined | WebhookEventDefaultArgs> = $Result.GetResult<Prisma.$WebhookEventPayload, S>

  type WebhookEventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WebhookEventFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WebhookEventCountAggregateInputType | true
    }

  export interface WebhookEventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WebhookEvent'], meta: { name: 'WebhookEvent' } }
    /**
     * Find zero or one WebhookEvent that matches the filter.
     * @param {WebhookEventFindUniqueArgs} args - Arguments to find a WebhookEvent
     * @example
     * // Get one WebhookEvent
     * const webhookEvent = await prisma.webhookEvent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WebhookEventFindUniqueArgs>(args: SelectSubset<T, WebhookEventFindUniqueArgs<ExtArgs>>): Prisma__WebhookEventClient<$Result.GetResult<Prisma.$WebhookEventPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one WebhookEvent that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {WebhookEventFindUniqueOrThrowArgs} args - Arguments to find a WebhookEvent
     * @example
     * // Get one WebhookEvent
     * const webhookEvent = await prisma.webhookEvent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WebhookEventFindUniqueOrThrowArgs>(args: SelectSubset<T, WebhookEventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WebhookEventClient<$Result.GetResult<Prisma.$WebhookEventPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first WebhookEvent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookEventFindFirstArgs} args - Arguments to find a WebhookEvent
     * @example
     * // Get one WebhookEvent
     * const webhookEvent = await prisma.webhookEvent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WebhookEventFindFirstArgs>(args?: SelectSubset<T, WebhookEventFindFirstArgs<ExtArgs>>): Prisma__WebhookEventClient<$Result.GetResult<Prisma.$WebhookEventPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first WebhookEvent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookEventFindFirstOrThrowArgs} args - Arguments to find a WebhookEvent
     * @example
     * // Get one WebhookEvent
     * const webhookEvent = await prisma.webhookEvent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WebhookEventFindFirstOrThrowArgs>(args?: SelectSubset<T, WebhookEventFindFirstOrThrowArgs<ExtArgs>>): Prisma__WebhookEventClient<$Result.GetResult<Prisma.$WebhookEventPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more WebhookEvents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookEventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WebhookEvents
     * const webhookEvents = await prisma.webhookEvent.findMany()
     * 
     * // Get first 10 WebhookEvents
     * const webhookEvents = await prisma.webhookEvent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const webhookEventWithIdOnly = await prisma.webhookEvent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WebhookEventFindManyArgs>(args?: SelectSubset<T, WebhookEventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WebhookEventPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a WebhookEvent.
     * @param {WebhookEventCreateArgs} args - Arguments to create a WebhookEvent.
     * @example
     * // Create one WebhookEvent
     * const WebhookEvent = await prisma.webhookEvent.create({
     *   data: {
     *     // ... data to create a WebhookEvent
     *   }
     * })
     * 
     */
    create<T extends WebhookEventCreateArgs>(args: SelectSubset<T, WebhookEventCreateArgs<ExtArgs>>): Prisma__WebhookEventClient<$Result.GetResult<Prisma.$WebhookEventPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many WebhookEvents.
     * @param {WebhookEventCreateManyArgs} args - Arguments to create many WebhookEvents.
     * @example
     * // Create many WebhookEvents
     * const webhookEvent = await prisma.webhookEvent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WebhookEventCreateManyArgs>(args?: SelectSubset<T, WebhookEventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WebhookEvents and returns the data saved in the database.
     * @param {WebhookEventCreateManyAndReturnArgs} args - Arguments to create many WebhookEvents.
     * @example
     * // Create many WebhookEvents
     * const webhookEvent = await prisma.webhookEvent.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WebhookEvents and only return the `id`
     * const webhookEventWithIdOnly = await prisma.webhookEvent.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WebhookEventCreateManyAndReturnArgs>(args?: SelectSubset<T, WebhookEventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WebhookEventPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a WebhookEvent.
     * @param {WebhookEventDeleteArgs} args - Arguments to delete one WebhookEvent.
     * @example
     * // Delete one WebhookEvent
     * const WebhookEvent = await prisma.webhookEvent.delete({
     *   where: {
     *     // ... filter to delete one WebhookEvent
     *   }
     * })
     * 
     */
    delete<T extends WebhookEventDeleteArgs>(args: SelectSubset<T, WebhookEventDeleteArgs<ExtArgs>>): Prisma__WebhookEventClient<$Result.GetResult<Prisma.$WebhookEventPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one WebhookEvent.
     * @param {WebhookEventUpdateArgs} args - Arguments to update one WebhookEvent.
     * @example
     * // Update one WebhookEvent
     * const webhookEvent = await prisma.webhookEvent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WebhookEventUpdateArgs>(args: SelectSubset<T, WebhookEventUpdateArgs<ExtArgs>>): Prisma__WebhookEventClient<$Result.GetResult<Prisma.$WebhookEventPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more WebhookEvents.
     * @param {WebhookEventDeleteManyArgs} args - Arguments to filter WebhookEvents to delete.
     * @example
     * // Delete a few WebhookEvents
     * const { count } = await prisma.webhookEvent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WebhookEventDeleteManyArgs>(args?: SelectSubset<T, WebhookEventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WebhookEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookEventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WebhookEvents
     * const webhookEvent = await prisma.webhookEvent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WebhookEventUpdateManyArgs>(args: SelectSubset<T, WebhookEventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WebhookEvent.
     * @param {WebhookEventUpsertArgs} args - Arguments to update or create a WebhookEvent.
     * @example
     * // Update or create a WebhookEvent
     * const webhookEvent = await prisma.webhookEvent.upsert({
     *   create: {
     *     // ... data to create a WebhookEvent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WebhookEvent we want to update
     *   }
     * })
     */
    upsert<T extends WebhookEventUpsertArgs>(args: SelectSubset<T, WebhookEventUpsertArgs<ExtArgs>>): Prisma__WebhookEventClient<$Result.GetResult<Prisma.$WebhookEventPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of WebhookEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookEventCountArgs} args - Arguments to filter WebhookEvents to count.
     * @example
     * // Count the number of WebhookEvents
     * const count = await prisma.webhookEvent.count({
     *   where: {
     *     // ... the filter for the WebhookEvents we want to count
     *   }
     * })
    **/
    count<T extends WebhookEventCountArgs>(
      args?: Subset<T, WebhookEventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WebhookEventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WebhookEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookEventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WebhookEventAggregateArgs>(args: Subset<T, WebhookEventAggregateArgs>): Prisma.PrismaPromise<GetWebhookEventAggregateType<T>>

    /**
     * Group by WebhookEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookEventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WebhookEventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WebhookEventGroupByArgs['orderBy'] }
        : { orderBy?: WebhookEventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WebhookEventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWebhookEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WebhookEvent model
   */
  readonly fields: WebhookEventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WebhookEvent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WebhookEventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WebhookEvent model
   */ 
  interface WebhookEventFieldRefs {
    readonly id: FieldRef<"WebhookEvent", 'String'>
    readonly topic: FieldRef<"WebhookEvent", 'String'>
    readonly shopDomain: FieldRef<"WebhookEvent", 'String'>
    readonly success: FieldRef<"WebhookEvent", 'Boolean'>
    readonly errorDetails: FieldRef<"WebhookEvent", 'String'>
    readonly createdAt: FieldRef<"WebhookEvent", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WebhookEvent findUnique
   */
  export type WebhookEventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookEvent
     */
    select?: WebhookEventSelect<ExtArgs> | null
    /**
     * Filter, which WebhookEvent to fetch.
     */
    where: WebhookEventWhereUniqueInput
  }

  /**
   * WebhookEvent findUniqueOrThrow
   */
  export type WebhookEventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookEvent
     */
    select?: WebhookEventSelect<ExtArgs> | null
    /**
     * Filter, which WebhookEvent to fetch.
     */
    where: WebhookEventWhereUniqueInput
  }

  /**
   * WebhookEvent findFirst
   */
  export type WebhookEventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookEvent
     */
    select?: WebhookEventSelect<ExtArgs> | null
    /**
     * Filter, which WebhookEvent to fetch.
     */
    where?: WebhookEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebhookEvents to fetch.
     */
    orderBy?: WebhookEventOrderByWithRelationInput | WebhookEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WebhookEvents.
     */
    cursor?: WebhookEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebhookEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebhookEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WebhookEvents.
     */
    distinct?: WebhookEventScalarFieldEnum | WebhookEventScalarFieldEnum[]
  }

  /**
   * WebhookEvent findFirstOrThrow
   */
  export type WebhookEventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookEvent
     */
    select?: WebhookEventSelect<ExtArgs> | null
    /**
     * Filter, which WebhookEvent to fetch.
     */
    where?: WebhookEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebhookEvents to fetch.
     */
    orderBy?: WebhookEventOrderByWithRelationInput | WebhookEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WebhookEvents.
     */
    cursor?: WebhookEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebhookEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebhookEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WebhookEvents.
     */
    distinct?: WebhookEventScalarFieldEnum | WebhookEventScalarFieldEnum[]
  }

  /**
   * WebhookEvent findMany
   */
  export type WebhookEventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookEvent
     */
    select?: WebhookEventSelect<ExtArgs> | null
    /**
     * Filter, which WebhookEvents to fetch.
     */
    where?: WebhookEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebhookEvents to fetch.
     */
    orderBy?: WebhookEventOrderByWithRelationInput | WebhookEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WebhookEvents.
     */
    cursor?: WebhookEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebhookEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebhookEvents.
     */
    skip?: number
    distinct?: WebhookEventScalarFieldEnum | WebhookEventScalarFieldEnum[]
  }

  /**
   * WebhookEvent create
   */
  export type WebhookEventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookEvent
     */
    select?: WebhookEventSelect<ExtArgs> | null
    /**
     * The data needed to create a WebhookEvent.
     */
    data: XOR<WebhookEventCreateInput, WebhookEventUncheckedCreateInput>
  }

  /**
   * WebhookEvent createMany
   */
  export type WebhookEventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WebhookEvents.
     */
    data: WebhookEventCreateManyInput | WebhookEventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WebhookEvent createManyAndReturn
   */
  export type WebhookEventCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookEvent
     */
    select?: WebhookEventSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many WebhookEvents.
     */
    data: WebhookEventCreateManyInput | WebhookEventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WebhookEvent update
   */
  export type WebhookEventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookEvent
     */
    select?: WebhookEventSelect<ExtArgs> | null
    /**
     * The data needed to update a WebhookEvent.
     */
    data: XOR<WebhookEventUpdateInput, WebhookEventUncheckedUpdateInput>
    /**
     * Choose, which WebhookEvent to update.
     */
    where: WebhookEventWhereUniqueInput
  }

  /**
   * WebhookEvent updateMany
   */
  export type WebhookEventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WebhookEvents.
     */
    data: XOR<WebhookEventUpdateManyMutationInput, WebhookEventUncheckedUpdateManyInput>
    /**
     * Filter which WebhookEvents to update
     */
    where?: WebhookEventWhereInput
  }

  /**
   * WebhookEvent upsert
   */
  export type WebhookEventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookEvent
     */
    select?: WebhookEventSelect<ExtArgs> | null
    /**
     * The filter to search for the WebhookEvent to update in case it exists.
     */
    where: WebhookEventWhereUniqueInput
    /**
     * In case the WebhookEvent found by the `where` argument doesn't exist, create a new WebhookEvent with this data.
     */
    create: XOR<WebhookEventCreateInput, WebhookEventUncheckedCreateInput>
    /**
     * In case the WebhookEvent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WebhookEventUpdateInput, WebhookEventUncheckedUpdateInput>
  }

  /**
   * WebhookEvent delete
   */
  export type WebhookEventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookEvent
     */
    select?: WebhookEventSelect<ExtArgs> | null
    /**
     * Filter which WebhookEvent to delete.
     */
    where: WebhookEventWhereUniqueInput
  }

  /**
   * WebhookEvent deleteMany
   */
  export type WebhookEventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WebhookEvents to delete
     */
    where?: WebhookEventWhereInput
  }

  /**
   * WebhookEvent without action
   */
  export type WebhookEventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookEvent
     */
    select?: WebhookEventSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AddToCartTrackerScalarFieldEnum: {
    id: 'id',
    tryOnId: 'tryOnId',
    productUrl: 'productUrl',
    productName: 'productName',
    productImage: 'productImage',
    location: 'location',
    timestamp: 'timestamp',
    shop: 'shop'
  };

  export type AddToCartTrackerScalarFieldEnum = (typeof AddToCartTrackerScalarFieldEnum)[keyof typeof AddToCartTrackerScalarFieldEnum]


  export const CreditUsageScalarFieldEnum: {
    id: 'id',
    shop: 'shop',
    totalCredits: 'totalCredits',
    usedCredits: 'usedCredits',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CreditUsageScalarFieldEnum = (typeof CreditUsageScalarFieldEnum)[keyof typeof CreditUsageScalarFieldEnum]


  export const CustomerDataScalarFieldEnum: {
    id: 'id',
    shopDomain: 'shopDomain',
    shopifyCustomerId: 'shopifyCustomerId',
    customerData: 'customerData',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CustomerDataScalarFieldEnum = (typeof CustomerDataScalarFieldEnum)[keyof typeof CustomerDataScalarFieldEnum]


  export const DataRequestScalarFieldEnum: {
    id: 'id',
    requestId: 'requestId',
    shopDomain: 'shopDomain',
    shopifyCustomerId: 'shopifyCustomerId',
    requestData: 'requestData',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DataRequestScalarFieldEnum = (typeof DataRequestScalarFieldEnum)[keyof typeof DataRequestScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    shop: 'shop',
    state: 'state',
    isOnline: 'isOnline',
    scope: 'scope',
    expires: 'expires',
    accessToken: 'accessToken',
    userId: 'userId',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    accountOwner: 'accountOwner',
    locale: 'locale',
    collaborator: 'collaborator',
    emailVerified: 'emailVerified'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const ShopScalarFieldEnum: {
    id: 'id',
    shopDomain: 'shopDomain',
    accessToken: 'accessToken',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ShopScalarFieldEnum = (typeof ShopScalarFieldEnum)[keyof typeof ShopScalarFieldEnum]


  export const ShopSubscriptionScalarFieldEnum: {
    id: 'id',
    shopDomain: 'shopDomain',
    subscriptionId: 'subscriptionId',
    status: 'status',
    planPrice: 'planPrice',
    trialDays: 'trialDays',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    creditCap: 'creditCap',
    pocEmail: 'pocEmail',
    pocName: 'pocName',
    pocPhoneNumber: 'pocPhoneNumber',
    shopName: 'shopName'
  };

  export type ShopSubscriptionScalarFieldEnum = (typeof ShopSubscriptionScalarFieldEnum)[keyof typeof ShopSubscriptionScalarFieldEnum]


  export const TryOnTrackerScalarFieldEnum: {
    id: 'id',
    productUrl: 'productUrl',
    productName: 'productName',
    productImage: 'productImage',
    clickCount: 'clickCount',
    location: 'location',
    timestamp: 'timestamp',
    shop: 'shop'
  };

  export type TryOnTrackerScalarFieldEnum = (typeof TryOnTrackerScalarFieldEnum)[keyof typeof TryOnTrackerScalarFieldEnum]


  export const WebhookEventScalarFieldEnum: {
    id: 'id',
    topic: 'topic',
    shopDomain: 'shopDomain',
    success: 'success',
    errorDetails: 'errorDetails',
    createdAt: 'createdAt'
  };

  export type WebhookEventScalarFieldEnum = (typeof WebhookEventScalarFieldEnum)[keyof typeof WebhookEventScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'BigInt'
   */
  export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    


  /**
   * Reference to a field of type 'BigInt[]'
   */
  export type ListBigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type AddToCartTrackerWhereInput = {
    AND?: AddToCartTrackerWhereInput | AddToCartTrackerWhereInput[]
    OR?: AddToCartTrackerWhereInput[]
    NOT?: AddToCartTrackerWhereInput | AddToCartTrackerWhereInput[]
    id?: StringFilter<"AddToCartTracker"> | string
    tryOnId?: StringFilter<"AddToCartTracker"> | string
    productUrl?: StringFilter<"AddToCartTracker"> | string
    productName?: StringFilter<"AddToCartTracker"> | string
    productImage?: StringFilter<"AddToCartTracker"> | string
    location?: StringNullableFilter<"AddToCartTracker"> | string | null
    timestamp?: DateTimeFilter<"AddToCartTracker"> | Date | string
    shop?: StringFilter<"AddToCartTracker"> | string
    TryOnTracker?: XOR<TryOnTrackerRelationFilter, TryOnTrackerWhereInput>
  }

  export type AddToCartTrackerOrderByWithRelationInput = {
    id?: SortOrder
    tryOnId?: SortOrder
    productUrl?: SortOrder
    productName?: SortOrder
    productImage?: SortOrder
    location?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    shop?: SortOrder
    TryOnTracker?: TryOnTrackerOrderByWithRelationInput
  }

  export type AddToCartTrackerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    tryOnId?: string
    AND?: AddToCartTrackerWhereInput | AddToCartTrackerWhereInput[]
    OR?: AddToCartTrackerWhereInput[]
    NOT?: AddToCartTrackerWhereInput | AddToCartTrackerWhereInput[]
    productUrl?: StringFilter<"AddToCartTracker"> | string
    productName?: StringFilter<"AddToCartTracker"> | string
    productImage?: StringFilter<"AddToCartTracker"> | string
    location?: StringNullableFilter<"AddToCartTracker"> | string | null
    timestamp?: DateTimeFilter<"AddToCartTracker"> | Date | string
    shop?: StringFilter<"AddToCartTracker"> | string
    TryOnTracker?: XOR<TryOnTrackerRelationFilter, TryOnTrackerWhereInput>
  }, "id" | "tryOnId">

  export type AddToCartTrackerOrderByWithAggregationInput = {
    id?: SortOrder
    tryOnId?: SortOrder
    productUrl?: SortOrder
    productName?: SortOrder
    productImage?: SortOrder
    location?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    shop?: SortOrder
    _count?: AddToCartTrackerCountOrderByAggregateInput
    _max?: AddToCartTrackerMaxOrderByAggregateInput
    _min?: AddToCartTrackerMinOrderByAggregateInput
  }

  export type AddToCartTrackerScalarWhereWithAggregatesInput = {
    AND?: AddToCartTrackerScalarWhereWithAggregatesInput | AddToCartTrackerScalarWhereWithAggregatesInput[]
    OR?: AddToCartTrackerScalarWhereWithAggregatesInput[]
    NOT?: AddToCartTrackerScalarWhereWithAggregatesInput | AddToCartTrackerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AddToCartTracker"> | string
    tryOnId?: StringWithAggregatesFilter<"AddToCartTracker"> | string
    productUrl?: StringWithAggregatesFilter<"AddToCartTracker"> | string
    productName?: StringWithAggregatesFilter<"AddToCartTracker"> | string
    productImage?: StringWithAggregatesFilter<"AddToCartTracker"> | string
    location?: StringNullableWithAggregatesFilter<"AddToCartTracker"> | string | null
    timestamp?: DateTimeWithAggregatesFilter<"AddToCartTracker"> | Date | string
    shop?: StringWithAggregatesFilter<"AddToCartTracker"> | string
  }

  export type CreditUsageWhereInput = {
    AND?: CreditUsageWhereInput | CreditUsageWhereInput[]
    OR?: CreditUsageWhereInput[]
    NOT?: CreditUsageWhereInput | CreditUsageWhereInput[]
    id?: StringFilter<"CreditUsage"> | string
    shop?: StringFilter<"CreditUsage"> | string
    totalCredits?: IntFilter<"CreditUsage"> | number
    usedCredits?: IntFilter<"CreditUsage"> | number
    createdAt?: DateTimeFilter<"CreditUsage"> | Date | string
    updatedAt?: DateTimeFilter<"CreditUsage"> | Date | string
    ShopSubscription?: XOR<ShopSubscriptionRelationFilter, ShopSubscriptionWhereInput>
  }

  export type CreditUsageOrderByWithRelationInput = {
    id?: SortOrder
    shop?: SortOrder
    totalCredits?: SortOrder
    usedCredits?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ShopSubscription?: ShopSubscriptionOrderByWithRelationInput
  }

  export type CreditUsageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    shop?: string
    AND?: CreditUsageWhereInput | CreditUsageWhereInput[]
    OR?: CreditUsageWhereInput[]
    NOT?: CreditUsageWhereInput | CreditUsageWhereInput[]
    totalCredits?: IntFilter<"CreditUsage"> | number
    usedCredits?: IntFilter<"CreditUsage"> | number
    createdAt?: DateTimeFilter<"CreditUsage"> | Date | string
    updatedAt?: DateTimeFilter<"CreditUsage"> | Date | string
    ShopSubscription?: XOR<ShopSubscriptionRelationFilter, ShopSubscriptionWhereInput>
  }, "id" | "shop">

  export type CreditUsageOrderByWithAggregationInput = {
    id?: SortOrder
    shop?: SortOrder
    totalCredits?: SortOrder
    usedCredits?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CreditUsageCountOrderByAggregateInput
    _avg?: CreditUsageAvgOrderByAggregateInput
    _max?: CreditUsageMaxOrderByAggregateInput
    _min?: CreditUsageMinOrderByAggregateInput
    _sum?: CreditUsageSumOrderByAggregateInput
  }

  export type CreditUsageScalarWhereWithAggregatesInput = {
    AND?: CreditUsageScalarWhereWithAggregatesInput | CreditUsageScalarWhereWithAggregatesInput[]
    OR?: CreditUsageScalarWhereWithAggregatesInput[]
    NOT?: CreditUsageScalarWhereWithAggregatesInput | CreditUsageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CreditUsage"> | string
    shop?: StringWithAggregatesFilter<"CreditUsage"> | string
    totalCredits?: IntWithAggregatesFilter<"CreditUsage"> | number
    usedCredits?: IntWithAggregatesFilter<"CreditUsage"> | number
    createdAt?: DateTimeWithAggregatesFilter<"CreditUsage"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CreditUsage"> | Date | string
  }

  export type CustomerDataWhereInput = {
    AND?: CustomerDataWhereInput | CustomerDataWhereInput[]
    OR?: CustomerDataWhereInput[]
    NOT?: CustomerDataWhereInput | CustomerDataWhereInput[]
    id?: StringFilter<"CustomerData"> | string
    shopDomain?: StringFilter<"CustomerData"> | string
    shopifyCustomerId?: StringFilter<"CustomerData"> | string
    customerData?: JsonNullableFilter<"CustomerData">
    createdAt?: DateTimeFilter<"CustomerData"> | Date | string
    updatedAt?: DateTimeFilter<"CustomerData"> | Date | string
    Shop?: XOR<ShopRelationFilter, ShopWhereInput>
  }

  export type CustomerDataOrderByWithRelationInput = {
    id?: SortOrder
    shopDomain?: SortOrder
    shopifyCustomerId?: SortOrder
    customerData?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Shop?: ShopOrderByWithRelationInput
  }

  export type CustomerDataWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CustomerDataWhereInput | CustomerDataWhereInput[]
    OR?: CustomerDataWhereInput[]
    NOT?: CustomerDataWhereInput | CustomerDataWhereInput[]
    shopDomain?: StringFilter<"CustomerData"> | string
    shopifyCustomerId?: StringFilter<"CustomerData"> | string
    customerData?: JsonNullableFilter<"CustomerData">
    createdAt?: DateTimeFilter<"CustomerData"> | Date | string
    updatedAt?: DateTimeFilter<"CustomerData"> | Date | string
    Shop?: XOR<ShopRelationFilter, ShopWhereInput>
  }, "id">

  export type CustomerDataOrderByWithAggregationInput = {
    id?: SortOrder
    shopDomain?: SortOrder
    shopifyCustomerId?: SortOrder
    customerData?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CustomerDataCountOrderByAggregateInput
    _max?: CustomerDataMaxOrderByAggregateInput
    _min?: CustomerDataMinOrderByAggregateInput
  }

  export type CustomerDataScalarWhereWithAggregatesInput = {
    AND?: CustomerDataScalarWhereWithAggregatesInput | CustomerDataScalarWhereWithAggregatesInput[]
    OR?: CustomerDataScalarWhereWithAggregatesInput[]
    NOT?: CustomerDataScalarWhereWithAggregatesInput | CustomerDataScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CustomerData"> | string
    shopDomain?: StringWithAggregatesFilter<"CustomerData"> | string
    shopifyCustomerId?: StringWithAggregatesFilter<"CustomerData"> | string
    customerData?: JsonNullableWithAggregatesFilter<"CustomerData">
    createdAt?: DateTimeWithAggregatesFilter<"CustomerData"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CustomerData"> | Date | string
  }

  export type DataRequestWhereInput = {
    AND?: DataRequestWhereInput | DataRequestWhereInput[]
    OR?: DataRequestWhereInput[]
    NOT?: DataRequestWhereInput | DataRequestWhereInput[]
    id?: StringFilter<"DataRequest"> | string
    requestId?: StringFilter<"DataRequest"> | string
    shopDomain?: StringFilter<"DataRequest"> | string
    shopifyCustomerId?: StringFilter<"DataRequest"> | string
    requestData?: JsonFilter<"DataRequest">
    status?: StringFilter<"DataRequest"> | string
    createdAt?: DateTimeFilter<"DataRequest"> | Date | string
    updatedAt?: DateTimeFilter<"DataRequest"> | Date | string
    Shop?: XOR<ShopRelationFilter, ShopWhereInput>
  }

  export type DataRequestOrderByWithRelationInput = {
    id?: SortOrder
    requestId?: SortOrder
    shopDomain?: SortOrder
    shopifyCustomerId?: SortOrder
    requestData?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Shop?: ShopOrderByWithRelationInput
  }

  export type DataRequestWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    requestId?: string
    AND?: DataRequestWhereInput | DataRequestWhereInput[]
    OR?: DataRequestWhereInput[]
    NOT?: DataRequestWhereInput | DataRequestWhereInput[]
    shopDomain?: StringFilter<"DataRequest"> | string
    shopifyCustomerId?: StringFilter<"DataRequest"> | string
    requestData?: JsonFilter<"DataRequest">
    status?: StringFilter<"DataRequest"> | string
    createdAt?: DateTimeFilter<"DataRequest"> | Date | string
    updatedAt?: DateTimeFilter<"DataRequest"> | Date | string
    Shop?: XOR<ShopRelationFilter, ShopWhereInput>
  }, "id" | "requestId">

  export type DataRequestOrderByWithAggregationInput = {
    id?: SortOrder
    requestId?: SortOrder
    shopDomain?: SortOrder
    shopifyCustomerId?: SortOrder
    requestData?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DataRequestCountOrderByAggregateInput
    _max?: DataRequestMaxOrderByAggregateInput
    _min?: DataRequestMinOrderByAggregateInput
  }

  export type DataRequestScalarWhereWithAggregatesInput = {
    AND?: DataRequestScalarWhereWithAggregatesInput | DataRequestScalarWhereWithAggregatesInput[]
    OR?: DataRequestScalarWhereWithAggregatesInput[]
    NOT?: DataRequestScalarWhereWithAggregatesInput | DataRequestScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DataRequest"> | string
    requestId?: StringWithAggregatesFilter<"DataRequest"> | string
    shopDomain?: StringWithAggregatesFilter<"DataRequest"> | string
    shopifyCustomerId?: StringWithAggregatesFilter<"DataRequest"> | string
    requestData?: JsonWithAggregatesFilter<"DataRequest">
    status?: StringWithAggregatesFilter<"DataRequest"> | string
    createdAt?: DateTimeWithAggregatesFilter<"DataRequest"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DataRequest"> | Date | string
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: StringFilter<"Session"> | string
    shop?: StringFilter<"Session"> | string
    state?: StringFilter<"Session"> | string
    isOnline?: BoolFilter<"Session"> | boolean
    scope?: StringNullableFilter<"Session"> | string | null
    expires?: DateTimeNullableFilter<"Session"> | Date | string | null
    accessToken?: StringFilter<"Session"> | string
    userId?: BigIntNullableFilter<"Session"> | bigint | number | null
    firstName?: StringNullableFilter<"Session"> | string | null
    lastName?: StringNullableFilter<"Session"> | string | null
    email?: StringNullableFilter<"Session"> | string | null
    accountOwner?: BoolFilter<"Session"> | boolean
    locale?: StringNullableFilter<"Session"> | string | null
    collaborator?: BoolNullableFilter<"Session"> | boolean | null
    emailVerified?: BoolNullableFilter<"Session"> | boolean | null
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    shop?: SortOrder
    state?: SortOrder
    isOnline?: SortOrder
    scope?: SortOrderInput | SortOrder
    expires?: SortOrderInput | SortOrder
    accessToken?: SortOrder
    userId?: SortOrderInput | SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    accountOwner?: SortOrder
    locale?: SortOrderInput | SortOrder
    collaborator?: SortOrderInput | SortOrder
    emailVerified?: SortOrderInput | SortOrder
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    shop?: StringFilter<"Session"> | string
    state?: StringFilter<"Session"> | string
    isOnline?: BoolFilter<"Session"> | boolean
    scope?: StringNullableFilter<"Session"> | string | null
    expires?: DateTimeNullableFilter<"Session"> | Date | string | null
    accessToken?: StringFilter<"Session"> | string
    userId?: BigIntNullableFilter<"Session"> | bigint | number | null
    firstName?: StringNullableFilter<"Session"> | string | null
    lastName?: StringNullableFilter<"Session"> | string | null
    email?: StringNullableFilter<"Session"> | string | null
    accountOwner?: BoolFilter<"Session"> | boolean
    locale?: StringNullableFilter<"Session"> | string | null
    collaborator?: BoolNullableFilter<"Session"> | boolean | null
    emailVerified?: BoolNullableFilter<"Session"> | boolean | null
  }, "id">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    shop?: SortOrder
    state?: SortOrder
    isOnline?: SortOrder
    scope?: SortOrderInput | SortOrder
    expires?: SortOrderInput | SortOrder
    accessToken?: SortOrder
    userId?: SortOrderInput | SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    accountOwner?: SortOrder
    locale?: SortOrderInput | SortOrder
    collaborator?: SortOrderInput | SortOrder
    emailVerified?: SortOrderInput | SortOrder
    _count?: SessionCountOrderByAggregateInput
    _avg?: SessionAvgOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
    _sum?: SessionSumOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Session"> | string
    shop?: StringWithAggregatesFilter<"Session"> | string
    state?: StringWithAggregatesFilter<"Session"> | string
    isOnline?: BoolWithAggregatesFilter<"Session"> | boolean
    scope?: StringNullableWithAggregatesFilter<"Session"> | string | null
    expires?: DateTimeNullableWithAggregatesFilter<"Session"> | Date | string | null
    accessToken?: StringWithAggregatesFilter<"Session"> | string
    userId?: BigIntNullableWithAggregatesFilter<"Session"> | bigint | number | null
    firstName?: StringNullableWithAggregatesFilter<"Session"> | string | null
    lastName?: StringNullableWithAggregatesFilter<"Session"> | string | null
    email?: StringNullableWithAggregatesFilter<"Session"> | string | null
    accountOwner?: BoolWithAggregatesFilter<"Session"> | boolean
    locale?: StringNullableWithAggregatesFilter<"Session"> | string | null
    collaborator?: BoolNullableWithAggregatesFilter<"Session"> | boolean | null
    emailVerified?: BoolNullableWithAggregatesFilter<"Session"> | boolean | null
  }

  export type ShopWhereInput = {
    AND?: ShopWhereInput | ShopWhereInput[]
    OR?: ShopWhereInput[]
    NOT?: ShopWhereInput | ShopWhereInput[]
    id?: StringFilter<"Shop"> | string
    shopDomain?: StringFilter<"Shop"> | string
    accessToken?: StringNullableFilter<"Shop"> | string | null
    createdAt?: DateTimeFilter<"Shop"> | Date | string
    updatedAt?: DateTimeFilter<"Shop"> | Date | string
    CustomerData?: CustomerDataListRelationFilter
    DataRequest?: DataRequestListRelationFilter
  }

  export type ShopOrderByWithRelationInput = {
    id?: SortOrder
    shopDomain?: SortOrder
    accessToken?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    CustomerData?: CustomerDataOrderByRelationAggregateInput
    DataRequest?: DataRequestOrderByRelationAggregateInput
  }

  export type ShopWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    shopDomain?: string
    AND?: ShopWhereInput | ShopWhereInput[]
    OR?: ShopWhereInput[]
    NOT?: ShopWhereInput | ShopWhereInput[]
    accessToken?: StringNullableFilter<"Shop"> | string | null
    createdAt?: DateTimeFilter<"Shop"> | Date | string
    updatedAt?: DateTimeFilter<"Shop"> | Date | string
    CustomerData?: CustomerDataListRelationFilter
    DataRequest?: DataRequestListRelationFilter
  }, "id" | "shopDomain">

  export type ShopOrderByWithAggregationInput = {
    id?: SortOrder
    shopDomain?: SortOrder
    accessToken?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ShopCountOrderByAggregateInput
    _max?: ShopMaxOrderByAggregateInput
    _min?: ShopMinOrderByAggregateInput
  }

  export type ShopScalarWhereWithAggregatesInput = {
    AND?: ShopScalarWhereWithAggregatesInput | ShopScalarWhereWithAggregatesInput[]
    OR?: ShopScalarWhereWithAggregatesInput[]
    NOT?: ShopScalarWhereWithAggregatesInput | ShopScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Shop"> | string
    shopDomain?: StringWithAggregatesFilter<"Shop"> | string
    accessToken?: StringNullableWithAggregatesFilter<"Shop"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Shop"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Shop"> | Date | string
  }

  export type ShopSubscriptionWhereInput = {
    AND?: ShopSubscriptionWhereInput | ShopSubscriptionWhereInput[]
    OR?: ShopSubscriptionWhereInput[]
    NOT?: ShopSubscriptionWhereInput | ShopSubscriptionWhereInput[]
    id?: StringFilter<"ShopSubscription"> | string
    shopDomain?: StringFilter<"ShopSubscription"> | string
    subscriptionId?: StringNullableFilter<"ShopSubscription"> | string | null
    status?: StringFilter<"ShopSubscription"> | string
    planPrice?: IntFilter<"ShopSubscription"> | number
    trialDays?: IntFilter<"ShopSubscription"> | number
    createdAt?: DateTimeFilter<"ShopSubscription"> | Date | string
    updatedAt?: DateTimeFilter<"ShopSubscription"> | Date | string
    creditCap?: IntFilter<"ShopSubscription"> | number
    pocEmail?: StringNullableFilter<"ShopSubscription"> | string | null
    pocName?: StringNullableFilter<"ShopSubscription"> | string | null
    pocPhoneNumber?: StringNullableFilter<"ShopSubscription"> | string | null
    shopName?: StringNullableFilter<"ShopSubscription"> | string | null
    CreditUsage?: XOR<CreditUsageNullableRelationFilter, CreditUsageWhereInput> | null
  }

  export type ShopSubscriptionOrderByWithRelationInput = {
    id?: SortOrder
    shopDomain?: SortOrder
    subscriptionId?: SortOrderInput | SortOrder
    status?: SortOrder
    planPrice?: SortOrder
    trialDays?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    creditCap?: SortOrder
    pocEmail?: SortOrderInput | SortOrder
    pocName?: SortOrderInput | SortOrder
    pocPhoneNumber?: SortOrderInput | SortOrder
    shopName?: SortOrderInput | SortOrder
    CreditUsage?: CreditUsageOrderByWithRelationInput
  }

  export type ShopSubscriptionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    shopDomain?: string
    AND?: ShopSubscriptionWhereInput | ShopSubscriptionWhereInput[]
    OR?: ShopSubscriptionWhereInput[]
    NOT?: ShopSubscriptionWhereInput | ShopSubscriptionWhereInput[]
    subscriptionId?: StringNullableFilter<"ShopSubscription"> | string | null
    status?: StringFilter<"ShopSubscription"> | string
    planPrice?: IntFilter<"ShopSubscription"> | number
    trialDays?: IntFilter<"ShopSubscription"> | number
    createdAt?: DateTimeFilter<"ShopSubscription"> | Date | string
    updatedAt?: DateTimeFilter<"ShopSubscription"> | Date | string
    creditCap?: IntFilter<"ShopSubscription"> | number
    pocEmail?: StringNullableFilter<"ShopSubscription"> | string | null
    pocName?: StringNullableFilter<"ShopSubscription"> | string | null
    pocPhoneNumber?: StringNullableFilter<"ShopSubscription"> | string | null
    shopName?: StringNullableFilter<"ShopSubscription"> | string | null
    CreditUsage?: XOR<CreditUsageNullableRelationFilter, CreditUsageWhereInput> | null
  }, "id" | "shopDomain">

  export type ShopSubscriptionOrderByWithAggregationInput = {
    id?: SortOrder
    shopDomain?: SortOrder
    subscriptionId?: SortOrderInput | SortOrder
    status?: SortOrder
    planPrice?: SortOrder
    trialDays?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    creditCap?: SortOrder
    pocEmail?: SortOrderInput | SortOrder
    pocName?: SortOrderInput | SortOrder
    pocPhoneNumber?: SortOrderInput | SortOrder
    shopName?: SortOrderInput | SortOrder
    _count?: ShopSubscriptionCountOrderByAggregateInput
    _avg?: ShopSubscriptionAvgOrderByAggregateInput
    _max?: ShopSubscriptionMaxOrderByAggregateInput
    _min?: ShopSubscriptionMinOrderByAggregateInput
    _sum?: ShopSubscriptionSumOrderByAggregateInput
  }

  export type ShopSubscriptionScalarWhereWithAggregatesInput = {
    AND?: ShopSubscriptionScalarWhereWithAggregatesInput | ShopSubscriptionScalarWhereWithAggregatesInput[]
    OR?: ShopSubscriptionScalarWhereWithAggregatesInput[]
    NOT?: ShopSubscriptionScalarWhereWithAggregatesInput | ShopSubscriptionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ShopSubscription"> | string
    shopDomain?: StringWithAggregatesFilter<"ShopSubscription"> | string
    subscriptionId?: StringNullableWithAggregatesFilter<"ShopSubscription"> | string | null
    status?: StringWithAggregatesFilter<"ShopSubscription"> | string
    planPrice?: IntWithAggregatesFilter<"ShopSubscription"> | number
    trialDays?: IntWithAggregatesFilter<"ShopSubscription"> | number
    createdAt?: DateTimeWithAggregatesFilter<"ShopSubscription"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ShopSubscription"> | Date | string
    creditCap?: IntWithAggregatesFilter<"ShopSubscription"> | number
    pocEmail?: StringNullableWithAggregatesFilter<"ShopSubscription"> | string | null
    pocName?: StringNullableWithAggregatesFilter<"ShopSubscription"> | string | null
    pocPhoneNumber?: StringNullableWithAggregatesFilter<"ShopSubscription"> | string | null
    shopName?: StringNullableWithAggregatesFilter<"ShopSubscription"> | string | null
  }

  export type TryOnTrackerWhereInput = {
    AND?: TryOnTrackerWhereInput | TryOnTrackerWhereInput[]
    OR?: TryOnTrackerWhereInput[]
    NOT?: TryOnTrackerWhereInput | TryOnTrackerWhereInput[]
    id?: StringFilter<"TryOnTracker"> | string
    productUrl?: StringFilter<"TryOnTracker"> | string
    productName?: StringFilter<"TryOnTracker"> | string
    productImage?: StringFilter<"TryOnTracker"> | string
    clickCount?: IntFilter<"TryOnTracker"> | number
    location?: StringNullableFilter<"TryOnTracker"> | string | null
    timestamp?: DateTimeFilter<"TryOnTracker"> | Date | string
    shop?: StringFilter<"TryOnTracker"> | string
    AddToCartTracker?: XOR<AddToCartTrackerNullableRelationFilter, AddToCartTrackerWhereInput> | null
  }

  export type TryOnTrackerOrderByWithRelationInput = {
    id?: SortOrder
    productUrl?: SortOrder
    productName?: SortOrder
    productImage?: SortOrder
    clickCount?: SortOrder
    location?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    shop?: SortOrder
    AddToCartTracker?: AddToCartTrackerOrderByWithRelationInput
  }

  export type TryOnTrackerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TryOnTrackerWhereInput | TryOnTrackerWhereInput[]
    OR?: TryOnTrackerWhereInput[]
    NOT?: TryOnTrackerWhereInput | TryOnTrackerWhereInput[]
    productUrl?: StringFilter<"TryOnTracker"> | string
    productName?: StringFilter<"TryOnTracker"> | string
    productImage?: StringFilter<"TryOnTracker"> | string
    clickCount?: IntFilter<"TryOnTracker"> | number
    location?: StringNullableFilter<"TryOnTracker"> | string | null
    timestamp?: DateTimeFilter<"TryOnTracker"> | Date | string
    shop?: StringFilter<"TryOnTracker"> | string
    AddToCartTracker?: XOR<AddToCartTrackerNullableRelationFilter, AddToCartTrackerWhereInput> | null
  }, "id">

  export type TryOnTrackerOrderByWithAggregationInput = {
    id?: SortOrder
    productUrl?: SortOrder
    productName?: SortOrder
    productImage?: SortOrder
    clickCount?: SortOrder
    location?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    shop?: SortOrder
    _count?: TryOnTrackerCountOrderByAggregateInput
    _avg?: TryOnTrackerAvgOrderByAggregateInput
    _max?: TryOnTrackerMaxOrderByAggregateInput
    _min?: TryOnTrackerMinOrderByAggregateInput
    _sum?: TryOnTrackerSumOrderByAggregateInput
  }

  export type TryOnTrackerScalarWhereWithAggregatesInput = {
    AND?: TryOnTrackerScalarWhereWithAggregatesInput | TryOnTrackerScalarWhereWithAggregatesInput[]
    OR?: TryOnTrackerScalarWhereWithAggregatesInput[]
    NOT?: TryOnTrackerScalarWhereWithAggregatesInput | TryOnTrackerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TryOnTracker"> | string
    productUrl?: StringWithAggregatesFilter<"TryOnTracker"> | string
    productName?: StringWithAggregatesFilter<"TryOnTracker"> | string
    productImage?: StringWithAggregatesFilter<"TryOnTracker"> | string
    clickCount?: IntWithAggregatesFilter<"TryOnTracker"> | number
    location?: StringNullableWithAggregatesFilter<"TryOnTracker"> | string | null
    timestamp?: DateTimeWithAggregatesFilter<"TryOnTracker"> | Date | string
    shop?: StringWithAggregatesFilter<"TryOnTracker"> | string
  }

  export type WebhookEventWhereInput = {
    AND?: WebhookEventWhereInput | WebhookEventWhereInput[]
    OR?: WebhookEventWhereInput[]
    NOT?: WebhookEventWhereInput | WebhookEventWhereInput[]
    id?: StringFilter<"WebhookEvent"> | string
    topic?: StringFilter<"WebhookEvent"> | string
    shopDomain?: StringFilter<"WebhookEvent"> | string
    success?: BoolFilter<"WebhookEvent"> | boolean
    errorDetails?: StringNullableFilter<"WebhookEvent"> | string | null
    createdAt?: DateTimeFilter<"WebhookEvent"> | Date | string
  }

  export type WebhookEventOrderByWithRelationInput = {
    id?: SortOrder
    topic?: SortOrder
    shopDomain?: SortOrder
    success?: SortOrder
    errorDetails?: SortOrderInput | SortOrder
    createdAt?: SortOrder
  }

  export type WebhookEventWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WebhookEventWhereInput | WebhookEventWhereInput[]
    OR?: WebhookEventWhereInput[]
    NOT?: WebhookEventWhereInput | WebhookEventWhereInput[]
    topic?: StringFilter<"WebhookEvent"> | string
    shopDomain?: StringFilter<"WebhookEvent"> | string
    success?: BoolFilter<"WebhookEvent"> | boolean
    errorDetails?: StringNullableFilter<"WebhookEvent"> | string | null
    createdAt?: DateTimeFilter<"WebhookEvent"> | Date | string
  }, "id">

  export type WebhookEventOrderByWithAggregationInput = {
    id?: SortOrder
    topic?: SortOrder
    shopDomain?: SortOrder
    success?: SortOrder
    errorDetails?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: WebhookEventCountOrderByAggregateInput
    _max?: WebhookEventMaxOrderByAggregateInput
    _min?: WebhookEventMinOrderByAggregateInput
  }

  export type WebhookEventScalarWhereWithAggregatesInput = {
    AND?: WebhookEventScalarWhereWithAggregatesInput | WebhookEventScalarWhereWithAggregatesInput[]
    OR?: WebhookEventScalarWhereWithAggregatesInput[]
    NOT?: WebhookEventScalarWhereWithAggregatesInput | WebhookEventScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WebhookEvent"> | string
    topic?: StringWithAggregatesFilter<"WebhookEvent"> | string
    shopDomain?: StringWithAggregatesFilter<"WebhookEvent"> | string
    success?: BoolWithAggregatesFilter<"WebhookEvent"> | boolean
    errorDetails?: StringNullableWithAggregatesFilter<"WebhookEvent"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"WebhookEvent"> | Date | string
  }

  export type AddToCartTrackerCreateInput = {
    id: string
    productUrl: string
    productName: string
    productImage: string
    location?: string | null
    timestamp?: Date | string
    shop: string
    TryOnTracker: TryOnTrackerCreateNestedOneWithoutAddToCartTrackerInput
  }

  export type AddToCartTrackerUncheckedCreateInput = {
    id: string
    tryOnId: string
    productUrl: string
    productName: string
    productImage: string
    location?: string | null
    timestamp?: Date | string
    shop: string
  }

  export type AddToCartTrackerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    productUrl?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    productImage?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    shop?: StringFieldUpdateOperationsInput | string
    TryOnTracker?: TryOnTrackerUpdateOneRequiredWithoutAddToCartTrackerNestedInput
  }

  export type AddToCartTrackerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tryOnId?: StringFieldUpdateOperationsInput | string
    productUrl?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    productImage?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    shop?: StringFieldUpdateOperationsInput | string
  }

  export type AddToCartTrackerCreateManyInput = {
    id: string
    tryOnId: string
    productUrl: string
    productName: string
    productImage: string
    location?: string | null
    timestamp?: Date | string
    shop: string
  }

  export type AddToCartTrackerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    productUrl?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    productImage?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    shop?: StringFieldUpdateOperationsInput | string
  }

  export type AddToCartTrackerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tryOnId?: StringFieldUpdateOperationsInput | string
    productUrl?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    productImage?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    shop?: StringFieldUpdateOperationsInput | string
  }

  export type CreditUsageCreateInput = {
    id: string
    totalCredits?: number
    usedCredits?: number
    createdAt?: Date | string
    updatedAt: Date | string
    ShopSubscription: ShopSubscriptionCreateNestedOneWithoutCreditUsageInput
  }

  export type CreditUsageUncheckedCreateInput = {
    id: string
    shop: string
    totalCredits?: number
    usedCredits?: number
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type CreditUsageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalCredits?: IntFieldUpdateOperationsInput | number
    usedCredits?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ShopSubscription?: ShopSubscriptionUpdateOneRequiredWithoutCreditUsageNestedInput
  }

  export type CreditUsageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    shop?: StringFieldUpdateOperationsInput | string
    totalCredits?: IntFieldUpdateOperationsInput | number
    usedCredits?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CreditUsageCreateManyInput = {
    id: string
    shop: string
    totalCredits?: number
    usedCredits?: number
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type CreditUsageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalCredits?: IntFieldUpdateOperationsInput | number
    usedCredits?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CreditUsageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    shop?: StringFieldUpdateOperationsInput | string
    totalCredits?: IntFieldUpdateOperationsInput | number
    usedCredits?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerDataCreateInput = {
    id: string
    shopifyCustomerId: string
    customerData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt: Date | string
    Shop: ShopCreateNestedOneWithoutCustomerDataInput
  }

  export type CustomerDataUncheckedCreateInput = {
    id: string
    shopDomain: string
    shopifyCustomerId: string
    customerData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type CustomerDataUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopifyCustomerId?: StringFieldUpdateOperationsInput | string
    customerData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Shop?: ShopUpdateOneRequiredWithoutCustomerDataNestedInput
  }

  export type CustomerDataUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopDomain?: StringFieldUpdateOperationsInput | string
    shopifyCustomerId?: StringFieldUpdateOperationsInput | string
    customerData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerDataCreateManyInput = {
    id: string
    shopDomain: string
    shopifyCustomerId: string
    customerData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type CustomerDataUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopifyCustomerId?: StringFieldUpdateOperationsInput | string
    customerData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerDataUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopDomain?: StringFieldUpdateOperationsInput | string
    shopifyCustomerId?: StringFieldUpdateOperationsInput | string
    customerData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DataRequestCreateInput = {
    id: string
    requestId: string
    shopifyCustomerId: string
    requestData: JsonNullValueInput | InputJsonValue
    status: string
    createdAt?: Date | string
    updatedAt: Date | string
    Shop: ShopCreateNestedOneWithoutDataRequestInput
  }

  export type DataRequestUncheckedCreateInput = {
    id: string
    requestId: string
    shopDomain: string
    shopifyCustomerId: string
    requestData: JsonNullValueInput | InputJsonValue
    status: string
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type DataRequestUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestId?: StringFieldUpdateOperationsInput | string
    shopifyCustomerId?: StringFieldUpdateOperationsInput | string
    requestData?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Shop?: ShopUpdateOneRequiredWithoutDataRequestNestedInput
  }

  export type DataRequestUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestId?: StringFieldUpdateOperationsInput | string
    shopDomain?: StringFieldUpdateOperationsInput | string
    shopifyCustomerId?: StringFieldUpdateOperationsInput | string
    requestData?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DataRequestCreateManyInput = {
    id: string
    requestId: string
    shopDomain: string
    shopifyCustomerId: string
    requestData: JsonNullValueInput | InputJsonValue
    status: string
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type DataRequestUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestId?: StringFieldUpdateOperationsInput | string
    shopifyCustomerId?: StringFieldUpdateOperationsInput | string
    requestData?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DataRequestUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestId?: StringFieldUpdateOperationsInput | string
    shopDomain?: StringFieldUpdateOperationsInput | string
    shopifyCustomerId?: StringFieldUpdateOperationsInput | string
    requestData?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateInput = {
    id: string
    shop: string
    state: string
    isOnline?: boolean
    scope?: string | null
    expires?: Date | string | null
    accessToken: string
    userId?: bigint | number | null
    firstName?: string | null
    lastName?: string | null
    email?: string | null
    accountOwner?: boolean
    locale?: string | null
    collaborator?: boolean | null
    emailVerified?: boolean | null
  }

  export type SessionUncheckedCreateInput = {
    id: string
    shop: string
    state: string
    isOnline?: boolean
    scope?: string | null
    expires?: Date | string | null
    accessToken: string
    userId?: bigint | number | null
    firstName?: string | null
    lastName?: string | null
    email?: string | null
    accountOwner?: boolean
    locale?: string | null
    collaborator?: boolean | null
    emailVerified?: boolean | null
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    shop?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accessToken?: StringFieldUpdateOperationsInput | string
    userId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    accountOwner?: BoolFieldUpdateOperationsInput | boolean
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    collaborator?: NullableBoolFieldUpdateOperationsInput | boolean | null
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    shop?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accessToken?: StringFieldUpdateOperationsInput | string
    userId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    accountOwner?: BoolFieldUpdateOperationsInput | boolean
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    collaborator?: NullableBoolFieldUpdateOperationsInput | boolean | null
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type SessionCreateManyInput = {
    id: string
    shop: string
    state: string
    isOnline?: boolean
    scope?: string | null
    expires?: Date | string | null
    accessToken: string
    userId?: bigint | number | null
    firstName?: string | null
    lastName?: string | null
    email?: string | null
    accountOwner?: boolean
    locale?: string | null
    collaborator?: boolean | null
    emailVerified?: boolean | null
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    shop?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accessToken?: StringFieldUpdateOperationsInput | string
    userId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    accountOwner?: BoolFieldUpdateOperationsInput | boolean
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    collaborator?: NullableBoolFieldUpdateOperationsInput | boolean | null
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    shop?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accessToken?: StringFieldUpdateOperationsInput | string
    userId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    accountOwner?: BoolFieldUpdateOperationsInput | boolean
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    collaborator?: NullableBoolFieldUpdateOperationsInput | boolean | null
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type ShopCreateInput = {
    id: string
    shopDomain: string
    accessToken?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    CustomerData?: CustomerDataCreateNestedManyWithoutShopInput
    DataRequest?: DataRequestCreateNestedManyWithoutShopInput
  }

  export type ShopUncheckedCreateInput = {
    id: string
    shopDomain: string
    accessToken?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    CustomerData?: CustomerDataUncheckedCreateNestedManyWithoutShopInput
    DataRequest?: DataRequestUncheckedCreateNestedManyWithoutShopInput
  }

  export type ShopUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopDomain?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    CustomerData?: CustomerDataUpdateManyWithoutShopNestedInput
    DataRequest?: DataRequestUpdateManyWithoutShopNestedInput
  }

  export type ShopUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopDomain?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    CustomerData?: CustomerDataUncheckedUpdateManyWithoutShopNestedInput
    DataRequest?: DataRequestUncheckedUpdateManyWithoutShopNestedInput
  }

  export type ShopCreateManyInput = {
    id: string
    shopDomain: string
    accessToken?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type ShopUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopDomain?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShopUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopDomain?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShopSubscriptionCreateInput = {
    id: string
    shopDomain: string
    subscriptionId?: string | null
    status?: string
    planPrice?: number
    trialDays?: number
    createdAt?: Date | string
    updatedAt: Date | string
    creditCap?: number
    pocEmail?: string | null
    pocName?: string | null
    pocPhoneNumber?: string | null
    shopName?: string | null
    CreditUsage?: CreditUsageCreateNestedOneWithoutShopSubscriptionInput
  }

  export type ShopSubscriptionUncheckedCreateInput = {
    id: string
    shopDomain: string
    subscriptionId?: string | null
    status?: string
    planPrice?: number
    trialDays?: number
    createdAt?: Date | string
    updatedAt: Date | string
    creditCap?: number
    pocEmail?: string | null
    pocName?: string | null
    pocPhoneNumber?: string | null
    shopName?: string | null
    CreditUsage?: CreditUsageUncheckedCreateNestedOneWithoutShopSubscriptionInput
  }

  export type ShopSubscriptionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopDomain?: StringFieldUpdateOperationsInput | string
    subscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    planPrice?: IntFieldUpdateOperationsInput | number
    trialDays?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creditCap?: IntFieldUpdateOperationsInput | number
    pocEmail?: NullableStringFieldUpdateOperationsInput | string | null
    pocName?: NullableStringFieldUpdateOperationsInput | string | null
    pocPhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    shopName?: NullableStringFieldUpdateOperationsInput | string | null
    CreditUsage?: CreditUsageUpdateOneWithoutShopSubscriptionNestedInput
  }

  export type ShopSubscriptionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopDomain?: StringFieldUpdateOperationsInput | string
    subscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    planPrice?: IntFieldUpdateOperationsInput | number
    trialDays?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creditCap?: IntFieldUpdateOperationsInput | number
    pocEmail?: NullableStringFieldUpdateOperationsInput | string | null
    pocName?: NullableStringFieldUpdateOperationsInput | string | null
    pocPhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    shopName?: NullableStringFieldUpdateOperationsInput | string | null
    CreditUsage?: CreditUsageUncheckedUpdateOneWithoutShopSubscriptionNestedInput
  }

  export type ShopSubscriptionCreateManyInput = {
    id: string
    shopDomain: string
    subscriptionId?: string | null
    status?: string
    planPrice?: number
    trialDays?: number
    createdAt?: Date | string
    updatedAt: Date | string
    creditCap?: number
    pocEmail?: string | null
    pocName?: string | null
    pocPhoneNumber?: string | null
    shopName?: string | null
  }

  export type ShopSubscriptionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopDomain?: StringFieldUpdateOperationsInput | string
    subscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    planPrice?: IntFieldUpdateOperationsInput | number
    trialDays?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creditCap?: IntFieldUpdateOperationsInput | number
    pocEmail?: NullableStringFieldUpdateOperationsInput | string | null
    pocName?: NullableStringFieldUpdateOperationsInput | string | null
    pocPhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    shopName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ShopSubscriptionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopDomain?: StringFieldUpdateOperationsInput | string
    subscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    planPrice?: IntFieldUpdateOperationsInput | number
    trialDays?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creditCap?: IntFieldUpdateOperationsInput | number
    pocEmail?: NullableStringFieldUpdateOperationsInput | string | null
    pocName?: NullableStringFieldUpdateOperationsInput | string | null
    pocPhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    shopName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TryOnTrackerCreateInput = {
    id: string
    productUrl: string
    productName: string
    productImage: string
    clickCount?: number
    location?: string | null
    timestamp?: Date | string
    shop: string
    AddToCartTracker?: AddToCartTrackerCreateNestedOneWithoutTryOnTrackerInput
  }

  export type TryOnTrackerUncheckedCreateInput = {
    id: string
    productUrl: string
    productName: string
    productImage: string
    clickCount?: number
    location?: string | null
    timestamp?: Date | string
    shop: string
    AddToCartTracker?: AddToCartTrackerUncheckedCreateNestedOneWithoutTryOnTrackerInput
  }

  export type TryOnTrackerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    productUrl?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    productImage?: StringFieldUpdateOperationsInput | string
    clickCount?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    shop?: StringFieldUpdateOperationsInput | string
    AddToCartTracker?: AddToCartTrackerUpdateOneWithoutTryOnTrackerNestedInput
  }

  export type TryOnTrackerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    productUrl?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    productImage?: StringFieldUpdateOperationsInput | string
    clickCount?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    shop?: StringFieldUpdateOperationsInput | string
    AddToCartTracker?: AddToCartTrackerUncheckedUpdateOneWithoutTryOnTrackerNestedInput
  }

  export type TryOnTrackerCreateManyInput = {
    id: string
    productUrl: string
    productName: string
    productImage: string
    clickCount?: number
    location?: string | null
    timestamp?: Date | string
    shop: string
  }

  export type TryOnTrackerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    productUrl?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    productImage?: StringFieldUpdateOperationsInput | string
    clickCount?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    shop?: StringFieldUpdateOperationsInput | string
  }

  export type TryOnTrackerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    productUrl?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    productImage?: StringFieldUpdateOperationsInput | string
    clickCount?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    shop?: StringFieldUpdateOperationsInput | string
  }

  export type WebhookEventCreateInput = {
    id: string
    topic: string
    shopDomain: string
    success: boolean
    errorDetails?: string | null
    createdAt?: Date | string
  }

  export type WebhookEventUncheckedCreateInput = {
    id: string
    topic: string
    shopDomain: string
    success: boolean
    errorDetails?: string | null
    createdAt?: Date | string
  }

  export type WebhookEventUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    topic?: StringFieldUpdateOperationsInput | string
    shopDomain?: StringFieldUpdateOperationsInput | string
    success?: BoolFieldUpdateOperationsInput | boolean
    errorDetails?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebhookEventUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    topic?: StringFieldUpdateOperationsInput | string
    shopDomain?: StringFieldUpdateOperationsInput | string
    success?: BoolFieldUpdateOperationsInput | boolean
    errorDetails?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebhookEventCreateManyInput = {
    id: string
    topic: string
    shopDomain: string
    success: boolean
    errorDetails?: string | null
    createdAt?: Date | string
  }

  export type WebhookEventUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    topic?: StringFieldUpdateOperationsInput | string
    shopDomain?: StringFieldUpdateOperationsInput | string
    success?: BoolFieldUpdateOperationsInput | boolean
    errorDetails?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebhookEventUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    topic?: StringFieldUpdateOperationsInput | string
    shopDomain?: StringFieldUpdateOperationsInput | string
    success?: BoolFieldUpdateOperationsInput | boolean
    errorDetails?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type TryOnTrackerRelationFilter = {
    is?: TryOnTrackerWhereInput
    isNot?: TryOnTrackerWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AddToCartTrackerCountOrderByAggregateInput = {
    id?: SortOrder
    tryOnId?: SortOrder
    productUrl?: SortOrder
    productName?: SortOrder
    productImage?: SortOrder
    location?: SortOrder
    timestamp?: SortOrder
    shop?: SortOrder
  }

  export type AddToCartTrackerMaxOrderByAggregateInput = {
    id?: SortOrder
    tryOnId?: SortOrder
    productUrl?: SortOrder
    productName?: SortOrder
    productImage?: SortOrder
    location?: SortOrder
    timestamp?: SortOrder
    shop?: SortOrder
  }

  export type AddToCartTrackerMinOrderByAggregateInput = {
    id?: SortOrder
    tryOnId?: SortOrder
    productUrl?: SortOrder
    productName?: SortOrder
    productImage?: SortOrder
    location?: SortOrder
    timestamp?: SortOrder
    shop?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type ShopSubscriptionRelationFilter = {
    is?: ShopSubscriptionWhereInput
    isNot?: ShopSubscriptionWhereInput
  }

  export type CreditUsageCountOrderByAggregateInput = {
    id?: SortOrder
    shop?: SortOrder
    totalCredits?: SortOrder
    usedCredits?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CreditUsageAvgOrderByAggregateInput = {
    totalCredits?: SortOrder
    usedCredits?: SortOrder
  }

  export type CreditUsageMaxOrderByAggregateInput = {
    id?: SortOrder
    shop?: SortOrder
    totalCredits?: SortOrder
    usedCredits?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CreditUsageMinOrderByAggregateInput = {
    id?: SortOrder
    shop?: SortOrder
    totalCredits?: SortOrder
    usedCredits?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CreditUsageSumOrderByAggregateInput = {
    totalCredits?: SortOrder
    usedCredits?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type ShopRelationFilter = {
    is?: ShopWhereInput
    isNot?: ShopWhereInput
  }

  export type CustomerDataCountOrderByAggregateInput = {
    id?: SortOrder
    shopDomain?: SortOrder
    shopifyCustomerId?: SortOrder
    customerData?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomerDataMaxOrderByAggregateInput = {
    id?: SortOrder
    shopDomain?: SortOrder
    shopifyCustomerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomerDataMinOrderByAggregateInput = {
    id?: SortOrder
    shopDomain?: SortOrder
    shopifyCustomerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type DataRequestCountOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    shopDomain?: SortOrder
    shopifyCustomerId?: SortOrder
    requestData?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DataRequestMaxOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    shopDomain?: SortOrder
    shopifyCustomerId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DataRequestMinOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    shopDomain?: SortOrder
    shopifyCustomerId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type BigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    shop?: SortOrder
    state?: SortOrder
    isOnline?: SortOrder
    scope?: SortOrder
    expires?: SortOrder
    accessToken?: SortOrder
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    accountOwner?: SortOrder
    locale?: SortOrder
    collaborator?: SortOrder
    emailVerified?: SortOrder
  }

  export type SessionAvgOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    shop?: SortOrder
    state?: SortOrder
    isOnline?: SortOrder
    scope?: SortOrder
    expires?: SortOrder
    accessToken?: SortOrder
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    accountOwner?: SortOrder
    locale?: SortOrder
    collaborator?: SortOrder
    emailVerified?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    shop?: SortOrder
    state?: SortOrder
    isOnline?: SortOrder
    scope?: SortOrder
    expires?: SortOrder
    accessToken?: SortOrder
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    accountOwner?: SortOrder
    locale?: SortOrder
    collaborator?: SortOrder
    emailVerified?: SortOrder
  }

  export type SessionSumOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type BigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type CustomerDataListRelationFilter = {
    every?: CustomerDataWhereInput
    some?: CustomerDataWhereInput
    none?: CustomerDataWhereInput
  }

  export type DataRequestListRelationFilter = {
    every?: DataRequestWhereInput
    some?: DataRequestWhereInput
    none?: DataRequestWhereInput
  }

  export type CustomerDataOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DataRequestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ShopCountOrderByAggregateInput = {
    id?: SortOrder
    shopDomain?: SortOrder
    accessToken?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ShopMaxOrderByAggregateInput = {
    id?: SortOrder
    shopDomain?: SortOrder
    accessToken?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ShopMinOrderByAggregateInput = {
    id?: SortOrder
    shopDomain?: SortOrder
    accessToken?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CreditUsageNullableRelationFilter = {
    is?: CreditUsageWhereInput | null
    isNot?: CreditUsageWhereInput | null
  }

  export type ShopSubscriptionCountOrderByAggregateInput = {
    id?: SortOrder
    shopDomain?: SortOrder
    subscriptionId?: SortOrder
    status?: SortOrder
    planPrice?: SortOrder
    trialDays?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    creditCap?: SortOrder
    pocEmail?: SortOrder
    pocName?: SortOrder
    pocPhoneNumber?: SortOrder
    shopName?: SortOrder
  }

  export type ShopSubscriptionAvgOrderByAggregateInput = {
    planPrice?: SortOrder
    trialDays?: SortOrder
    creditCap?: SortOrder
  }

  export type ShopSubscriptionMaxOrderByAggregateInput = {
    id?: SortOrder
    shopDomain?: SortOrder
    subscriptionId?: SortOrder
    status?: SortOrder
    planPrice?: SortOrder
    trialDays?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    creditCap?: SortOrder
    pocEmail?: SortOrder
    pocName?: SortOrder
    pocPhoneNumber?: SortOrder
    shopName?: SortOrder
  }

  export type ShopSubscriptionMinOrderByAggregateInput = {
    id?: SortOrder
    shopDomain?: SortOrder
    subscriptionId?: SortOrder
    status?: SortOrder
    planPrice?: SortOrder
    trialDays?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    creditCap?: SortOrder
    pocEmail?: SortOrder
    pocName?: SortOrder
    pocPhoneNumber?: SortOrder
    shopName?: SortOrder
  }

  export type ShopSubscriptionSumOrderByAggregateInput = {
    planPrice?: SortOrder
    trialDays?: SortOrder
    creditCap?: SortOrder
  }

  export type AddToCartTrackerNullableRelationFilter = {
    is?: AddToCartTrackerWhereInput | null
    isNot?: AddToCartTrackerWhereInput | null
  }

  export type TryOnTrackerCountOrderByAggregateInput = {
    id?: SortOrder
    productUrl?: SortOrder
    productName?: SortOrder
    productImage?: SortOrder
    clickCount?: SortOrder
    location?: SortOrder
    timestamp?: SortOrder
    shop?: SortOrder
  }

  export type TryOnTrackerAvgOrderByAggregateInput = {
    clickCount?: SortOrder
  }

  export type TryOnTrackerMaxOrderByAggregateInput = {
    id?: SortOrder
    productUrl?: SortOrder
    productName?: SortOrder
    productImage?: SortOrder
    clickCount?: SortOrder
    location?: SortOrder
    timestamp?: SortOrder
    shop?: SortOrder
  }

  export type TryOnTrackerMinOrderByAggregateInput = {
    id?: SortOrder
    productUrl?: SortOrder
    productName?: SortOrder
    productImage?: SortOrder
    clickCount?: SortOrder
    location?: SortOrder
    timestamp?: SortOrder
    shop?: SortOrder
  }

  export type TryOnTrackerSumOrderByAggregateInput = {
    clickCount?: SortOrder
  }

  export type WebhookEventCountOrderByAggregateInput = {
    id?: SortOrder
    topic?: SortOrder
    shopDomain?: SortOrder
    success?: SortOrder
    errorDetails?: SortOrder
    createdAt?: SortOrder
  }

  export type WebhookEventMaxOrderByAggregateInput = {
    id?: SortOrder
    topic?: SortOrder
    shopDomain?: SortOrder
    success?: SortOrder
    errorDetails?: SortOrder
    createdAt?: SortOrder
  }

  export type WebhookEventMinOrderByAggregateInput = {
    id?: SortOrder
    topic?: SortOrder
    shopDomain?: SortOrder
    success?: SortOrder
    errorDetails?: SortOrder
    createdAt?: SortOrder
  }

  export type TryOnTrackerCreateNestedOneWithoutAddToCartTrackerInput = {
    create?: XOR<TryOnTrackerCreateWithoutAddToCartTrackerInput, TryOnTrackerUncheckedCreateWithoutAddToCartTrackerInput>
    connectOrCreate?: TryOnTrackerCreateOrConnectWithoutAddToCartTrackerInput
    connect?: TryOnTrackerWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type TryOnTrackerUpdateOneRequiredWithoutAddToCartTrackerNestedInput = {
    create?: XOR<TryOnTrackerCreateWithoutAddToCartTrackerInput, TryOnTrackerUncheckedCreateWithoutAddToCartTrackerInput>
    connectOrCreate?: TryOnTrackerCreateOrConnectWithoutAddToCartTrackerInput
    upsert?: TryOnTrackerUpsertWithoutAddToCartTrackerInput
    connect?: TryOnTrackerWhereUniqueInput
    update?: XOR<XOR<TryOnTrackerUpdateToOneWithWhereWithoutAddToCartTrackerInput, TryOnTrackerUpdateWithoutAddToCartTrackerInput>, TryOnTrackerUncheckedUpdateWithoutAddToCartTrackerInput>
  }

  export type ShopSubscriptionCreateNestedOneWithoutCreditUsageInput = {
    create?: XOR<ShopSubscriptionCreateWithoutCreditUsageInput, ShopSubscriptionUncheckedCreateWithoutCreditUsageInput>
    connectOrCreate?: ShopSubscriptionCreateOrConnectWithoutCreditUsageInput
    connect?: ShopSubscriptionWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ShopSubscriptionUpdateOneRequiredWithoutCreditUsageNestedInput = {
    create?: XOR<ShopSubscriptionCreateWithoutCreditUsageInput, ShopSubscriptionUncheckedCreateWithoutCreditUsageInput>
    connectOrCreate?: ShopSubscriptionCreateOrConnectWithoutCreditUsageInput
    upsert?: ShopSubscriptionUpsertWithoutCreditUsageInput
    connect?: ShopSubscriptionWhereUniqueInput
    update?: XOR<XOR<ShopSubscriptionUpdateToOneWithWhereWithoutCreditUsageInput, ShopSubscriptionUpdateWithoutCreditUsageInput>, ShopSubscriptionUncheckedUpdateWithoutCreditUsageInput>
  }

  export type ShopCreateNestedOneWithoutCustomerDataInput = {
    create?: XOR<ShopCreateWithoutCustomerDataInput, ShopUncheckedCreateWithoutCustomerDataInput>
    connectOrCreate?: ShopCreateOrConnectWithoutCustomerDataInput
    connect?: ShopWhereUniqueInput
  }

  export type ShopUpdateOneRequiredWithoutCustomerDataNestedInput = {
    create?: XOR<ShopCreateWithoutCustomerDataInput, ShopUncheckedCreateWithoutCustomerDataInput>
    connectOrCreate?: ShopCreateOrConnectWithoutCustomerDataInput
    upsert?: ShopUpsertWithoutCustomerDataInput
    connect?: ShopWhereUniqueInput
    update?: XOR<XOR<ShopUpdateToOneWithWhereWithoutCustomerDataInput, ShopUpdateWithoutCustomerDataInput>, ShopUncheckedUpdateWithoutCustomerDataInput>
  }

  export type ShopCreateNestedOneWithoutDataRequestInput = {
    create?: XOR<ShopCreateWithoutDataRequestInput, ShopUncheckedCreateWithoutDataRequestInput>
    connectOrCreate?: ShopCreateOrConnectWithoutDataRequestInput
    connect?: ShopWhereUniqueInput
  }

  export type ShopUpdateOneRequiredWithoutDataRequestNestedInput = {
    create?: XOR<ShopCreateWithoutDataRequestInput, ShopUncheckedCreateWithoutDataRequestInput>
    connectOrCreate?: ShopCreateOrConnectWithoutDataRequestInput
    upsert?: ShopUpsertWithoutDataRequestInput
    connect?: ShopWhereUniqueInput
    update?: XOR<XOR<ShopUpdateToOneWithWhereWithoutDataRequestInput, ShopUpdateWithoutDataRequestInput>, ShopUncheckedUpdateWithoutDataRequestInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableBigIntFieldUpdateOperationsInput = {
    set?: bigint | number | null
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type CustomerDataCreateNestedManyWithoutShopInput = {
    create?: XOR<CustomerDataCreateWithoutShopInput, CustomerDataUncheckedCreateWithoutShopInput> | CustomerDataCreateWithoutShopInput[] | CustomerDataUncheckedCreateWithoutShopInput[]
    connectOrCreate?: CustomerDataCreateOrConnectWithoutShopInput | CustomerDataCreateOrConnectWithoutShopInput[]
    createMany?: CustomerDataCreateManyShopInputEnvelope
    connect?: CustomerDataWhereUniqueInput | CustomerDataWhereUniqueInput[]
  }

  export type DataRequestCreateNestedManyWithoutShopInput = {
    create?: XOR<DataRequestCreateWithoutShopInput, DataRequestUncheckedCreateWithoutShopInput> | DataRequestCreateWithoutShopInput[] | DataRequestUncheckedCreateWithoutShopInput[]
    connectOrCreate?: DataRequestCreateOrConnectWithoutShopInput | DataRequestCreateOrConnectWithoutShopInput[]
    createMany?: DataRequestCreateManyShopInputEnvelope
    connect?: DataRequestWhereUniqueInput | DataRequestWhereUniqueInput[]
  }

  export type CustomerDataUncheckedCreateNestedManyWithoutShopInput = {
    create?: XOR<CustomerDataCreateWithoutShopInput, CustomerDataUncheckedCreateWithoutShopInput> | CustomerDataCreateWithoutShopInput[] | CustomerDataUncheckedCreateWithoutShopInput[]
    connectOrCreate?: CustomerDataCreateOrConnectWithoutShopInput | CustomerDataCreateOrConnectWithoutShopInput[]
    createMany?: CustomerDataCreateManyShopInputEnvelope
    connect?: CustomerDataWhereUniqueInput | CustomerDataWhereUniqueInput[]
  }

  export type DataRequestUncheckedCreateNestedManyWithoutShopInput = {
    create?: XOR<DataRequestCreateWithoutShopInput, DataRequestUncheckedCreateWithoutShopInput> | DataRequestCreateWithoutShopInput[] | DataRequestUncheckedCreateWithoutShopInput[]
    connectOrCreate?: DataRequestCreateOrConnectWithoutShopInput | DataRequestCreateOrConnectWithoutShopInput[]
    createMany?: DataRequestCreateManyShopInputEnvelope
    connect?: DataRequestWhereUniqueInput | DataRequestWhereUniqueInput[]
  }

  export type CustomerDataUpdateManyWithoutShopNestedInput = {
    create?: XOR<CustomerDataCreateWithoutShopInput, CustomerDataUncheckedCreateWithoutShopInput> | CustomerDataCreateWithoutShopInput[] | CustomerDataUncheckedCreateWithoutShopInput[]
    connectOrCreate?: CustomerDataCreateOrConnectWithoutShopInput | CustomerDataCreateOrConnectWithoutShopInput[]
    upsert?: CustomerDataUpsertWithWhereUniqueWithoutShopInput | CustomerDataUpsertWithWhereUniqueWithoutShopInput[]
    createMany?: CustomerDataCreateManyShopInputEnvelope
    set?: CustomerDataWhereUniqueInput | CustomerDataWhereUniqueInput[]
    disconnect?: CustomerDataWhereUniqueInput | CustomerDataWhereUniqueInput[]
    delete?: CustomerDataWhereUniqueInput | CustomerDataWhereUniqueInput[]
    connect?: CustomerDataWhereUniqueInput | CustomerDataWhereUniqueInput[]
    update?: CustomerDataUpdateWithWhereUniqueWithoutShopInput | CustomerDataUpdateWithWhereUniqueWithoutShopInput[]
    updateMany?: CustomerDataUpdateManyWithWhereWithoutShopInput | CustomerDataUpdateManyWithWhereWithoutShopInput[]
    deleteMany?: CustomerDataScalarWhereInput | CustomerDataScalarWhereInput[]
  }

  export type DataRequestUpdateManyWithoutShopNestedInput = {
    create?: XOR<DataRequestCreateWithoutShopInput, DataRequestUncheckedCreateWithoutShopInput> | DataRequestCreateWithoutShopInput[] | DataRequestUncheckedCreateWithoutShopInput[]
    connectOrCreate?: DataRequestCreateOrConnectWithoutShopInput | DataRequestCreateOrConnectWithoutShopInput[]
    upsert?: DataRequestUpsertWithWhereUniqueWithoutShopInput | DataRequestUpsertWithWhereUniqueWithoutShopInput[]
    createMany?: DataRequestCreateManyShopInputEnvelope
    set?: DataRequestWhereUniqueInput | DataRequestWhereUniqueInput[]
    disconnect?: DataRequestWhereUniqueInput | DataRequestWhereUniqueInput[]
    delete?: DataRequestWhereUniqueInput | DataRequestWhereUniqueInput[]
    connect?: DataRequestWhereUniqueInput | DataRequestWhereUniqueInput[]
    update?: DataRequestUpdateWithWhereUniqueWithoutShopInput | DataRequestUpdateWithWhereUniqueWithoutShopInput[]
    updateMany?: DataRequestUpdateManyWithWhereWithoutShopInput | DataRequestUpdateManyWithWhereWithoutShopInput[]
    deleteMany?: DataRequestScalarWhereInput | DataRequestScalarWhereInput[]
  }

  export type CustomerDataUncheckedUpdateManyWithoutShopNestedInput = {
    create?: XOR<CustomerDataCreateWithoutShopInput, CustomerDataUncheckedCreateWithoutShopInput> | CustomerDataCreateWithoutShopInput[] | CustomerDataUncheckedCreateWithoutShopInput[]
    connectOrCreate?: CustomerDataCreateOrConnectWithoutShopInput | CustomerDataCreateOrConnectWithoutShopInput[]
    upsert?: CustomerDataUpsertWithWhereUniqueWithoutShopInput | CustomerDataUpsertWithWhereUniqueWithoutShopInput[]
    createMany?: CustomerDataCreateManyShopInputEnvelope
    set?: CustomerDataWhereUniqueInput | CustomerDataWhereUniqueInput[]
    disconnect?: CustomerDataWhereUniqueInput | CustomerDataWhereUniqueInput[]
    delete?: CustomerDataWhereUniqueInput | CustomerDataWhereUniqueInput[]
    connect?: CustomerDataWhereUniqueInput | CustomerDataWhereUniqueInput[]
    update?: CustomerDataUpdateWithWhereUniqueWithoutShopInput | CustomerDataUpdateWithWhereUniqueWithoutShopInput[]
    updateMany?: CustomerDataUpdateManyWithWhereWithoutShopInput | CustomerDataUpdateManyWithWhereWithoutShopInput[]
    deleteMany?: CustomerDataScalarWhereInput | CustomerDataScalarWhereInput[]
  }

  export type DataRequestUncheckedUpdateManyWithoutShopNestedInput = {
    create?: XOR<DataRequestCreateWithoutShopInput, DataRequestUncheckedCreateWithoutShopInput> | DataRequestCreateWithoutShopInput[] | DataRequestUncheckedCreateWithoutShopInput[]
    connectOrCreate?: DataRequestCreateOrConnectWithoutShopInput | DataRequestCreateOrConnectWithoutShopInput[]
    upsert?: DataRequestUpsertWithWhereUniqueWithoutShopInput | DataRequestUpsertWithWhereUniqueWithoutShopInput[]
    createMany?: DataRequestCreateManyShopInputEnvelope
    set?: DataRequestWhereUniqueInput | DataRequestWhereUniqueInput[]
    disconnect?: DataRequestWhereUniqueInput | DataRequestWhereUniqueInput[]
    delete?: DataRequestWhereUniqueInput | DataRequestWhereUniqueInput[]
    connect?: DataRequestWhereUniqueInput | DataRequestWhereUniqueInput[]
    update?: DataRequestUpdateWithWhereUniqueWithoutShopInput | DataRequestUpdateWithWhereUniqueWithoutShopInput[]
    updateMany?: DataRequestUpdateManyWithWhereWithoutShopInput | DataRequestUpdateManyWithWhereWithoutShopInput[]
    deleteMany?: DataRequestScalarWhereInput | DataRequestScalarWhereInput[]
  }

  export type CreditUsageCreateNestedOneWithoutShopSubscriptionInput = {
    create?: XOR<CreditUsageCreateWithoutShopSubscriptionInput, CreditUsageUncheckedCreateWithoutShopSubscriptionInput>
    connectOrCreate?: CreditUsageCreateOrConnectWithoutShopSubscriptionInput
    connect?: CreditUsageWhereUniqueInput
  }

  export type CreditUsageUncheckedCreateNestedOneWithoutShopSubscriptionInput = {
    create?: XOR<CreditUsageCreateWithoutShopSubscriptionInput, CreditUsageUncheckedCreateWithoutShopSubscriptionInput>
    connectOrCreate?: CreditUsageCreateOrConnectWithoutShopSubscriptionInput
    connect?: CreditUsageWhereUniqueInput
  }

  export type CreditUsageUpdateOneWithoutShopSubscriptionNestedInput = {
    create?: XOR<CreditUsageCreateWithoutShopSubscriptionInput, CreditUsageUncheckedCreateWithoutShopSubscriptionInput>
    connectOrCreate?: CreditUsageCreateOrConnectWithoutShopSubscriptionInput
    upsert?: CreditUsageUpsertWithoutShopSubscriptionInput
    disconnect?: CreditUsageWhereInput | boolean
    delete?: CreditUsageWhereInput | boolean
    connect?: CreditUsageWhereUniqueInput
    update?: XOR<XOR<CreditUsageUpdateToOneWithWhereWithoutShopSubscriptionInput, CreditUsageUpdateWithoutShopSubscriptionInput>, CreditUsageUncheckedUpdateWithoutShopSubscriptionInput>
  }

  export type CreditUsageUncheckedUpdateOneWithoutShopSubscriptionNestedInput = {
    create?: XOR<CreditUsageCreateWithoutShopSubscriptionInput, CreditUsageUncheckedCreateWithoutShopSubscriptionInput>
    connectOrCreate?: CreditUsageCreateOrConnectWithoutShopSubscriptionInput
    upsert?: CreditUsageUpsertWithoutShopSubscriptionInput
    disconnect?: CreditUsageWhereInput | boolean
    delete?: CreditUsageWhereInput | boolean
    connect?: CreditUsageWhereUniqueInput
    update?: XOR<XOR<CreditUsageUpdateToOneWithWhereWithoutShopSubscriptionInput, CreditUsageUpdateWithoutShopSubscriptionInput>, CreditUsageUncheckedUpdateWithoutShopSubscriptionInput>
  }

  export type AddToCartTrackerCreateNestedOneWithoutTryOnTrackerInput = {
    create?: XOR<AddToCartTrackerCreateWithoutTryOnTrackerInput, AddToCartTrackerUncheckedCreateWithoutTryOnTrackerInput>
    connectOrCreate?: AddToCartTrackerCreateOrConnectWithoutTryOnTrackerInput
    connect?: AddToCartTrackerWhereUniqueInput
  }

  export type AddToCartTrackerUncheckedCreateNestedOneWithoutTryOnTrackerInput = {
    create?: XOR<AddToCartTrackerCreateWithoutTryOnTrackerInput, AddToCartTrackerUncheckedCreateWithoutTryOnTrackerInput>
    connectOrCreate?: AddToCartTrackerCreateOrConnectWithoutTryOnTrackerInput
    connect?: AddToCartTrackerWhereUniqueInput
  }

  export type AddToCartTrackerUpdateOneWithoutTryOnTrackerNestedInput = {
    create?: XOR<AddToCartTrackerCreateWithoutTryOnTrackerInput, AddToCartTrackerUncheckedCreateWithoutTryOnTrackerInput>
    connectOrCreate?: AddToCartTrackerCreateOrConnectWithoutTryOnTrackerInput
    upsert?: AddToCartTrackerUpsertWithoutTryOnTrackerInput
    disconnect?: AddToCartTrackerWhereInput | boolean
    delete?: AddToCartTrackerWhereInput | boolean
    connect?: AddToCartTrackerWhereUniqueInput
    update?: XOR<XOR<AddToCartTrackerUpdateToOneWithWhereWithoutTryOnTrackerInput, AddToCartTrackerUpdateWithoutTryOnTrackerInput>, AddToCartTrackerUncheckedUpdateWithoutTryOnTrackerInput>
  }

  export type AddToCartTrackerUncheckedUpdateOneWithoutTryOnTrackerNestedInput = {
    create?: XOR<AddToCartTrackerCreateWithoutTryOnTrackerInput, AddToCartTrackerUncheckedCreateWithoutTryOnTrackerInput>
    connectOrCreate?: AddToCartTrackerCreateOrConnectWithoutTryOnTrackerInput
    upsert?: AddToCartTrackerUpsertWithoutTryOnTrackerInput
    disconnect?: AddToCartTrackerWhereInput | boolean
    delete?: AddToCartTrackerWhereInput | boolean
    connect?: AddToCartTrackerWhereUniqueInput
    update?: XOR<XOR<AddToCartTrackerUpdateToOneWithWhereWithoutTryOnTrackerInput, AddToCartTrackerUpdateWithoutTryOnTrackerInput>, AddToCartTrackerUncheckedUpdateWithoutTryOnTrackerInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedBigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedBigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type TryOnTrackerCreateWithoutAddToCartTrackerInput = {
    id: string
    productUrl: string
    productName: string
    productImage: string
    clickCount?: number
    location?: string | null
    timestamp?: Date | string
    shop: string
  }

  export type TryOnTrackerUncheckedCreateWithoutAddToCartTrackerInput = {
    id: string
    productUrl: string
    productName: string
    productImage: string
    clickCount?: number
    location?: string | null
    timestamp?: Date | string
    shop: string
  }

  export type TryOnTrackerCreateOrConnectWithoutAddToCartTrackerInput = {
    where: TryOnTrackerWhereUniqueInput
    create: XOR<TryOnTrackerCreateWithoutAddToCartTrackerInput, TryOnTrackerUncheckedCreateWithoutAddToCartTrackerInput>
  }

  export type TryOnTrackerUpsertWithoutAddToCartTrackerInput = {
    update: XOR<TryOnTrackerUpdateWithoutAddToCartTrackerInput, TryOnTrackerUncheckedUpdateWithoutAddToCartTrackerInput>
    create: XOR<TryOnTrackerCreateWithoutAddToCartTrackerInput, TryOnTrackerUncheckedCreateWithoutAddToCartTrackerInput>
    where?: TryOnTrackerWhereInput
  }

  export type TryOnTrackerUpdateToOneWithWhereWithoutAddToCartTrackerInput = {
    where?: TryOnTrackerWhereInput
    data: XOR<TryOnTrackerUpdateWithoutAddToCartTrackerInput, TryOnTrackerUncheckedUpdateWithoutAddToCartTrackerInput>
  }

  export type TryOnTrackerUpdateWithoutAddToCartTrackerInput = {
    id?: StringFieldUpdateOperationsInput | string
    productUrl?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    productImage?: StringFieldUpdateOperationsInput | string
    clickCount?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    shop?: StringFieldUpdateOperationsInput | string
  }

  export type TryOnTrackerUncheckedUpdateWithoutAddToCartTrackerInput = {
    id?: StringFieldUpdateOperationsInput | string
    productUrl?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    productImage?: StringFieldUpdateOperationsInput | string
    clickCount?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    shop?: StringFieldUpdateOperationsInput | string
  }

  export type ShopSubscriptionCreateWithoutCreditUsageInput = {
    id: string
    shopDomain: string
    subscriptionId?: string | null
    status?: string
    planPrice?: number
    trialDays?: number
    createdAt?: Date | string
    updatedAt: Date | string
    creditCap?: number
    pocEmail?: string | null
    pocName?: string | null
    pocPhoneNumber?: string | null
    shopName?: string | null
  }

  export type ShopSubscriptionUncheckedCreateWithoutCreditUsageInput = {
    id: string
    shopDomain: string
    subscriptionId?: string | null
    status?: string
    planPrice?: number
    trialDays?: number
    createdAt?: Date | string
    updatedAt: Date | string
    creditCap?: number
    pocEmail?: string | null
    pocName?: string | null
    pocPhoneNumber?: string | null
    shopName?: string | null
  }

  export type ShopSubscriptionCreateOrConnectWithoutCreditUsageInput = {
    where: ShopSubscriptionWhereUniqueInput
    create: XOR<ShopSubscriptionCreateWithoutCreditUsageInput, ShopSubscriptionUncheckedCreateWithoutCreditUsageInput>
  }

  export type ShopSubscriptionUpsertWithoutCreditUsageInput = {
    update: XOR<ShopSubscriptionUpdateWithoutCreditUsageInput, ShopSubscriptionUncheckedUpdateWithoutCreditUsageInput>
    create: XOR<ShopSubscriptionCreateWithoutCreditUsageInput, ShopSubscriptionUncheckedCreateWithoutCreditUsageInput>
    where?: ShopSubscriptionWhereInput
  }

  export type ShopSubscriptionUpdateToOneWithWhereWithoutCreditUsageInput = {
    where?: ShopSubscriptionWhereInput
    data: XOR<ShopSubscriptionUpdateWithoutCreditUsageInput, ShopSubscriptionUncheckedUpdateWithoutCreditUsageInput>
  }

  export type ShopSubscriptionUpdateWithoutCreditUsageInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopDomain?: StringFieldUpdateOperationsInput | string
    subscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    planPrice?: IntFieldUpdateOperationsInput | number
    trialDays?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creditCap?: IntFieldUpdateOperationsInput | number
    pocEmail?: NullableStringFieldUpdateOperationsInput | string | null
    pocName?: NullableStringFieldUpdateOperationsInput | string | null
    pocPhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    shopName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ShopSubscriptionUncheckedUpdateWithoutCreditUsageInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopDomain?: StringFieldUpdateOperationsInput | string
    subscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    planPrice?: IntFieldUpdateOperationsInput | number
    trialDays?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creditCap?: IntFieldUpdateOperationsInput | number
    pocEmail?: NullableStringFieldUpdateOperationsInput | string | null
    pocName?: NullableStringFieldUpdateOperationsInput | string | null
    pocPhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    shopName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ShopCreateWithoutCustomerDataInput = {
    id: string
    shopDomain: string
    accessToken?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    DataRequest?: DataRequestCreateNestedManyWithoutShopInput
  }

  export type ShopUncheckedCreateWithoutCustomerDataInput = {
    id: string
    shopDomain: string
    accessToken?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    DataRequest?: DataRequestUncheckedCreateNestedManyWithoutShopInput
  }

  export type ShopCreateOrConnectWithoutCustomerDataInput = {
    where: ShopWhereUniqueInput
    create: XOR<ShopCreateWithoutCustomerDataInput, ShopUncheckedCreateWithoutCustomerDataInput>
  }

  export type ShopUpsertWithoutCustomerDataInput = {
    update: XOR<ShopUpdateWithoutCustomerDataInput, ShopUncheckedUpdateWithoutCustomerDataInput>
    create: XOR<ShopCreateWithoutCustomerDataInput, ShopUncheckedCreateWithoutCustomerDataInput>
    where?: ShopWhereInput
  }

  export type ShopUpdateToOneWithWhereWithoutCustomerDataInput = {
    where?: ShopWhereInput
    data: XOR<ShopUpdateWithoutCustomerDataInput, ShopUncheckedUpdateWithoutCustomerDataInput>
  }

  export type ShopUpdateWithoutCustomerDataInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopDomain?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    DataRequest?: DataRequestUpdateManyWithoutShopNestedInput
  }

  export type ShopUncheckedUpdateWithoutCustomerDataInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopDomain?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    DataRequest?: DataRequestUncheckedUpdateManyWithoutShopNestedInput
  }

  export type ShopCreateWithoutDataRequestInput = {
    id: string
    shopDomain: string
    accessToken?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    CustomerData?: CustomerDataCreateNestedManyWithoutShopInput
  }

  export type ShopUncheckedCreateWithoutDataRequestInput = {
    id: string
    shopDomain: string
    accessToken?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    CustomerData?: CustomerDataUncheckedCreateNestedManyWithoutShopInput
  }

  export type ShopCreateOrConnectWithoutDataRequestInput = {
    where: ShopWhereUniqueInput
    create: XOR<ShopCreateWithoutDataRequestInput, ShopUncheckedCreateWithoutDataRequestInput>
  }

  export type ShopUpsertWithoutDataRequestInput = {
    update: XOR<ShopUpdateWithoutDataRequestInput, ShopUncheckedUpdateWithoutDataRequestInput>
    create: XOR<ShopCreateWithoutDataRequestInput, ShopUncheckedCreateWithoutDataRequestInput>
    where?: ShopWhereInput
  }

  export type ShopUpdateToOneWithWhereWithoutDataRequestInput = {
    where?: ShopWhereInput
    data: XOR<ShopUpdateWithoutDataRequestInput, ShopUncheckedUpdateWithoutDataRequestInput>
  }

  export type ShopUpdateWithoutDataRequestInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopDomain?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    CustomerData?: CustomerDataUpdateManyWithoutShopNestedInput
  }

  export type ShopUncheckedUpdateWithoutDataRequestInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopDomain?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    CustomerData?: CustomerDataUncheckedUpdateManyWithoutShopNestedInput
  }

  export type CustomerDataCreateWithoutShopInput = {
    id: string
    shopifyCustomerId: string
    customerData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type CustomerDataUncheckedCreateWithoutShopInput = {
    id: string
    shopifyCustomerId: string
    customerData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type CustomerDataCreateOrConnectWithoutShopInput = {
    where: CustomerDataWhereUniqueInput
    create: XOR<CustomerDataCreateWithoutShopInput, CustomerDataUncheckedCreateWithoutShopInput>
  }

  export type CustomerDataCreateManyShopInputEnvelope = {
    data: CustomerDataCreateManyShopInput | CustomerDataCreateManyShopInput[]
    skipDuplicates?: boolean
  }

  export type DataRequestCreateWithoutShopInput = {
    id: string
    requestId: string
    shopifyCustomerId: string
    requestData: JsonNullValueInput | InputJsonValue
    status: string
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type DataRequestUncheckedCreateWithoutShopInput = {
    id: string
    requestId: string
    shopifyCustomerId: string
    requestData: JsonNullValueInput | InputJsonValue
    status: string
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type DataRequestCreateOrConnectWithoutShopInput = {
    where: DataRequestWhereUniqueInput
    create: XOR<DataRequestCreateWithoutShopInput, DataRequestUncheckedCreateWithoutShopInput>
  }

  export type DataRequestCreateManyShopInputEnvelope = {
    data: DataRequestCreateManyShopInput | DataRequestCreateManyShopInput[]
    skipDuplicates?: boolean
  }

  export type CustomerDataUpsertWithWhereUniqueWithoutShopInput = {
    where: CustomerDataWhereUniqueInput
    update: XOR<CustomerDataUpdateWithoutShopInput, CustomerDataUncheckedUpdateWithoutShopInput>
    create: XOR<CustomerDataCreateWithoutShopInput, CustomerDataUncheckedCreateWithoutShopInput>
  }

  export type CustomerDataUpdateWithWhereUniqueWithoutShopInput = {
    where: CustomerDataWhereUniqueInput
    data: XOR<CustomerDataUpdateWithoutShopInput, CustomerDataUncheckedUpdateWithoutShopInput>
  }

  export type CustomerDataUpdateManyWithWhereWithoutShopInput = {
    where: CustomerDataScalarWhereInput
    data: XOR<CustomerDataUpdateManyMutationInput, CustomerDataUncheckedUpdateManyWithoutShopInput>
  }

  export type CustomerDataScalarWhereInput = {
    AND?: CustomerDataScalarWhereInput | CustomerDataScalarWhereInput[]
    OR?: CustomerDataScalarWhereInput[]
    NOT?: CustomerDataScalarWhereInput | CustomerDataScalarWhereInput[]
    id?: StringFilter<"CustomerData"> | string
    shopDomain?: StringFilter<"CustomerData"> | string
    shopifyCustomerId?: StringFilter<"CustomerData"> | string
    customerData?: JsonNullableFilter<"CustomerData">
    createdAt?: DateTimeFilter<"CustomerData"> | Date | string
    updatedAt?: DateTimeFilter<"CustomerData"> | Date | string
  }

  export type DataRequestUpsertWithWhereUniqueWithoutShopInput = {
    where: DataRequestWhereUniqueInput
    update: XOR<DataRequestUpdateWithoutShopInput, DataRequestUncheckedUpdateWithoutShopInput>
    create: XOR<DataRequestCreateWithoutShopInput, DataRequestUncheckedCreateWithoutShopInput>
  }

  export type DataRequestUpdateWithWhereUniqueWithoutShopInput = {
    where: DataRequestWhereUniqueInput
    data: XOR<DataRequestUpdateWithoutShopInput, DataRequestUncheckedUpdateWithoutShopInput>
  }

  export type DataRequestUpdateManyWithWhereWithoutShopInput = {
    where: DataRequestScalarWhereInput
    data: XOR<DataRequestUpdateManyMutationInput, DataRequestUncheckedUpdateManyWithoutShopInput>
  }

  export type DataRequestScalarWhereInput = {
    AND?: DataRequestScalarWhereInput | DataRequestScalarWhereInput[]
    OR?: DataRequestScalarWhereInput[]
    NOT?: DataRequestScalarWhereInput | DataRequestScalarWhereInput[]
    id?: StringFilter<"DataRequest"> | string
    requestId?: StringFilter<"DataRequest"> | string
    shopDomain?: StringFilter<"DataRequest"> | string
    shopifyCustomerId?: StringFilter<"DataRequest"> | string
    requestData?: JsonFilter<"DataRequest">
    status?: StringFilter<"DataRequest"> | string
    createdAt?: DateTimeFilter<"DataRequest"> | Date | string
    updatedAt?: DateTimeFilter<"DataRequest"> | Date | string
  }

  export type CreditUsageCreateWithoutShopSubscriptionInput = {
    id: string
    totalCredits?: number
    usedCredits?: number
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type CreditUsageUncheckedCreateWithoutShopSubscriptionInput = {
    id: string
    totalCredits?: number
    usedCredits?: number
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type CreditUsageCreateOrConnectWithoutShopSubscriptionInput = {
    where: CreditUsageWhereUniqueInput
    create: XOR<CreditUsageCreateWithoutShopSubscriptionInput, CreditUsageUncheckedCreateWithoutShopSubscriptionInput>
  }

  export type CreditUsageUpsertWithoutShopSubscriptionInput = {
    update: XOR<CreditUsageUpdateWithoutShopSubscriptionInput, CreditUsageUncheckedUpdateWithoutShopSubscriptionInput>
    create: XOR<CreditUsageCreateWithoutShopSubscriptionInput, CreditUsageUncheckedCreateWithoutShopSubscriptionInput>
    where?: CreditUsageWhereInput
  }

  export type CreditUsageUpdateToOneWithWhereWithoutShopSubscriptionInput = {
    where?: CreditUsageWhereInput
    data: XOR<CreditUsageUpdateWithoutShopSubscriptionInput, CreditUsageUncheckedUpdateWithoutShopSubscriptionInput>
  }

  export type CreditUsageUpdateWithoutShopSubscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalCredits?: IntFieldUpdateOperationsInput | number
    usedCredits?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CreditUsageUncheckedUpdateWithoutShopSubscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalCredits?: IntFieldUpdateOperationsInput | number
    usedCredits?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AddToCartTrackerCreateWithoutTryOnTrackerInput = {
    id: string
    productUrl: string
    productName: string
    productImage: string
    location?: string | null
    timestamp?: Date | string
    shop: string
  }

  export type AddToCartTrackerUncheckedCreateWithoutTryOnTrackerInput = {
    id: string
    productUrl: string
    productName: string
    productImage: string
    location?: string | null
    timestamp?: Date | string
    shop: string
  }

  export type AddToCartTrackerCreateOrConnectWithoutTryOnTrackerInput = {
    where: AddToCartTrackerWhereUniqueInput
    create: XOR<AddToCartTrackerCreateWithoutTryOnTrackerInput, AddToCartTrackerUncheckedCreateWithoutTryOnTrackerInput>
  }

  export type AddToCartTrackerUpsertWithoutTryOnTrackerInput = {
    update: XOR<AddToCartTrackerUpdateWithoutTryOnTrackerInput, AddToCartTrackerUncheckedUpdateWithoutTryOnTrackerInput>
    create: XOR<AddToCartTrackerCreateWithoutTryOnTrackerInput, AddToCartTrackerUncheckedCreateWithoutTryOnTrackerInput>
    where?: AddToCartTrackerWhereInput
  }

  export type AddToCartTrackerUpdateToOneWithWhereWithoutTryOnTrackerInput = {
    where?: AddToCartTrackerWhereInput
    data: XOR<AddToCartTrackerUpdateWithoutTryOnTrackerInput, AddToCartTrackerUncheckedUpdateWithoutTryOnTrackerInput>
  }

  export type AddToCartTrackerUpdateWithoutTryOnTrackerInput = {
    id?: StringFieldUpdateOperationsInput | string
    productUrl?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    productImage?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    shop?: StringFieldUpdateOperationsInput | string
  }

  export type AddToCartTrackerUncheckedUpdateWithoutTryOnTrackerInput = {
    id?: StringFieldUpdateOperationsInput | string
    productUrl?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    productImage?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    shop?: StringFieldUpdateOperationsInput | string
  }

  export type CustomerDataCreateManyShopInput = {
    id: string
    shopifyCustomerId: string
    customerData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type DataRequestCreateManyShopInput = {
    id: string
    requestId: string
    shopifyCustomerId: string
    requestData: JsonNullValueInput | InputJsonValue
    status: string
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type CustomerDataUpdateWithoutShopInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopifyCustomerId?: StringFieldUpdateOperationsInput | string
    customerData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerDataUncheckedUpdateWithoutShopInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopifyCustomerId?: StringFieldUpdateOperationsInput | string
    customerData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerDataUncheckedUpdateManyWithoutShopInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopifyCustomerId?: StringFieldUpdateOperationsInput | string
    customerData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DataRequestUpdateWithoutShopInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestId?: StringFieldUpdateOperationsInput | string
    shopifyCustomerId?: StringFieldUpdateOperationsInput | string
    requestData?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DataRequestUncheckedUpdateWithoutShopInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestId?: StringFieldUpdateOperationsInput | string
    shopifyCustomerId?: StringFieldUpdateOperationsInput | string
    requestData?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DataRequestUncheckedUpdateManyWithoutShopInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestId?: StringFieldUpdateOperationsInput | string
    shopifyCustomerId?: StringFieldUpdateOperationsInput | string
    requestData?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use ShopCountOutputTypeDefaultArgs instead
     */
    export type ShopCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ShopCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AddToCartTrackerDefaultArgs instead
     */
    export type AddToCartTrackerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AddToCartTrackerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CreditUsageDefaultArgs instead
     */
    export type CreditUsageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CreditUsageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CustomerDataDefaultArgs instead
     */
    export type CustomerDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CustomerDataDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DataRequestDefaultArgs instead
     */
    export type DataRequestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DataRequestDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SessionDefaultArgs instead
     */
    export type SessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SessionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ShopDefaultArgs instead
     */
    export type ShopArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ShopDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ShopSubscriptionDefaultArgs instead
     */
    export type ShopSubscriptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ShopSubscriptionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TryOnTrackerDefaultArgs instead
     */
    export type TryOnTrackerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TryOnTrackerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WebhookEventDefaultArgs instead
     */
    export type WebhookEventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WebhookEventDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}